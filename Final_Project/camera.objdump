
C:/Users/delgado4/Documents/GitHub/cube_solver/Final_Project/camera.elf:     file format elf32-littlenios2
C:/Users/delgado4/Documents/GitHub/cube_solver/Final_Project/camera.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00010520 memsz 0x00010520 flags r-x
    LOAD off    0x00011540 vaddr 0x00010540 paddr 0x00012468 align 2**12
         filesz 0x00001f28 memsz 0x00001f28 flags rw-
    LOAD off    0x00014390 vaddr 0x00014390 paddr 0x00014390 align 2**12
         filesz 0x00000000 memsz 0x000c04f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fcb8  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000720  0000fe20  0000fe20  00010e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f28  00010540  00012468  00011540  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000c0764  00014390  00014390  00014390  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00013468  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001058  00000000  00000000  00013490  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000025b5  00000000  00000000  000144e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002d3bd  00000000  00000000  00016a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a99c  00000000  00000000  00043e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001987b  00000000  00000000  0004e7f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000024fc  00000000  00000000  00068074  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004a6c  00000000  00000000  0006a570  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000fc3f  00000000  00000000  0006efdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0007ec1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ac0  00000000  00000000  0007ec40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0008437e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00084381  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00084384  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00084385  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00084386  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0008438a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0008438e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00084392  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0008439b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000843a4  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000843ad  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     001935c2  00000000  00000000  000843b8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
0000fe20 l    d  .rodata	00000000 .rodata
00010540 l    d  .rwdata	00000000 .rwdata
00014390 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 cube_solver.c
00000000 l    df *ABS*	00000000 camera.c
000123e4 l     O .rwdata	00000004 back_buff_reg
000123dc l     O .rwdata	00000004 front_buff_reg
000123e0 l     O .rwdata	00000004 status_reg
00000000 l    df *ABS*	00000000 char_lcd.c
00000000 l    df *ABS*	00000000 lcd.c
000123f8 l     O .rwdata	00000004 status_reg
000123fc l     O .rwdata	00000004 back_buff_reg
000123f0 l     O .rwdata	00000004 front_buff_reg
000123f4 l     O .rwdata	00000004 char_buff_base
00000000 l    df *ABS*	00000000 pushbuttons.c
00012408 l     O .rwdata	00000004 data_reg
00012404 l     O .rwdata	00000004 interrupt_mask_reg
00012400 l     O .rwdata	00000004 edge_capture_reg
00000000 l    df *ABS*	00000000 vga.c
00012414 l     O .rwdata	00000004 status_reg
00012418 l     O .rwdata	00000004 back_buff_reg
0001240c l     O .rwdata	00000004 front_buff_reg
00012410 l     O .rwdata	00000004 char_buff_base
00000000 l    df *ABS*	00000000 system_globals.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00002908 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 difftime.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004384 l     F .text	00000058 std
00004490 l     F .text	00000008 __fp_lock
00004498 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
00010588 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00006340 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
000065e8 l     F .text	00000058 __sprint_r
000101e6 l     O .rodata	00000010 blanks.3452
000101d6 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00008880 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00012434 l     O .rwdata	00000004 charset
00010218 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00010360 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000d034 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000d25c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00012454 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010f44 l     O .rwdata	00001060 JTAG_UART
00011fa4 l     O .rwdata	00000030 sgdma_rx
00011fd4 l     O .rwdata	00000030 sgdma_tx
00012004 l     O .rwdata	0000002c Accelerometer
00012030 l     O .rwdata	00000030 Camera_Config
00012060 l     O .rwdata	00000030 OnBoard_AV
00012090 l     O .rwdata	00000030 Audio
000120c0 l     O .rwdata	0000002c Char_LCD_16x2
000120ec l     O .rwdata	0000002c IrDA
00012118 l     O .rwdata	0000002c Expansion_JP5
00012144 l     O .rwdata	0000002c Green_LEDs
00012170 l     O .rwdata	0000002c HEX3_HEX0
0001219c l     O .rwdata	0000002c HEX7_HEX4
000121c8 l     O .rwdata	0000002c Pushbuttons
000121f4 l     O .rwdata	0000002c Red_LEDs
00012220 l     O .rwdata	0000002c Slider_Switches
0001224c l     O .rwdata	00000038 PS2_Port
00012284 l     O .rwdata	00000038 PS2_Port_Dual
000122bc l     O .rwdata	0000002c Serial_Port
000122e8 l     O .rwdata	00000034 USB
0001231c l     O .rwdata	00000048 LCD_Char_Buffer
00012364 l     O .rwdata	00000048 VGA_Char_Buffer
000123ac l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000dfb4 l     F .text	00000054 altera_avalon_jtag_uart_timeout
0000e080 l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
0000e750 l     F .text	00000068 alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000eb80 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000fa3c l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_remap_uncached.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000fc54 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000010f4 g     F .text	0000005c setupHardware
00002100 g     F .text	00000010 char_lcd_cursor_off
00001ba4 g     F .text	0000011c bwConversionFixedPoint
0000ad78 g     F .text	00000094 _mprec_log10
000020ac g     F .text	0000002c char_lcd_move_cursor
000022ec g     F .text	00000018 vga_set_front_buffer
0000ae64 g     F .text	00000088 __any_on
0000a5fc g     F .text	00000070 _isatty_r
00010338 g     O .rodata	00000028 __mprec_tinytens
0000d6e0 g     F .text	00000050 alt_main
000060c8 g     F .text	000000a0 _puts_r
0000f3fc g     F .text	0000001c alt_up_ps2_disable_read_interrupt
000d4784 g     O .bss	00000100 alt_irq
0000a730 g     F .text	00000078 _lseek_r
000023c8 g     F .text	00000130 sqrt
00012468 g       *ABS*	00000000 __flash_rwdata_start
0000ec80 g     F .text	00000010 alt_up_character_lcd_send_cmd
0000a04c g     F .text	000000a0 __sflags
0000cd08 g     F .text	00000088 __eqdf2
0000a588 g     F .text	00000074 _gettimeofday_r
00002120 g     F .text	00000010 char_lcd_shift_right
000d4884 g       *ABS*	00000000 __alt_heap_start
000006b4 g     F .text	00000070 displayColorImageFP
00005e64 g     F .text	00000044 printf
0000e620 g     F .text	00000094 alt_avalon_sgdma_do_sync_transfer
00000e44 g     F .text	000002b0 convolutionFn
000063d4 g     F .text	00000068 __sseek
000043ec g     F .text	000000a4 __sinit
0000f604 g     F .text	00000088 alt_up_char_buffer_string
00008510 g     F .text	00000130 __swbuf_r
0000f0bc g     F .text	0000000c read_CE_bit
00000460 g     F .text	00000048 determinantAbsFP
0000a690 g     F .text	00000084 _setlocale_r
000044ec g     F .text	00000068 __sfmoreglue
0000d734 g     F .text	00000004 __malloc_unlock
0000f18c g     F .text	00000080 alt_up_ps2_read_data_byte_timeout
000021a8 g     F .text	00000038 lcd_write
0000f4a8 g     F .text	00000080 alt_up_rs232_read_fd
00000444 g     F .text	0000001c traceFP
0000f68c g     F .text	00000058 alt_up_char_buffer_draw
0000e7b8 g     F .text	0000012c alt_avalon_sgdma_construct_descriptor_burst
0000030c g     F .text	00000074 determinant
0000217c g     F .text	0000000c lcd_set_back_buffer
000004a8 g     F .text	00000088 computeScoresAndThresholdFP
0000a88c g     F .text	000000e0 memmove
000044dc g     F .text	00000010 _cleanup
0000aeec g     F .text	000000bc _Balloc
000021e0 g     F .text	00000060 lcd_draw_rectangle
00014390 g     O .bss	00000004 imageCaptured
00003428 g     F .text	00000088 __gtdf2
00004020 g     F .text	00000010 __errno
0000ebbc g     F .text	0000001c get_DDRAM_addr
00000000 g     F .entry	0000001c __reset
000002e0 g     F .text	0000002c trace
0000e9bc g     F .text	0000004c alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00000020 g       *ABS*	00000000 __flash_exceptions_start
00005110 g     F .text	00000074 _fstat_r
00014394 g     O .bss	00000004 errno
00000a04 g     F .text	00000300 computePixelScores
000143c8 g     O .bss	00000004 alt_argv
00010564 g     O .rwdata	00000024 SOBEL_ARRAY_Y
0001a3d8 g       *ABS*	00000000 _gp
00002164 g     F .text	00000018 lcd_set_front_buffer
00002188 g     F .text	00000020 lcd_swap_buffers
00010dc4 g     O .rwdata	00000180 alt_fd_list
0000f884 g     F .text	00000070 alt_find_dev
00005cb4 g     F .text	000000a0 memcpy
0000ec50 g     F .text	00000020 alt_up_character_lcd_write_fd
000001dc g     F .text	000000b8 fpShortToDoubleMatrix
00002240 g     F .text	0000000c pushbuttons_get_data
0000f6e4 g     F .text	00000028 alt_up_char_buffer_clear
000044d0 g     F .text	0000000c _cleanup_r
00003538 g     F .text	000000f8 __floatsidf
0000faa0 g     F .text	00000098 alt_io_redirect
000034b0 g     F .text	00000088 __ltdf2
0000efe8 g     F .text	0000007c alt_up_irda_write_fd
0000f45c g     F .text	0000004c alt_up_rs232_read_data
00006168 g     F .text	00000014 puts
0000acc8 g     F .text	000000b0 __ratio
0000e92c g     F .text	00000050 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
0000f098 g     F .text	00000010 alt_up_irda_get_used_space_in_read_FIFO
0000e228 g     F .text	00000168 altera_avalon_jtag_uart_read
00005ea8 g     F .text	00000034 _printf_r
0000d170 g     F .text	00000008 __udivsi3
0000d500 g     F .text	00000084 isatty
00010248 g     O .rodata	000000c8 __mprec_tens
0000182c g     F .text	00000378 exportToMatlab
0000a66c g     F .text	00000008 __locale_charset
0000f064 g     F .text	0000001c alt_up_irda_disable_read_interrupt
000143b0 g     O .bss	00000008 alt_timezone
0000fb6c g     F .text	0000003c alt_icache_flush
00014398 g     O .bss	00000004 __malloc_top_pad
00002264 g     F .text	0000000c pushbuttons_get_edge_capture
00002368 g     F .text	00000060 vga_draw_rectangle
00002058 g     F .text	00000034 camera_enable_dma
00012430 g     O .rwdata	00000004 __mb_cur_max
0000a674 g     F .text	0000000c _localeconv_r
0000b5e4 g     F .text	0000003c __i2b
0000a0ec g     F .text	0000049c __sfvwrite_r
0000e5ec g     F .text	0000001c alt_avalon_sgdma_stop
00001424 g     F .text	00000408 exportToMatlabFP
0000635c g     F .text	00000070 _sbrk_r
0000b960 g     F .text	00000078 _read_r
0000fb68 g     F .text	00000004 alt_dcache_flush
00010d90 g     O .rwdata	0000000c __lc_ctype
00012448 g     O .rwdata	00000004 alt_max_fd
0000f430 g     F .text	0000000c alt_up_rs232_check_parity
00003e04 g     F .text	00000138 __unpack_d
00004030 g     F .text	00000110 _fclose_r
0000f0c8 g     F .text	00000008 read_num_bytes_available
00010540 g     O .rwdata	00000024 SOBEL_ARRAY_X
00004350 g     F .text	00000034 fflush
0001439c g     O .bss	00000004 __malloc_max_sbrked_mem
0000d444 g     F .text	000000bc alt_irq_register
0000f0a8 g     F .text	0000000c read_RI_bit
00002d98 g     F .text	00000074 __adddf3
0000aba8 g     F .text	00000120 __b2d
0000c758 g     F .text	000005b0 __umoddi3
0000d648 g     F .text	00000098 lseek
0001241c g     O .rwdata	00000004 __fdlib_version
00000294 g     F .text	0000004c shortToPixel
00012424 g     O .rwdata	00000004 _global_impure_ptr
0000b9d8 g     F .text	000005f4 _realloc_r
000d4884 g       *ABS*	00000000 __bss_end
0000e6b4 g     F .text	0000009c alt_avalon_sgdma_do_async_transfer
0000da54 g     F .text	000000ac alt_tick
0000c17c g     F .text	000005dc __udivdi3
00010310 g     O .rodata	00000028 __mprec_bigtens
0000b840 g     F .text	00000120 __s2b
0000cea0 g     F .text	00000194 __floatunsidf
0000aac8 g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0000f0dc g     F .text	00000008 read_data_byte
000044b8 g     F .text	00000018 __fp_lock_all
00000724 g     F .text	000000d4 extractCornersFP
0000da20 g     F .text	00000034 alt_alarm_stop
0000f0b4 g     F .text	00000008 read_RE_bit
08200000 g       *ABS*	00000000 __alt_mem_descriptor_memory
000143c0 g     O .bss	00000004 alt_irq_active
0000efc0 g     F .text	00000010 alt_up_irda_get_available_space_in_write_FIFO
000000ec g     F .exceptions	0000007c alt_irq_handler
00010d9c g     O .rwdata	00000028 alt_dev_null
00003980 g     F .text	000000c8 __unpack_f
0000ec90 g     F .text	0000001c alt_up_character_lcd_cursor_blink_on
0000eb0c g     F .text	00000030 alt_avalon_sgdma_check_descriptor_status
0000f290 g     F .text	00000040 alt_up_ps2_write_data_byte
0000f810 g     F .text	00000004 alt_dcache_flush_all
0000a994 g     F .text	00000070 __hi0bits
00003630 g     F .text	000000d8 __fixdfsi
00002310 g     F .text	00000020 vga_swap_buffers
00012468 g       *ABS*	00000000 __ram_rwdata_end
00001150 g     F .text	00000134 captureImageDataFP
00012440 g     O .rwdata	00000008 alt_dev_list
00004818 g     F .text	00000058 _fputc_r
0000db00 g     F .text	000000f4 write
0000e5bc g     F .text	00000030 alt_avalon_sgdma_enable_desc_poll
00005fe0 g     F .text	000000e8 _putc_r
000012e0 g     F .text	00000144 captureImageData
000027f8 g     F .text	00000078 __gtsf2
00010540 g       *ABS*	00000000 __ram_rodata_end
0000d264 g     F .text	00000080 fstat
00004754 g     F .text	0000002c fprintf
0000f550 g     F .text	00000070 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00002330 g     F .text	00000038 vga_write
00014400 g     O .bss	000c0000 capturedImage
0000b720 g     F .text	00000120 __pow5mult
000143a4 g     O .bss	00000004 __nlocale_changed
0000d178 g     F .text	00000008 __umodsi3
0000e97c g     F .text	00000040 alt_avalon_sgdma_construct_mem_to_stream_desc
0000e50c g     F .text	00000010 alt_avalon_sgdma_register_callback
0000208c g     F .text	00000020 camera_swap_buffers
000d4884 g       *ABS*	00000000 end
0000f2d0 g     F .text	00000070 alt_up_ps2_write_fd
00003820 g     F .text	00000160 __pack_f
00002270 g     F .text	00000010 pushbuttons_clear_edge_capture
0000eec8 g     F .text	0000000c alt_up_irda_check_parity
0000f72c g     F .text	00000050 alt_up_char_buffer_init
00001f38 g     F .text	000000fc bwConversion
000050ec g     F .text	00000024 fseek
0000e008 g     F .text	00000078 altera_avalon_jtag_uart_init
08000000 g       *ABS*	00000000 __alt_stack_pointer
0000e59c g     F .text	00000020 alt_avalon_sgdma_disable_desc_poll
0000eb3c g     F .text	00000044 alt_avalon_timer_sc_init
000037a0 g     F .text	00000080 __clzsi2
0000e390 g     F .text	0000017c altera_avalon_jtag_uart_write
0000ea78 g     F .text	00000038 alt_avalon_sgdma_construct_mem_to_mem_desc
00000d04 g     F .text	00000140 convolutionFnFP
000043dc g     F .text	00000004 __sfp_lock_acquire
0000a7a8 g     F .text	000000e4 memchr
0000ec24 g     F .text	0000002c alt_up_character_lcd_write
00006640 g     F .text	00001eac ___vfprintf_internal_r
0000ea08 g     F .text	00000028 alt_avalon_sgdma_construct_stream_to_mem_desc
0000499c g     F .text	00000314 _free_r
0000fc58 g     F .text	000001b0 __call_exitprocs
000143a8 g     O .bss	00000004 __mlocale_changed
0001242c g     O .rwdata	00000004 __malloc_sbrk_base
00000168 g     F .text	0000003c _start
000123ec g     O .rwdata	00000004 data_ptr
000143d0 g     O .bss	00000004 _alt_tick_rate
0000eab0 g     F .text	0000005c alt_avalon_sgdma_open
0000b2b0 g     F .text	0000014c __lshift
000143d4 g     O .bss	00000004 _alt_nticks
0000d8b4 g     F .text	000000f8 read
00000530 g     F .text	000000b8 displayImage
0000dc14 g     F .text	000002d0 alt_sys_init
0000ed34 g     F .text	00000090 alt_up_character_lcd_shift_display
00002870 g     F .text	00000098 __floatsisf
00005dec g     F .text	00000078 _open_r
000001a4 g     F .text	00000038 intToFPArray
0000f104 g     F .text	00000030 alt_up_ps2_clear_fifo
0000f528 g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
0000fb38 g     F .text	00000028 alt_remap_uncached
0000b3fc g     F .text	000001e8 __multiply
0000ecc8 g     F .text	0000006c alt_up_character_lcd_erase_pos
0000df7c g     F .text	00000038 altera_avalon_jtag_uart_close
00010540 g       *ABS*	00000000 __ram_rwdata_start
0000fe20 g       *ABS*	00000000 __ram_rodata_start
000143d8 g     O .bss	00000028 __malloc_current_mallinfo
0000afa8 g     F .text	0000017c __d2b
08201000 g       *ABS*	00000000 __alt_mem_packet_memory
0000df54 g     F .text	00000028 altera_avalon_jtag_uart_read_fd
0000f9b0 g     F .text	0000006c alt_get_fd
00003f3c g     F .text	000000c8 __fpcmp_parts_d
00008810 g     F .text	00000070 _close_r
00000640 g     F .text	00000074 displayColorImage
0000fbe0 g     F .text	00000074 memcmp
0000df04 g     F .text	00000028 altera_avalon_jtag_uart_close_fd
000d4884 g       *ABS*	00000000 __alt_stack_base
0000dee4 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
00005304 g     F .text	0000009c _fwrite_r
0000f080 g     F .text	00000018 alt_up_irda_enable_read_interrupt
000086d4 g     F .text	0000013c __swsetup_r
000031d0 g     F .text	00000258 __divdf3
00004554 g     F .text	000000f0 __sfp
0000ae0c g     F .text	00000058 __copybits
00010988 g     O .rwdata	00000408 __malloc_av_
000043e8 g     F .text	00000004 __sinit_lock_release
00002e0c g     F .text	000003c4 __muldf3
000064b8 g     F .text	00000060 __sread
0000f5c0 g     F .text	0000001c alt_up_rs232_disable_read_interrupt
0000f8f4 g     F .text	000000bc alt_find_file
0000f814 g     F .text	00000070 alt_dev_llist_insert
0000d730 g     F .text	00000004 __malloc_lock
00004780 g     F .text	00000034 _fprintf_r
0000d9d0 g     F .text	00000050 sbrk
0000e608 g     F .text	00000018 alt_avalon_sgdma_start
00004154 g     F .text	000001fc _fflush_r
00002304 g     F .text	0000000c vga_set_back_buffer
0000c0c8 g     F .text	000000b4 _calloc_r
0000d2e4 g     F .text	00000160 gettimeofday
00004738 g     F .text	0000001c fopen
00014390 g       *ABS*	00000000 __bss_start
00005d54 g     F .text	00000098 memset
00001cc0 g     F .text	00000278 main
000143cc g     O .bss	00000004 alt_envp
000143a0 g     O .bss	00000004 __malloc_max_total_mem
0000f70c g     F .text	00000020 alt_up_char_buffer_open_dev
0000df2c g     F .text	00000028 altera_avalon_jtag_uart_write_fd
00008640 g     F .text	0000001c __swbuf
00012460 g     O .rwdata	00000008 alt_sgdma_list
000d4400 g     O .bss	00000382 pixelData
0000edc4 g     F .text	00000090 alt_up_character_lcd_shift_cursor
000063cc g     F .text	00000008 __sclose
000027f0 g     F .text	00000008 matherr
08000000 g       *ABS*	00000000 __alt_heap_limit
00004140 g     F .text	00000014 fclose
0000f134 g     F .text	00000058 alt_up_ps2_read_data_byte
00008a98 g     F .text	000015b4 _dtoa_r
00005574 g     F .text	00000740 _malloc_r
0000658c g     F .text	0000005c time
0001244c g     O .rwdata	00000004 alt_errno
0000524c g     F .text	000000b8 _fwalk
0000efd0 g     F .text	00000018 alt_up_irda_write_data
0000f0e4 g     F .text	00000020 alt_up_ps2_open_dev
00005edc g     F .text	00000104 putc
0000d0b0 g     F .text	00000060 __divsi3
00010064 g     O .rodata	00000014 __thenan_df
0000eea8 g     F .text	00000020 alt_up_character_lcd_open_dev
00004870 g     F .text	0000012c _malloc_trim_r
0000f418 g     F .text	00000018 alt_up_ps2_enable_read_interrupt
0000ec70 g     F .text	00000010 alt_up_character_lcd_init
0000c00c g     F .text	000000bc strcmp
0000fe20 g       *ABS*	00000000 __flash_rodata_start
0000f43c g     F .text	00000020 alt_up_rs232_open_dev
0000cd90 g     F .text	00000088 __nedf2
0000dbf4 g     F .text	00000020 alt_irq_init
0000d9ac g     F .text	00000024 alt_release_fd
0000f0d0 g     F .text	0000000c read_data_valid
0000ecac g     F .text	0000001c alt_up_character_lcd_cursor_off
00010078 g     O .rodata	00000100 __clz_tab
000143ac g     O .bss	00000004 _PathLocale
00002034 g     F .text	00000018 camera_set_front_buffer
000005e8 g     F .text	00000058 displayImageFP
00004004 g     F .text	0000001c difftime
0000f340 g     F .text	00000034 alt_up_ps2_write_data_byte_with_ack
00002258 g     F .text	0000000c pushbuttons_get_interrupt_mask
0000865c g     F .text	00000078 _write_r
000123d8 g     O .rwdata	00000004 imagePtr
0000a714 g     F .text	0000001c setlocale
00012420 g     O .rwdata	00000004 _impure_ptr
000143c4 g     O .bss	00000004 alt_argc
00004cb0 g     F .text	0000043c _fseek_r
0000617c g     F .text	000001c4 __srefill_r
000022b8 g     F .text	00000034 vga_enable_dma
00000020 g       .exceptions	00000000 alt_irq_entry
0000ab28 g     F .text	00000080 __ulp
0000bfcc g     F .text	00000040 __isinfd
000044a0 g     F .text	00000018 __fp_unlock_all
000047b4 g     F .text	00000064 fputc
00000380 g     F .text	000000c4 computeScoresAndThreshold
00012438 g     O .rwdata	00000008 alt_fs_list
0000f5dc g     F .text	00000018 alt_up_rs232_enable_read_interrupt
0000f538 g     F .text	00000018 alt_up_rs232_write_data
000143b8 g     O .bss	00000008 alt_resettime
00000020 g       *ABS*	00000000 __ram_exceptions_start
000007f8 g     F .text	000000d8 extractCorners
0000a680 g     F .text	00000010 localeconv
000024f8 g     F .text	000002c8 __ieee754_sqrt
000053a0 g     F .text	00000040 fwrite
00012468 g       *ABS*	00000000 _edata
000d4884 g       *ABS*	00000000 _end
00001284 g     F .text	0000005c pushbuttons_isr
00000168 g       *ABS*	00000000 __ram_exceptions_end
0000e1b4 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
0000204c g     F .text	0000000c camera_set_back_buffer
0000e8e4 g     F .text	00000048 alt_avalon_sgdma_construct_descriptor
0000643c g     F .text	0000007c __swrite
00012428 g     O .rwdata	00000004 __malloc_trim_threshold
0000fb60 g     F .text	00000008 altera_nios2_qsys_irq_init
0000fba8 g     F .text	00000038 exit
0000eef4 g     F .text	0000004c alt_up_irda_read_data
00005184 g     F .text	000000c8 _fwalk_reent
0000f374 g     F .text	00000088 alt_up_ps2_init
0000b124 g     F .text	0000018c __mdiff
000008d0 g     F .text	00000134 computePixelScoresFP
0000d110 g     F .text	00000060 __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000043e0 g     F .text	00000004 __sfp_lock_release
0000224c g     F .text	0000000c pushbuttons_set_interrupt_mask
00002280 g     F .text	00000038 pushbuttons_enable_interrupts
0000ebd8 g     F .text	0000004c alt_up_character_lcd_string
0000eed4 g     F .text	00000020 alt_up_irda_open_dev
00002110 g     F .text	00000010 char_lcd_shift_left
00003a48 g     F .text	000000a8 __fpcmp_parts_f
00004644 g     F .text	000000f4 _fopen_r
0000fe08 g     F .text	00000014 _exit
000027c0 g     F .text	00000030 __isnand
0000f77c g     F .text	00000094 alt_alarm_start
00003708 g     F .text	00000098 __muldi3
000053e0 g     F .text	00000194 __smakebuf_r
0000f234 g     F .text	0000005c alt_up_ps2_wait_for_ack
00006518 g     F .text	00000074 strlen
0000d738 g     F .text	0000017c open
0000ce18 g     F .text	00000088 __gedf2
0000fa1c g     F .text	00000020 alt_icache_flush_all
0000ee54 g     F .text	00000054 alt_up_character_lcd_set_cursor_pos
00012450 g     O .rwdata	00000004 alt_priority_mask
000084ec g     F .text	00000024 __vfprintf_internal
0000f20c g     F .text	00000028 alt_up_ps2_read_fd
0000ea30 g     F .text	00000048 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
00002d18 g     F .text	00000080 __subdf3
0000ef40 g     F .text	00000080 alt_up_irda_read_fd
000123e8 g     O .rwdata	00000004 instruction_ptr
0000aa04 g     F .text	000000c4 __lo0bits
00012458 g     O .rwdata	00000008 alt_alarm_list
00002130 g     F .text	00000034 lcd_enable_dma
0000f5f4 g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
0000d180 g     F .text	000000dc close
0000d584 g     F .text	000000c4 alt_load
00003af0 g     F .text	00000314 __pack_d
0000e51c g     F .text	00000080 alt_avalon_sgdma_init
00000000  w      *UND*	00000000 free
000043e4 g     F .text	00000004 __sinit_lock_acquire
0000b620 g     F .text	00000100 __multadd
0000a96c g     F .text	00000028 _Bfree
000020d8 g     F .text	00000028 char_lcd_write



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405a14 	ori	at,at,360
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	04000374 	movhi	r16,13
 100:	8411e104 	addi	r16,r16,18308
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	000b883a 	mov	r5,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 114:	280490fa 	slli	r2,r5,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	000b883a 	mov	r5,zero
 140:	1809883a 	mov	r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	290b883a 	add	r5,r5,r4
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     168:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     16c:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     170:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     174:	d6a8f614 	ori	gp,gp,41944
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     178:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     17c:	1090e414 	ori	r2,r2,17296

    movhi r3, %hi(__bss_end)
     180:	00c00374 	movhi	r3,13
    ori r3, r3, %lo(__bss_end)
     184:	18d22114 	ori	r3,r3,18564

    beq r2, r3, 1f
     188:	10c00326 	beq	r2,r3,198 <_start+0x30>

0:
    stw zero, (r2)
     18c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     194:	10fffd36 	bltu	r2,r3,18c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     198:	000d5840 	call	d584 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     19c:	000d6e00 	call	d6e0 <alt_main>

000001a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1a0:	003fff06 	br	1a0 <alt_after_alt_main>

000001a4 <intToFPArray>:



void intToFPArray(int *arr, int *fpArr, size_t numElems){
	size_t i;
	for(i = 0; i < numElems; i++){
     1a4:	30000c26 	beq	r6,zero,1d8 <intToFPArray+0x34>
     1a8:	0011883a 	mov	r8,zero
     1ac:	000f883a 	mov	r7,zero
     1b0:	02800044 	movi	r10,1
     1b4:	02400104 	movi	r9,4
		fpArr[i] = arr[i] << NUM_FRACTIONAL_BITS;
     1b8:	29c7883a 	add	r3,r5,r7
     1bc:	3905883a 	add	r2,r7,r4
     1c0:	10800017 	ldw	r2,0(r2)
     1c4:	100491ba 	slli	r2,r2,6
     1c8:	18800015 	stw	r2,0(r3)



void intToFPArray(int *arr, int *fpArr, size_t numElems){
	size_t i;
	for(i = 0; i < numElems; i++){
     1cc:	4291883a 	add	r8,r8,r10
     1d0:	3a4f883a 	add	r7,r7,r9
     1d4:	323ff81e 	bne	r6,r8,1b8 <intToFPArray+0x14>
     1d8:	f800283a 	ret

000001dc <fpShortToDoubleMatrix>:
		fpArr[i] = arr[i] << NUM_FRACTIONAL_BITS;
	}
}

void fpShortToDoubleMatrix(short *fpMat, double *doubleMat){
     1dc:	defffa04 	addi	sp,sp,-24
     1e0:	dfc00515 	stw	ra,20(sp)
     1e4:	dd000415 	stw	r20,16(sp)
     1e8:	dcc00315 	stw	r19,12(sp)
     1ec:	dc800215 	stw	r18,8(sp)
     1f0:	dc400115 	stw	r17,4(sp)
     1f4:	dc000015 	stw	r16,0(sp)
     1f8:	2029883a 	mov	r20,r4
     1fc:	2827883a 	mov	r19,r5
     200:	0025883a 	mov	r18,zero
     204:	00001906 	br	26c <fpShortToDoubleMatrix+0x90>
	size_t i;
	size_t j;

	for(j = 0; j < MATRIX_DIM_Y; j++){
		for(i = 0; i < MATRIX_DIM_X; i++){
			doubleMat[(j << 9) + i] = ((double)fpMat[(j<<9) + i]) / pow(2, NUM_FRACTIONAL_BITS);
     208:	9004927a 	slli	r2,r18,9
     20c:	1445883a 	add	r2,r2,r17
     210:	102090fa 	slli	r16,r2,3
     214:	84e1883a 	add	r16,r16,r19
     218:	1085883a 	add	r2,r2,r2
     21c:	1505883a 	add	r2,r2,r20
     220:	1100000f 	ldh	r4,0(r2)
     224:	00035380 	call	3538 <__floatsidf>
     228:	100b883a 	mov	r5,r2
     22c:	180d883a 	mov	r6,r3
     230:	0005883a 	mov	r2,zero
     234:	00cfe434 	movhi	r3,16272
     238:	2809883a 	mov	r4,r5
     23c:	300b883a 	mov	r5,r6
     240:	100d883a 	mov	r6,r2
     244:	180f883a 	mov	r7,r3
     248:	0002e0c0 	call	2e0c <__muldf3>
     24c:	80800015 	stw	r2,0(r16)
     250:	80c00115 	stw	r3,4(r16)
void fpShortToDoubleMatrix(short *fpMat, double *doubleMat){
	size_t i;
	size_t j;

	for(j = 0; j < MATRIX_DIM_Y; j++){
		for(i = 0; i < MATRIX_DIM_X; i++){
     254:	00c00044 	movi	r3,1
     258:	88e3883a 	add	r17,r17,r3
     25c:	00808004 	movi	r2,512
     260:	88bfe91e 	bne	r17,r2,208 <fpShortToDoubleMatrix+0x2c>

void fpShortToDoubleMatrix(short *fpMat, double *doubleMat){
	size_t i;
	size_t j;

	for(j = 0; j < MATRIX_DIM_Y; j++){
     264:	90e5883a 	add	r18,r18,r3
     268:	94400226 	beq	r18,r17,274 <fpShortToDoubleMatrix+0x98>
		for(i = 0; i < MATRIX_DIM_X; i++){
			doubleMat[(j << 9) + i] = ((double)fpMat[(j<<9) + i]) / pow(2, NUM_FRACTIONAL_BITS);
		}
	}
}
     26c:	0023883a 	mov	r17,zero
     270:	003fe506 	br	208 <fpShortToDoubleMatrix+0x2c>
     274:	dfc00517 	ldw	ra,20(sp)
     278:	dd000417 	ldw	r20,16(sp)
     27c:	dcc00317 	ldw	r19,12(sp)
     280:	dc800217 	ldw	r18,8(sp)
     284:	dc400117 	ldw	r17,4(sp)
     288:	dc000017 	ldw	r16,0(sp)
     28c:	dec00604 	addi	sp,sp,24
     290:	f800283a 	ret

00000294 <shortToPixel>:

// Convert short to pixel
struct pixel shortToPixel(short rawData){
     294:	deffff04 	addi	sp,sp,-4
	struct pixel p; 
	p.blue = blue;
	p.green = green; 
	p.red = red;

	return p;
     298:	20be000c 	andi	r2,r4,63488
     29c:	1005d2ba 	srai	r2,r2,10
     2a0:	d8800005 	stb	r2,0(sp)
     2a4:	2081f80c 	andi	r2,r4,2016
     2a8:	1005d17a 	srai	r2,r2,5
     2ac:	d8800045 	stb	r2,1(sp)
     2b0:	210007cc 	andi	r4,r4,31
     2b4:	2109883a 	add	r4,r4,r4
     2b8:	d9000085 	stb	r4,2(sp)
     2bc:	11003fcc 	andi	r4,r2,255
     2c0:	2008923a 	slli	r4,r4,8
     2c4:	d8c00003 	ldbu	r3,0(sp)
     2c8:	d8800083 	ldbu	r2,2(sp)
     2cc:	1004943a 	slli	r2,r2,16
     2d0:	1906b03a 	or	r3,r3,r4

}
     2d4:	1884b03a 	or	r2,r3,r2
     2d8:	dec00104 	addi	sp,sp,4
     2dc:	f800283a 	ret

000002e0 <trace>:
	}
}

// Trace of a 2x2 matrix. The trace is the sum of the elements of a 
// matrix along the main diagonal
double trace(double* mat){
     2e0:	deffff04 	addi	sp,sp,-4
     2e4:	dfc00015 	stw	ra,0(sp)
     2e8:	2005883a 	mov	r2,r4
     2ec:	21000017 	ldw	r4,0(r4)
     2f0:	11400117 	ldw	r5,4(r2)
     2f4:	11800617 	ldw	r6,24(r2)
     2f8:	11c00717 	ldw	r7,28(r2)
     2fc:	0002d980 	call	2d98 <__adddf3>
	return mat[0] + mat[3];
}
     300:	dfc00017 	ldw	ra,0(sp)
     304:	dec00104 	addi	sp,sp,4
     308:	f800283a 	ret

0000030c <determinant>:

double determinant(double* mat){
     30c:	defffc04 	addi	sp,sp,-16
     310:	dfc00315 	stw	ra,12(sp)
     314:	dc800215 	stw	r18,8(sp)
     318:	dc400115 	stw	r17,4(sp)
     31c:	dc000015 	stw	r16,0(sp)
     320:	2021883a 	mov	r16,r4
     324:	21000017 	ldw	r4,0(r4)
     328:	81400117 	ldw	r5,4(r16)
     32c:	81800617 	ldw	r6,24(r16)
     330:	81c00717 	ldw	r7,28(r16)
     334:	0002e0c0 	call	2e0c <__muldf3>
     338:	1023883a 	mov	r17,r2
     33c:	1825883a 	mov	r18,r3
     340:	81000217 	ldw	r4,8(r16)
     344:	81400317 	ldw	r5,12(r16)
     348:	81800417 	ldw	r6,16(r16)
     34c:	81c00517 	ldw	r7,20(r16)
     350:	0002e0c0 	call	2e0c <__muldf3>
     354:	8809883a 	mov	r4,r17
     358:	900b883a 	mov	r5,r18
     35c:	100d883a 	mov	r6,r2
     360:	180f883a 	mov	r7,r3
     364:	0002d180 	call	2d18 <__subdf3>
	return mat[0] * mat[3] - mat[1] * mat[2];
}
     368:	dfc00317 	ldw	ra,12(sp)
     36c:	dc800217 	ldw	r18,8(sp)
     370:	dc400117 	ldw	r17,4(sp)
     374:	dc000017 	ldw	r16,0(sp)
     378:	dec00404 	addi	sp,sp,16
     37c:	f800283a 	ret

00000380 <computeScoresAndThreshold>:

int computeScoresAndThreshold(double* mMatrix){
     380:	defffa04 	addi	sp,sp,-24
     384:	dfc00515 	stw	ra,20(sp)
     388:	dd000415 	stw	r20,16(sp)
     38c:	dcc00315 	stw	r19,12(sp)
     390:	dc800215 	stw	r18,8(sp)
     394:	dc400115 	stw	r17,4(sp)
     398:	dc000015 	stw	r16,0(sp)
     39c:	2025883a 	mov	r18,r4
	double tr = trace(mMatrix);
     3a0:	00002e00 	call	2e0 <trace>
     3a4:	1021883a 	mov	r16,r2
     3a8:	1823883a 	mov	r17,r3
     3ac:	0029883a 	mov	r20,zero
	double score = fabs(determinant(mMatrix)) - tr*tr;
     3b0:	9009883a 	mov	r4,r18
     3b4:	000030c0 	call	30c <determinant>
     3b8:	1025883a 	mov	r18,r2
     3bc:	00a00034 	movhi	r2,32768
     3c0:	10bfffc4 	addi	r2,r2,-1
     3c4:	18a6703a 	and	r19,r3,r2
     3c8:	8009883a 	mov	r4,r16
     3cc:	880b883a 	mov	r5,r17
     3d0:	800d883a 	mov	r6,r16
     3d4:	880f883a 	mov	r7,r17
     3d8:	0002e0c0 	call	2e0c <__muldf3>
     3dc:	9009883a 	mov	r4,r18
     3e0:	980b883a 	mov	r5,r19
     3e4:	100d883a 	mov	r6,r2
     3e8:	180f883a 	mov	r7,r3
     3ec:	0002d180 	call	2d18 <__subdf3>
     3f0:	100b883a 	mov	r5,r2
     3f4:	180d883a 	mov	r6,r3
     3f8:	00a80034 	movhi	r2,40960
     3fc:	00cff6b4 	movhi	r3,16346
     400:	18e66644 	addi	r3,r3,-26215
     404:	2809883a 	mov	r4,r5
     408:	300b883a 	mov	r5,r6
     40c:	100d883a 	mov	r6,r2
     410:	180f883a 	mov	r7,r3
     414:	00034280 	call	3428 <__gtdf2>
     418:	0080010e 	bge	zero,r2,420 <computeScoresAndThreshold+0xa0>
     41c:	05000044 	movi	r20,1
	if (score > THRESHOLD) {
		return 1;
	}
	return 0;
}
     420:	a005883a 	mov	r2,r20
     424:	dfc00517 	ldw	ra,20(sp)
     428:	dd000417 	ldw	r20,16(sp)
     42c:	dcc00317 	ldw	r19,12(sp)
     430:	dc800217 	ldw	r18,8(sp)
     434:	dc400117 	ldw	r17,4(sp)
     438:	dc000017 	ldw	r16,0(sp)
     43c:	dec00604 	addi	sp,sp,24
     440:	f800283a 	ret

00000444 <traceFP>:
			mMatrixBinary[currIndex] = binaryScore;
		}
	}
}

short traceFP(short *mat){
     444:	2080000b 	ldhu	r2,0(r4)
     448:	20c0018b 	ldhu	r3,6(r4)
     44c:	10c5883a 	add	r2,r2,r3
	return mat[0] + mat[3];
}
     450:	10bfffcc 	andi	r2,r2,65535
     454:	10a0001c 	xori	r2,r2,32768
     458:	10a00004 	addi	r2,r2,-32768
     45c:	f800283a 	ret

00000460 <determinantAbsFP>:

short determinantAbsFP(short *mat){
     460:	20c0000f 	ldh	r3,0(r4)
     464:	2080018f 	ldh	r2,6(r4)
     468:	1887383a 	mul	r3,r3,r2
     46c:	1807d1ba 	srai	r3,r3,6
     470:	2080008f 	ldh	r2,2(r4)
     474:	2100010f 	ldh	r4,4(r4)
     478:	1105383a 	mul	r2,r2,r4
     47c:	1005d1ba 	srai	r2,r2,6
     480:	1887c83a 	sub	r3,r3,r2
     484:	18bfffcc 	andi	r2,r3,65535
     488:	10a0001c 	xori	r2,r2,32768
     48c:	10a00004 	addi	r2,r2,-32768
     490:	1000010e 	bge	r2,zero,498 <determinantAbsFP+0x38>
     494:	0085c83a 	sub	r2,zero,r2
	int outer = ((int)mat[0]) * ((int)mat[3]);
	int cross = ((int)mat[1]) * ((int)mat[2]);
	short det =  ((short)(outer>>NUM_FRACTIONAL_BITS)) - ((short)(cross>>NUM_FRACTIONAL_BITS));
	return det > 0 ? det : -det;
}
     498:	10bfffcc 	andi	r2,r2,65535
     49c:	10a0001c 	xori	r2,r2,32768
     4a0:	10a00004 	addi	r2,r2,-32768
     4a4:	f800283a 	ret

000004a8 <computeScoresAndThresholdFP>:

char computeScoresAndThresholdFP(short* mMatrix){
     4a8:	defffc04 	addi	sp,sp,-16
     4ac:	dfc00315 	stw	ra,12(sp)
     4b0:	dc800215 	stw	r18,8(sp)
     4b4:	dc400115 	stw	r17,4(sp)
     4b8:	dc000015 	stw	r16,0(sp)
     4bc:	2023883a 	mov	r17,r4
	int tr = traceFP(mMatrix);
     4c0:	00004440 	call	444 <traceFP>
     4c4:	143fffcc 	andi	r16,r2,65535
     4c8:	8420001c 	xori	r16,r16,32768
     4cc:	84200004 	addi	r16,r16,-32768
     4d0:	0025883a 	mov	r18,zero
	short tr_sq = (short)((tr*tr)>>NUM_FRACTIONAL_BITS);
	short score = determinantAbsFP(mMatrix) - tr_sq;
     4d4:	8809883a 	mov	r4,r17
     4d8:	00004600 	call	460 <determinantAbsFP>
     4dc:	8421383a 	mul	r16,r16,r16
     4e0:	8021d1ba 	srai	r16,r16,6
     4e4:	1405c83a 	sub	r2,r2,r16
     4e8:	10bfffcc 	andi	r2,r2,65535
     4ec:	10a0001c 	xori	r2,r2,32768
     4f0:	10a00004 	addi	r2,r2,-32768
     4f4:	1009d1ba 	srai	r4,r2,6
     4f8:	00028700 	call	2870 <__floatsisf>
     4fc:	1009883a 	mov	r4,r2
     500:	014fb374 	movhi	r5,16077
     504:	29733344 	addi	r5,r5,-13107
     508:	00027f80 	call	27f8 <__gtsf2>
     50c:	0080010e 	bge	zero,r2,514 <computeScoresAndThresholdFP+0x6c>
     510:	04800044 	movi	r18,1
	if ((score>>NUM_FRACTIONAL_BITS) > THRESHOLD) {
		return 1;
	}
	return 0;
}
     514:	9005883a 	mov	r2,r18
     518:	dfc00317 	ldw	ra,12(sp)
     51c:	dc800217 	ldw	r18,8(sp)
     520:	dc400117 	ldw	r17,4(sp)
     524:	dc000017 	ldw	r16,0(sp)
     528:	dec00404 	addi	sp,sp,16
     52c:	f800283a 	ret

00000530 <displayImage>:

	vga_enable_dma(1);
	vga_draw_rectangle(0, 0, LCD_RES_X, LCD_RES_Y, BLACK);
}

void displayImage(double *matrix){
     530:	defffb04 	addi	sp,sp,-20
     534:	dfc00415 	stw	ra,16(sp)
     538:	dcc00315 	stw	r19,12(sp)
     53c:	dc800215 	stw	r18,8(sp)
     540:	dc400115 	stw	r17,4(sp)
     544:	dc000015 	stw	r16,0(sp)
     548:	2027883a 	mov	r19,r4
     54c:	0025883a 	mov	r18,zero
     550:	00001b06 	br	5c0 <displayImage+0x90>

	short max_val = 0xF;
	short pixel;
	for(j = 0; j < VGA_RES_Y; j++){
		for(i = 0; i < VGA_RES_X; i++){
			pixel = (short)(matrix[j*LCD_RES_X + i] * max_val);
     554:	89400017 	ldw	r5,0(r17)
     558:	89800117 	ldw	r6,4(r17)
     55c:	0005883a 	mov	r2,zero
     560:	00d00bb4 	movhi	r3,16430
     564:	2809883a 	mov	r4,r5
     568:	300b883a 	mov	r5,r6
     56c:	100d883a 	mov	r6,r2
     570:	180f883a 	mov	r7,r3
     574:	0002e0c0 	call	2e0c <__muldf3>
     578:	1009883a 	mov	r4,r2
     57c:	180b883a 	mov	r5,r3
     580:	00036300 	call	3630 <__fixdfsi>
			vga_front_buffer[(j << 9) + i] = pixel;
     584:	9006927a 	slli	r3,r18,9
     588:	80c7883a 	add	r3,r16,r3
     58c:	18c7883a 	add	r3,r3,r3
     590:	01020034 	movhi	r4,2048
     594:	1907883a 	add	r3,r3,r4
     598:	1880000d 	sth	r2,0(r3)
	volatile short *vga_front_buffer = (volatile short *)VGA_DEFAULT_FRONT_BUFF_BASE;

	short max_val = 0xF;
	short pixel;
	for(j = 0; j < VGA_RES_Y; j++){
		for(i = 0; i < VGA_RES_X; i++){
     59c:	00c00044 	movi	r3,1
     5a0:	80e1883a 	add	r16,r16,r3
     5a4:	8c400204 	addi	r17,r17,8
     5a8:	00805004 	movi	r2,320
     5ac:	80bfe91e 	bne	r16,r2,554 <displayImage+0x24>

	volatile short *vga_front_buffer = (volatile short *)VGA_DEFAULT_FRONT_BUFF_BASE;

	short max_val = 0xF;
	short pixel;
	for(j = 0; j < VGA_RES_Y; j++){
     5b0:	90e5883a 	add	r18,r18,r3
     5b4:	9cc38204 	addi	r19,r19,3592
     5b8:	00803c04 	movi	r2,240
     5bc:	90800326 	beq	r18,r2,5cc <displayImage+0x9c>
		for(i = 0; i < VGA_RES_X; i++){
			pixel = (short)(matrix[j*LCD_RES_X + i] * max_val);
			vga_front_buffer[(j << 9) + i] = pixel;
		}
	}
}
     5c0:	9823883a 	mov	r17,r19
     5c4:	0021883a 	mov	r16,zero
     5c8:	003fe206 	br	554 <displayImage+0x24>
     5cc:	dfc00417 	ldw	ra,16(sp)
     5d0:	dcc00317 	ldw	r19,12(sp)
     5d4:	dc800217 	ldw	r18,8(sp)
     5d8:	dc400117 	ldw	r17,4(sp)
     5dc:	dc000017 	ldw	r16,0(sp)
     5e0:	dec00504 	addi	sp,sp,20
     5e4:	f800283a 	ret

000005e8 <displayImageFP>:

void displayImageFP(short *matrix){
     5e8:	200f883a 	mov	r7,r4
     5ec:	000d883a 	mov	r6,zero
     5f0:	00001006 	br	634 <displayImageFP+0x4c>
	short max_val = 0xF;
	short pixel;
	for(j = 0; j < VGA_RES_Y; j++){
		for(i = 0; i < VGA_RES_X; i++){
			//pixel = (short)(((float)matrix[(j<<9) + i]) / pow(2,NUM_FRACTIONAL_BITS));
			pixel = matrix[(j<<9) + i] >> (NUM_FRACTIONAL_BITS-5);
     5f4:	3004927a 	slli	r2,r6,9
     5f8:	2885883a 	add	r2,r5,r2
     5fc:	1085883a 	add	r2,r2,r2
     600:	11c7883a 	add	r3,r2,r7
     604:	18c0000f 	ldh	r3,0(r3)
     608:	1807d07a 	srai	r3,r3,1
			vga_front_buffer[(j << 9) + i] = pixel;
     60c:	01020034 	movhi	r4,2048
     610:	1105883a 	add	r2,r2,r4
     614:	10c0000d 	sth	r3,0(r2)
	volatile short *vga_front_buffer = (volatile short *)VGA_DEFAULT_FRONT_BUFF_BASE;

	short max_val = 0xF;
	short pixel;
	for(j = 0; j < VGA_RES_Y; j++){
		for(i = 0; i < VGA_RES_X; i++){
     618:	00c00044 	movi	r3,1
     61c:	28cb883a 	add	r5,r5,r3
     620:	00805004 	movi	r2,320
     624:	28bff31e 	bne	r5,r2,5f4 <displayImageFP+0xc>

	volatile short *vga_front_buffer = (volatile short *)VGA_DEFAULT_FRONT_BUFF_BASE;

	short max_val = 0xF;
	short pixel;
	for(j = 0; j < VGA_RES_Y; j++){
     628:	30cd883a 	add	r6,r6,r3
     62c:	00803c04 	movi	r2,240
     630:	30800226 	beq	r6,r2,63c <displayImageFP+0x54>
			//pixel = (short)(((float)matrix[(j<<9) + i]) / pow(2,NUM_FRACTIONAL_BITS));
			pixel = matrix[(j<<9) + i] >> (NUM_FRACTIONAL_BITS-5);
			vga_front_buffer[(j << 9) + i] = pixel;
		}
	}
}
     634:	000b883a 	mov	r5,zero
     638:	003fee06 	br	5f4 <displayImageFP+0xc>
     63c:	f800283a 	ret

00000640 <displayColorImage>:

void displayColorImage(struct pixel *matrix){
     640:	2011883a 	mov	r8,r4
     644:	000f883a 	mov	r7,zero
     648:	00001606 	br	6a4 <displayColorImage+0x64>
	struct pixel p;
	short pixel;
	for(j = 0; j < VGA_RES_Y; j++){
		for(i = 0; i < VGA_RES_X; i++){
			p = matrix[j*LCD_RES_X + i];
			pixel = (((uint16_t) p.red) << 11) | (((uint16_t) p.green) << 5) | (uint16_t) p.blue;
     64c:	29000043 	ldbu	r4,1(r5)
     650:	2008917a 	slli	r4,r4,5
     654:	28800003 	ldbu	r2,0(r5)
     658:	100492fa 	slli	r2,r2,11
     65c:	28c00083 	ldbu	r3,2(r5)
     660:	10c4b03a 	or	r2,r2,r3
     664:	2088b03a 	or	r4,r4,r2
			vga_front_buffer[(j << 9) + i] = pixel;
     668:	3804927a 	slli	r2,r7,9
     66c:	1185883a 	add	r2,r2,r6
     670:	1085883a 	add	r2,r2,r2
     674:	00c20034 	movhi	r3,2048
     678:	10c5883a 	add	r2,r2,r3
     67c:	1100000d 	sth	r4,0(r2)
	volatile short *vga_front_buffer = (volatile short *)VGA_DEFAULT_FRONT_BUFF_BASE;

	struct pixel p;
	short pixel;
	for(j = 0; j < VGA_RES_Y; j++){
		for(i = 0; i < VGA_RES_X; i++){
     680:	00c00044 	movi	r3,1
     684:	30cd883a 	add	r6,r6,r3
     688:	294000c4 	addi	r5,r5,3
     68c:	00805004 	movi	r2,320
     690:	30bfee1e 	bne	r6,r2,64c <displayColorImage+0xc>

	volatile short *vga_front_buffer = (volatile short *)VGA_DEFAULT_FRONT_BUFF_BASE;

	struct pixel p;
	short pixel;
	for(j = 0; j < VGA_RES_Y; j++){
     694:	38cf883a 	add	r7,r7,r3
     698:	420150c4 	addi	r8,r8,1347
     69c:	00803c04 	movi	r2,240
     6a0:	38800326 	beq	r7,r2,6b0 <displayColorImage+0x70>
			p = matrix[j*LCD_RES_X + i];
			pixel = (((uint16_t) p.red) << 11) | (((uint16_t) p.green) << 5) | (uint16_t) p.blue;
			vga_front_buffer[(j << 9) + i] = pixel;
		}
	}
}
     6a4:	400b883a 	mov	r5,r8
     6a8:	000d883a 	mov	r6,zero
     6ac:	003fe706 	br	64c <displayColorImage+0xc>
     6b0:	f800283a 	ret

000006b4 <displayColorImageFP>:

void displayColorImageFP(struct pixel *matrix){
     6b4:	2011883a 	mov	r8,r4
     6b8:	000f883a 	mov	r7,zero
     6bc:	00001606 	br	718 <displayColorImageFP+0x64>

	struct pixel p;
	short pixel;
	for(j = 0; j < VGA_RES_Y; j++){
		for(i = 0; i < VGA_RES_X; i++){
			p = matrix[(j<<9) + i];
     6c0:	3804927a 	slli	r2,r7,9
     6c4:	1185883a 	add	r2,r2,r6
     6c8:	108b883a 	add	r5,r2,r2
     6cc:	2885883a 	add	r2,r5,r2
     6d0:	1205883a 	add	r2,r2,r8
			pixel = (((uint16_t) p.red) << 11) | (((uint16_t) p.green) << 5) | (uint16_t) p.blue;
     6d4:	11000043 	ldbu	r4,1(r2)
     6d8:	2008917a 	slli	r4,r4,5
     6dc:	10c00003 	ldbu	r3,0(r2)
     6e0:	180692fa 	slli	r3,r3,11
     6e4:	10800083 	ldbu	r2,2(r2)
     6e8:	1886b03a 	or	r3,r3,r2
     6ec:	20c8b03a 	or	r4,r4,r3
			vga_front_buffer[(j << 9) + i] = pixel;
     6f0:	00820034 	movhi	r2,2048
     6f4:	288b883a 	add	r5,r5,r2
     6f8:	2900000d 	sth	r4,0(r5)
	volatile short *vga_front_buffer = (volatile short *)VGA_DEFAULT_FRONT_BUFF_BASE;

	struct pixel p;
	short pixel;
	for(j = 0; j < VGA_RES_Y; j++){
		for(i = 0; i < VGA_RES_X; i++){
     6fc:	00c00044 	movi	r3,1
     700:	30cd883a 	add	r6,r6,r3
     704:	00805004 	movi	r2,320
     708:	30bfed1e 	bne	r6,r2,6c0 <displayColorImageFP+0xc>

	volatile short *vga_front_buffer = (volatile short *)VGA_DEFAULT_FRONT_BUFF_BASE;

	struct pixel p;
	short pixel;
	for(j = 0; j < VGA_RES_Y; j++){
     70c:	38cf883a 	add	r7,r7,r3
     710:	00803c04 	movi	r2,240
     714:	38800226 	beq	r7,r2,720 <displayColorImageFP+0x6c>
			p = matrix[(j<<9) + i];
			pixel = (((uint16_t) p.red) << 11) | (((uint16_t) p.green) << 5) | (uint16_t) p.blue;
			vga_front_buffer[(j << 9) + i] = pixel;
		}
	}
}
     718:	000d883a 	mov	r6,zero
     71c:	003fe806 	br	6c0 <displayColorImageFP+0xc>
     720:	f800283a 	ret

00000724 <extractCornersFP>:
		}
	}
}

void extractCornersFP(char* mMatrixBinary, int* upperCorner,
					int* lowerCorner){
     724:	defffc04 	addi	sp,sp,-16
     728:	dfc00315 	stw	ra,12(sp)
     72c:	dc800215 	stw	r18,8(sp)
     730:	dc400115 	stw	r17,4(sp)
     734:	dc000015 	stw	r16,0(sp)
     738:	2021883a 	mov	r16,r4
     73c:	2823883a 	mov	r17,r5
     740:	3025883a 	mov	r18,r6
	printf("I\n");
     744:	01000074 	movhi	r4,1
     748:	213f8804 	addi	r4,r4,-480
     74c:	00061680 	call	6168 <puts>
	printf("extract corners\n");
     750:	01000074 	movhi	r4,1
     754:	213f8904 	addi	r4,r4,-476
     758:	00061680 	call	6168 <puts>
     75c:	01c003f4 	movhi	r7,15
     760:	39d09004 	addi	r7,r7,16960
     764:	023ffc74 	movhi	r8,65521
     768:	422f7004 	addi	r8,r8,-16960
     76c:	01800144 	movi	r6,5
     770:	00001906 	br	7d8 <extractCornersFP+0xb4>
	int i;
	for (j = 5; j < LCD_RES_Y - 5; j++) {
		//printf("%c\n", 'J' + j);
		//if (j%20 == 0) printf("extract corners %d\0", j);
		for (i = 5; i < LCD_RES_X - 5; i++) {
			if (mMatrixBinary[(j<<9) + i] && (i+j) < minSum) {
     774:	3004927a 	slli	r2,r6,9
     778:	10c5883a 	add	r2,r2,r3
     77c:	140b883a 	add	r5,r2,r16
     780:	28800007 	ldb	r2,0(r5)
     784:	10000d26 	beq	r2,zero,7bc <extractCornersFP+0x98>
     788:	30c9883a 	add	r4,r6,r3
     78c:	21c0070e 	bge	r4,r7,7ac <extractCornersFP+0x88>
				minSum = i+j;
				upperCorner[0] = j;
     790:	89800015 	stw	r6,0(r17)
				upperCorner[1] = i;
     794:	88c00115 	stw	r3,4(r17)
			}
			if (mMatrixBinary[(j<<9) + i] && (i+j) > maxSum) {
     798:	28800007 	ldb	r2,0(r5)
     79c:	1000021e 	bne	r2,zero,7a8 <extractCornersFP+0x84>
     7a0:	200f883a 	mov	r7,r4
     7a4:	00000506 	br	7bc <extractCornersFP+0x98>
     7a8:	200f883a 	mov	r7,r4
     7ac:	4100030e 	bge	r8,r4,7bc <extractCornersFP+0x98>
				maxSum = i+j;
				lowerCorner[0] = j;
     7b0:	91800015 	stw	r6,0(r18)
				lowerCorner[1] = i;
     7b4:	90c00115 	stw	r3,4(r18)
     7b8:	2011883a 	mov	r8,r4
	int j;
	int i;
	for (j = 5; j < LCD_RES_Y - 5; j++) {
		//printf("%c\n", 'J' + j);
		//if (j%20 == 0) printf("extract corners %d\0", j);
		for (i = 5; i < LCD_RES_X - 5; i++) {
     7bc:	01000044 	movi	r4,1
     7c0:	1907883a 	add	r3,r3,r4
     7c4:	00806f04 	movi	r2,444
     7c8:	18bfea1e 	bne	r3,r2,774 <extractCornersFP+0x50>

	int minSum = MAX_INT;
	int maxSum = MIN_INT;
	int j;
	int i;
	for (j = 5; j < LCD_RES_Y - 5; j++) {
     7cc:	310d883a 	add	r6,r6,r4
     7d0:	00805484 	movi	r2,338
     7d4:	30800226 	beq	r6,r2,7e0 <extractCornersFP+0xbc>
				lowerCorner[0] = j;
				lowerCorner[1] = i;
			}
		}
	}
}
     7d8:	00c00144 	movi	r3,5
     7dc:	003fe506 	br	774 <extractCornersFP+0x50>
     7e0:	dfc00317 	ldw	ra,12(sp)
     7e4:	dc800217 	ldw	r18,8(sp)
     7e8:	dc400117 	ldw	r17,4(sp)
     7ec:	dc000017 	ldw	r16,0(sp)
     7f0:	dec00404 	addi	sp,sp,16
     7f4:	f800283a 	ret

000007f8 <extractCorners>:
		}
	}
}

void extractCorners(int* mMatrixBinary, int* upperCorner,
					int* lowerCorner){
     7f8:	defffc04 	addi	sp,sp,-16
     7fc:	dfc00315 	stw	ra,12(sp)
     800:	dc800215 	stw	r18,8(sp)
     804:	dc400115 	stw	r17,4(sp)
     808:	dc000015 	stw	r16,0(sp)
     80c:	2021883a 	mov	r16,r4
     810:	2823883a 	mov	r17,r5
     814:	3025883a 	mov	r18,r6
	printf("I\n");
     818:	01000074 	movhi	r4,1
     81c:	213f8804 	addi	r4,r4,-480
     820:	00061680 	call	6168 <puts>
	printf("extract corners\n");
     824:	01000074 	movhi	r4,1
     828:	213f8904 	addi	r4,r4,-476
     82c:	00061680 	call	6168 <puts>
     830:	8408ca04 	addi	r16,r16,9000
     834:	01c003f4 	movhi	r7,15
     838:	39d09004 	addi	r7,r7,16960
     83c:	023ffc74 	movhi	r8,65521
     840:	422f7004 	addi	r8,r8,-16960
     844:	01800144 	movi	r6,5
     848:	00001806 	br	8ac <extractCorners+0xb4>
	for (j = 5; j < LCD_RES_Y - 5; j++) {
		//printf("%c\n", 'J' + j);
		//if (j%20 == 0) printf("extract corners %d\0", j);
		for (i = 5; i < LCD_RES_X - 5; i++) {
			int currIndex = j * LCD_RES_X + i;
			if (mMatrixBinary[currIndex] && (i+j) < minSum) {
     84c:	28800017 	ldw	r2,0(r5)
     850:	10000d26 	beq	r2,zero,888 <extractCorners+0x90>
     854:	1989883a 	add	r4,r3,r6
     858:	21c0070e 	bge	r4,r7,878 <extractCorners+0x80>
				minSum = i+j;
				upperCorner[0] = j;
     85c:	89800015 	stw	r6,0(r17)
				upperCorner[1] = i;
     860:	88c00115 	stw	r3,4(r17)
			}
			if (mMatrixBinary[currIndex] && (i+j) > maxSum) {
     864:	28800017 	ldw	r2,0(r5)
     868:	1000021e 	bne	r2,zero,874 <extractCorners+0x7c>
     86c:	200f883a 	mov	r7,r4
     870:	00000506 	br	888 <extractCorners+0x90>
     874:	200f883a 	mov	r7,r4
     878:	4100030e 	bge	r8,r4,888 <extractCorners+0x90>
				maxSum = i+j;
				lowerCorner[0] = j;
     87c:	91800015 	stw	r6,0(r18)
				lowerCorner[1] = i;
     880:	90c00115 	stw	r3,4(r18)
     884:	2011883a 	mov	r8,r4
	int j;
	int i;
	for (j = 5; j < LCD_RES_Y - 5; j++) {
		//printf("%c\n", 'J' + j);
		//if (j%20 == 0) printf("extract corners %d\0", j);
		for (i = 5; i < LCD_RES_X - 5; i++) {
     888:	01000044 	movi	r4,1
     88c:	1907883a 	add	r3,r3,r4
     890:	29400104 	addi	r5,r5,4
     894:	00806f04 	movi	r2,444
     898:	18bfec1e 	bne	r3,r2,84c <extractCorners+0x54>

	int minSum = MAX_INT;
	int maxSum = MIN_INT;
	int j;
	int i;
	for (j = 5; j < LCD_RES_Y - 5; j++) {
     89c:	310d883a 	add	r6,r6,r4
     8a0:	8401c104 	addi	r16,r16,1796
     8a4:	00805484 	movi	r2,338
     8a8:	30800326 	beq	r6,r2,8b8 <extractCorners+0xc0>
				lowerCorner[0] = j;
				lowerCorner[1] = i;
			}
		}
	}
}
     8ac:	800b883a 	mov	r5,r16
     8b0:	00c00144 	movi	r3,5
     8b4:	003fe506 	br	84c <extractCorners+0x54>
     8b8:	dfc00317 	ldw	ra,12(sp)
     8bc:	dc800217 	ldw	r18,8(sp)
     8c0:	dc400117 	ldw	r17,4(sp)
     8c4:	dc000017 	ldw	r16,0(sp)
     8c8:	dec00404 	addi	sp,sp,16
     8cc:	f800283a 	ret

000008d0 <computePixelScoresFP>:
	}
	return 0;
}

void computePixelScoresFP(short* gradientArrayX, short* gradientArrayY, 
						char* mMatrixBinary){
     8d0:	defff704 	addi	sp,sp,-36
     8d4:	dfc00815 	stw	ra,32(sp)
     8d8:	dd400715 	stw	r21,28(sp)
     8dc:	dd000615 	stw	r20,24(sp)
     8e0:	dcc00515 	stw	r19,20(sp)
     8e4:	dc800415 	stw	r18,16(sp)
     8e8:	dc400315 	stw	r17,12(sp)
     8ec:	dc000215 	stw	r16,8(sp)
     8f0:	2029883a 	mov	r20,r4
     8f4:	2827883a 	mov	r19,r5
     8f8:	302b883a 	mov	r21,r6
		printf("Compute pixel scores\n");
     8fc:	01000074 	movhi	r4,1
     900:	213f8d04 	addi	r4,r4,-460
     904:	00061680 	call	6168 <puts>
     908:	04800084 	movi	r18,2
     90c:	00003206 	br	9d8 <computePixelScoresFP+0x108>
			int mXY = 0;
			int k;
			int l;
			for (k = -1; k < 2; k++){
				for (l = -1; l < 2; l++){
					mX += ((int)gradientArrayX[((j+k) << 9) + (i+l)]) * ((int)gradientArrayX[((j+k) << 9) + (i+l)]);
     910:	2c47883a 	add	r3,r5,r17
     914:	9245883a 	add	r2,r18,r9
     918:	1004927a 	slli	r2,r2,9
     91c:	1887883a 	add	r3,r3,r2
     920:	18c7883a 	add	r3,r3,r3
     924:	1d05883a 	add	r2,r3,r20
     928:	1080000f 	ldh	r2,0(r2)
     92c:	1089383a 	mul	r4,r2,r2
     930:	390f883a 	add	r7,r7,r4
					mY += ((int)gradientArrayY[((j+k) << 9) + (i+l)]) * ((int)gradientArrayY[((j+k) << 9) + (i+l)]);
     934:	1cc7883a 	add	r3,r3,r19
     938:	18c0000f 	ldh	r3,0(r3)
     93c:	18c9383a 	mul	r4,r3,r3
     940:	4111883a 	add	r8,r8,r4
					temp = ((int)gradientArrayX[((j+k) << 9) + (i+l)]) * ((int)gradientArrayY[((j+k) << 9) + (i+l)]);
     944:	10c5383a 	mul	r2,r2,r3
					temp = (temp>>NUM_FRACTIONAL_BITS);
     948:	1005d1ba 	srai	r2,r2,6
					mXY += temp*temp;
     94c:	1085383a 	mul	r2,r2,r2
     950:	308d883a 	add	r6,r6,r2
			int mY = 0;
			int mXY = 0;
			int k;
			int l;
			for (k = -1; k < 2; k++){
				for (l = -1; l < 2; l++){
     954:	04000044 	movi	r16,1
     958:	2c0b883a 	add	r5,r5,r16
     95c:	00800084 	movi	r2,2
     960:	28bfeb1e 	bne	r5,r2,910 <computePixelScoresFP+0x40>
			int mX = 0;
			int mY = 0;
			int mXY = 0;
			int k;
			int l;
			for (k = -1; k < 2; k++){
     964:	4c13883a 	add	r9,r9,r16
     968:	4940141e 	bne	r9,r5,9bc <computePixelScoresFP+0xec>
					temp = (temp>>NUM_FRACTIONAL_BITS);
					mXY += temp*temp;
				}

			}
			mMatrix[0] = (short)(mX >> NUM_FRACTIONAL_BITS);
     96c:	3805d1ba 	srai	r2,r7,6
     970:	d880000d 	sth	r2,0(sp)
			mMatrix[1] = (short)(mXY >> NUM_FRACTIONAL_BITS);
     974:	3005d1ba 	srai	r2,r6,6
     978:	d880008d 	sth	r2,2(sp)
			mMatrix[2] = (short)(mXY >> NUM_FRACTIONAL_BITS);
     97c:	d880010d 	sth	r2,4(sp)
			mMatrix[3] = (short)(mY >> NUM_FRACTIONAL_BITS);
     980:	4005d1ba 	srai	r2,r8,6
     984:	d880018d 	sth	r2,6(sp)
			char binaryScore = computeScoresAndThresholdFP(mMatrix);
     988:	d809883a 	mov	r4,sp
     98c:	00004a80 	call	4a8 <computeScoresAndThresholdFP>
     990:	9006927a 	slli	r3,r18,9
     994:	1d47883a 	add	r3,r3,r21
     998:	1c47883a 	add	r3,r3,r17
     99c:	18800005 	stb	r2,0(r3)
	int j;
	int i;
	int temp;
	for (j = 2; j < LCD_RES_Y - 2; j++){
		//if (j%20 == 0) printf("pixel scores row %d\0", j);
		for (i = 2; i < LCD_RES_X - 2; i++){
     9a0:	8c23883a 	add	r17,r17,r16
     9a4:	00806fc4 	movi	r2,447
     9a8:	8880061e 	bne	r17,r2,9c4 <computePixelScoresFP+0xf4>
	short m3_max = 0;

	int j;
	int i;
	int temp;
	for (j = 2; j < LCD_RES_Y - 2; j++){
     9ac:	9425883a 	add	r18,r18,r16
     9b0:	00805544 	movi	r2,341
     9b4:	90800a26 	beq	r18,r2,9e0 <computePixelScoresFP+0x110>
     9b8:	00000706 	br	9d8 <computePixelScoresFP+0x108>
			mMatrix[3] = (short)(mY >> NUM_FRACTIONAL_BITS);
			char binaryScore = computeScoresAndThresholdFP(mMatrix);
			mMatrixBinary[(j<<9) + i] = binaryScore;
		}
	}
}
     9bc:	017fffc4 	movi	r5,-1
     9c0:	003fd306 	br	910 <computePixelScoresFP+0x40>
     9c4:	000f883a 	mov	r7,zero
     9c8:	0011883a 	mov	r8,zero
     9cc:	000d883a 	mov	r6,zero
     9d0:	027fffc4 	movi	r9,-1
     9d4:	003ff906 	br	9bc <computePixelScoresFP+0xec>
     9d8:	04400084 	movi	r17,2
     9dc:	003ff906 	br	9c4 <computePixelScoresFP+0xf4>
     9e0:	dfc00817 	ldw	ra,32(sp)
     9e4:	dd400717 	ldw	r21,28(sp)
     9e8:	dd000617 	ldw	r20,24(sp)
     9ec:	dcc00517 	ldw	r19,20(sp)
     9f0:	dc800417 	ldw	r18,16(sp)
     9f4:	dc400317 	ldw	r17,12(sp)
     9f8:	dc000217 	ldw	r16,8(sp)
     9fc:	dec00904 	addi	sp,sp,36
     a00:	f800283a 	ret

00000a04 <computePixelScores>:
// Function that performs 3 tasks:
// 1. Compute M matrix
// 2. Compute pixel scores (to be done in computeScoresAndThreshold)
// 3. Compute filtered scores (to be done in computeScoresAndThreshold)
void computePixelScores(double* gradientArrayX, double* gradientArrayY, 
						int* mMatrixBinary){
     a04:	deffdb04 	addi	sp,sp,-148
     a08:	dfc02415 	stw	ra,144(sp)
     a0c:	df002315 	stw	fp,140(sp)
     a10:	ddc02215 	stw	r23,136(sp)
     a14:	dd802115 	stw	r22,132(sp)
     a18:	dd402015 	stw	r21,128(sp)
     a1c:	dd001f15 	stw	r20,124(sp)
     a20:	dcc01e15 	stw	r19,120(sp)
     a24:	dc801d15 	stw	r18,116(sp)
     a28:	dc401c15 	stw	r17,112(sp)
     a2c:	dc001b15 	stw	r16,108(sp)
     a30:	2023883a 	mov	r17,r4
     a34:	2821883a 	mov	r16,r5
     a38:	3025883a 	mov	r18,r6
		printf("Compute pixel scores\n");
     a3c:	01000074 	movhi	r4,1
     a40:	213f8d04 	addi	r4,r4,-460
     a44:	00061680 	call	6168 <puts>
     a48:	00838404 	movi	r2,3600
     a4c:	80a1883a 	add	r16,r16,r2
     a50:	dc000a15 	stw	r16,40(sp)
     a54:	88a3883a 	add	r17,r17,r2
     a58:	dc400915 	stw	r17,36(sp)
     a5c:	90a5883a 	add	r18,r18,r2
     a60:	dc800815 	stw	r18,32(sp)
     a64:	00800084 	movi	r2,2
     a68:	d8801a15 	stw	r2,104(sp)
     a6c:	00009006 	br	cb0 <computePixelScores+0x2ac>
     a70:	d8c00b17 	ldw	r3,44(sp)
     a74:	d8c00f15 	stw	r3,60(sp)
     a78:	d8800c17 	ldw	r2,48(sp)
     a7c:	d8800e15 	stw	r2,56(sp)
     a80:	0007883a 	mov	r3,zero
     a84:	d8c01715 	stw	r3,92(sp)
     a88:	d8c01815 	stw	r3,96(sp)
     a8c:	d8c01515 	stw	r3,84(sp)
     a90:	d8c01615 	stw	r3,88(sp)
     a94:	d8c01315 	stw	r3,76(sp)
     a98:	d8c01415 	stw	r3,80(sp)
     a9c:	00bfffc4 	movi	r2,-1
     aa0:	d8801215 	stw	r2,72(sp)
     aa4:	00007c06 	br	c98 <computePixelScores+0x294>
			double mXY = 0;
			int k;
			int l;
			for (k = -1; k < 2; k++){
				for (l = -1; l < 2; l++){
					mX += gradientArrayX[currIndex + k*LCD_RES_X + l] * gradientArrayX[currIndex + k*LCD_RES_X + l];
     aa8:	d8c01017 	ldw	r3,64(sp)
     aac:	1c800017 	ldw	r18,0(r3)
     ab0:	1cc00117 	ldw	r19,4(r3)
     ab4:	9009883a 	mov	r4,r18
     ab8:	980b883a 	mov	r5,r19
     abc:	900d883a 	mov	r6,r18
     ac0:	980f883a 	mov	r7,r19
     ac4:	0002e0c0 	call	2e0c <__muldf3>
     ac8:	d9001717 	ldw	r4,92(sp)
     acc:	d9401817 	ldw	r5,96(sp)
     ad0:	100d883a 	mov	r6,r2
     ad4:	180f883a 	mov	r7,r3
     ad8:	0002d980 	call	2d98 <__adddf3>
     adc:	182f883a 	mov	r23,r3
     ae0:	d8801715 	stw	r2,92(sp)
     ae4:	d8c01815 	stw	r3,96(sp)
					mY += gradientArrayY[currIndex + k*LCD_RES_X + l] * gradientArrayY[currIndex + k*LCD_RES_X + l];
     ae8:	e4000017 	ldw	r16,0(fp)
     aec:	e4400117 	ldw	r17,4(fp)
     af0:	8009883a 	mov	r4,r16
     af4:	880b883a 	mov	r5,r17
     af8:	800d883a 	mov	r6,r16
     afc:	880f883a 	mov	r7,r17
     b00:	0002e0c0 	call	2e0c <__muldf3>
     b04:	d9001517 	ldw	r4,84(sp)
     b08:	d9401617 	ldw	r5,88(sp)
     b0c:	100d883a 	mov	r6,r2
     b10:	180f883a 	mov	r7,r3
     b14:	0002d980 	call	2d98 <__adddf3>
     b18:	182b883a 	mov	r21,r3
     b1c:	d8801515 	stw	r2,84(sp)
     b20:	d8c01615 	stw	r3,88(sp)
					mXY += gradientArrayX[currIndex + k*LCD_RES_X + l] * gradientArrayY[currIndex + k*LCD_RES_X + l] * gradientArrayX[currIndex + k*LCD_RES_X + l] * gradientArrayY[currIndex + k*LCD_RES_X + l];
     b24:	9009883a 	mov	r4,r18
     b28:	980b883a 	mov	r5,r19
     b2c:	800d883a 	mov	r6,r16
     b30:	880f883a 	mov	r7,r17
     b34:	0002e0c0 	call	2e0c <__muldf3>
     b38:	9009883a 	mov	r4,r18
     b3c:	980b883a 	mov	r5,r19
     b40:	100d883a 	mov	r6,r2
     b44:	180f883a 	mov	r7,r3
     b48:	0002e0c0 	call	2e0c <__muldf3>
     b4c:	8009883a 	mov	r4,r16
     b50:	880b883a 	mov	r5,r17
     b54:	100d883a 	mov	r6,r2
     b58:	180f883a 	mov	r7,r3
     b5c:	0002e0c0 	call	2e0c <__muldf3>
     b60:	d9001317 	ldw	r4,76(sp)
     b64:	d9401417 	ldw	r5,80(sp)
     b68:	100d883a 	mov	r6,r2
     b6c:	180f883a 	mov	r7,r3
     b70:	0002d980 	call	2d98 <__adddf3>
     b74:	1009883a 	mov	r4,r2
     b78:	180b883a 	mov	r5,r3
     b7c:	d8801315 	stw	r2,76(sp)
     b80:	d8c01415 	stw	r3,80(sp)
			double mY = 0;
			double mXY = 0;
			int k;
			int l;
			for (k = -1; k < 2; k++){
				for (l = -1; l < 2; l++){
     b84:	04400044 	movi	r17,1
     b88:	d8801117 	ldw	r2,68(sp)
     b8c:	1445883a 	add	r2,r2,r17
     b90:	d8801115 	stw	r2,68(sp)
     b94:	04000204 	movi	r16,8
     b98:	d8c01017 	ldw	r3,64(sp)
     b9c:	1c07883a 	add	r3,r3,r16
     ba0:	d8c01015 	stw	r3,64(sp)
     ba4:	e439883a 	add	fp,fp,r16
     ba8:	00800084 	movi	r2,2
     bac:	d8c01117 	ldw	r3,68(sp)
     bb0:	18bfbd1e 	bne	r3,r2,aa8 <computePixelScores+0xa4>
			double mX = 0;
			double mY = 0;
			double mXY = 0;
			int k;
			int l;
			for (k = -1; k < 2; k++){
     bb4:	d8801217 	ldw	r2,72(sp)
     bb8:	1445883a 	add	r2,r2,r17
     bbc:	d8801215 	stw	r2,72(sp)
     bc0:	04838204 	movi	r18,3592
     bc4:	d8c00f17 	ldw	r3,60(sp)
     bc8:	1c87883a 	add	r3,r3,r18
     bcc:	d8c00f15 	stw	r3,60(sp)
     bd0:	d8800e17 	ldw	r2,56(sp)
     bd4:	1485883a 	add	r2,r2,r18
     bd8:	d8800e15 	stw	r2,56(sp)
     bdc:	d8c01217 	ldw	r3,72(sp)
     be0:	d8801117 	ldw	r2,68(sp)
     be4:	18802c1e 	bne	r3,r2,c98 <computePixelScores+0x294>
					mX += gradientArrayX[currIndex + k*LCD_RES_X + l] * gradientArrayX[currIndex + k*LCD_RES_X + l];
					mY += gradientArrayY[currIndex + k*LCD_RES_X + l] * gradientArrayY[currIndex + k*LCD_RES_X + l];
					mXY += gradientArrayX[currIndex + k*LCD_RES_X + l] * gradientArrayY[currIndex + k*LCD_RES_X + l] * gradientArrayX[currIndex + k*LCD_RES_X + l] * gradientArrayY[currIndex + k*LCD_RES_X + l];
				}
			}
			mMatrix[0] = mX;
     be8:	d8c01717 	ldw	r3,92(sp)
     bec:	d8c00015 	stw	r3,0(sp)
     bf0:	ddc00115 	stw	r23,4(sp)
			mMatrix[1] = mXY;
     bf4:	d9000215 	stw	r4,8(sp)
     bf8:	d9400315 	stw	r5,12(sp)
			mMatrix[2] = mXY;
     bfc:	d9000415 	stw	r4,16(sp)
     c00:	d9400515 	stw	r5,20(sp)
			mMatrix[3] = mY;
     c04:	d8801517 	ldw	r2,84(sp)
     c08:	d8800615 	stw	r2,24(sp)
     c0c:	dd400715 	stw	r21,28(sp)
			int binaryScore = computeScoresAndThreshold(mMatrix);
     c10:	d809883a 	mov	r4,sp
     c14:	00003800 	call	380 <computeScoresAndThreshold>
     c18:	d8c00d17 	ldw	r3,52(sp)
     c1c:	18800015 	stw	r2,0(r3)

	int j;
	int i;
	for (j = 2; j < LCD_RES_Y - 2; j++){
		//if (j%20 == 0) printf("pixel scores row %d\0", j);
		for (i = 2; i < LCD_RES_X - 2; i++){
     c20:	d8801917 	ldw	r2,100(sp)
     c24:	1445883a 	add	r2,r2,r17
     c28:	d8801915 	stw	r2,100(sp)
     c2c:	18c00104 	addi	r3,r3,4
     c30:	d8c00d15 	stw	r3,52(sp)
     c34:	d8c00c17 	ldw	r3,48(sp)
     c38:	1c07883a 	add	r3,r3,r16
     c3c:	d8c00c15 	stw	r3,48(sp)
     c40:	d8800b17 	ldw	r2,44(sp)
     c44:	1405883a 	add	r2,r2,r16
     c48:	d8800b15 	stw	r2,44(sp)
     c4c:	00806fc4 	movi	r2,447
     c50:	d8c01917 	ldw	r3,100(sp)
     c54:	18bf861e 	bne	r3,r2,a70 <computePixelScores+0x6c>
						int* mMatrixBinary){
		printf("Compute pixel scores\n");

	int j;
	int i;
	for (j = 2; j < LCD_RES_Y - 2; j++){
     c58:	d8801a17 	ldw	r2,104(sp)
     c5c:	1445883a 	add	r2,r2,r17
     c60:	d8801a15 	stw	r2,104(sp)
     c64:	d8c00a17 	ldw	r3,40(sp)
     c68:	1c87883a 	add	r3,r3,r18
     c6c:	d8c00a15 	stw	r3,40(sp)
     c70:	d8800917 	ldw	r2,36(sp)
     c74:	1485883a 	add	r2,r2,r18
     c78:	d8800915 	stw	r2,36(sp)
     c7c:	d8c00817 	ldw	r3,32(sp)
     c80:	18c1c104 	addi	r3,r3,1796
     c84:	d8c00815 	stw	r3,32(sp)
     c88:	00805544 	movi	r2,341
     c8c:	d8c01a17 	ldw	r3,104(sp)
     c90:	18801026 	beq	r3,r2,cd4 <computePixelScores+0x2d0>
     c94:	00000606 	br	cb0 <computePixelScores+0x2ac>
			mMatrix[3] = mY;
			int binaryScore = computeScoresAndThreshold(mMatrix);
			mMatrixBinary[currIndex] = binaryScore;
		}
	}
}
     c98:	d8800e17 	ldw	r2,56(sp)
     c9c:	d8801015 	stw	r2,64(sp)
     ca0:	df000f17 	ldw	fp,60(sp)
     ca4:	00ffffc4 	movi	r3,-1
     ca8:	d8c01115 	stw	r3,68(sp)
     cac:	003f7e06 	br	aa8 <computePixelScores+0xa4>
     cb0:	d8800817 	ldw	r2,32(sp)
     cb4:	d8800d15 	stw	r2,52(sp)
     cb8:	d8c00917 	ldw	r3,36(sp)
     cbc:	d8c00c15 	stw	r3,48(sp)
     cc0:	d8800a17 	ldw	r2,40(sp)
     cc4:	d8800b15 	stw	r2,44(sp)
     cc8:	00c00084 	movi	r3,2
     ccc:	d8c01915 	stw	r3,100(sp)
     cd0:	003f6706 	br	a70 <computePixelScores+0x6c>
     cd4:	dfc02417 	ldw	ra,144(sp)
     cd8:	df002317 	ldw	fp,140(sp)
     cdc:	ddc02217 	ldw	r23,136(sp)
     ce0:	dd802117 	ldw	r22,132(sp)
     ce4:	dd402017 	ldw	r21,128(sp)
     ce8:	dd001f17 	ldw	r20,124(sp)
     cec:	dcc01e17 	ldw	r19,120(sp)
     cf0:	dc801d17 	ldw	r18,116(sp)
     cf4:	dc401c17 	ldw	r17,112(sp)
     cf8:	dc001b17 	ldw	r16,108(sp)
     cfc:	dec02504 	addi	sp,sp,148
     d00:	f800283a 	ret

00000d04 <convolutionFnFP>:
			sobelArray[6]*bwImage[(j-2)*LCD_RES_X + i] + sobelArray[7]*bwImage[(j-2)*LCD_RES_X + i-1] + sobelArray[8]*bwImage[(j-2)*LCD_RES_X + i-2];
		}
	}
}

void convolutionFnFP(short* bwImage, int* sobelArray, short* gradientArray){
     d04:	defffc04 	addi	sp,sp,-16
     d08:	dfc00315 	stw	ra,12(sp)
     d0c:	dc800215 	stw	r18,8(sp)
     d10:	dc400115 	stw	r17,4(sp)
     d14:	dc000015 	stw	r16,0(sp)
     d18:	2023883a 	mov	r17,r4
     d1c:	2821883a 	mov	r16,r5
     d20:	3025883a 	mov	r18,r6
	printf("convolution\n");
     d24:	01000074 	movhi	r4,1
     d28:	213f9304 	addi	r4,r4,-436
     d2c:	00061680 	call	6168 <puts>
     d30:	02c00084 	movi	r11,2
     d34:	00003b06 	br	e24 <convolutionFnFP+0x120>
		//if (j%20 == 0) printf("convolution row %d\0", j);
		for(i = 2; i < LCD_RES_X; i++){
			// printf("bwConversion col %d", i);
			int temp = sobelArray[0]*bwImage[(j<<9) + i] + sobelArray[1]*bwImage[(j<<9) + i-1] + sobelArray[2]*bwImage[(j<<9) + i-2] + 
			sobelArray[3]*bwImage[((j-1)<<9) + i] + sobelArray[4]*bwImage[((j-1)<<9) + i-1] + sobelArray[5]*bwImage[((j-1)<<9) + i-2] + 
			sobelArray[6]*bwImage[((j-2)<<9) + i] + sobelArray[7]*bwImage[((j-2)<<9) + i-1] + sobelArray[8]*bwImage[((j-2)<<9) + i-2];
     d38:	5810927a 	slli	r8,r11,9
     d3c:	4291883a 	add	r8,r8,r10
     d40:	4211883a 	add	r8,r8,r8
     d44:	8a13883a 	add	r9,r17,r8
     d48:	59ffffc4 	addi	r7,r11,-1
     d4c:	380e927a 	slli	r7,r7,9
     d50:	3a8f883a 	add	r7,r7,r10
     d54:	39cf883a 	add	r7,r7,r7
     d58:	89cf883a 	add	r7,r17,r7
     d5c:	59bfff84 	addi	r6,r11,-2
     d60:	300c927a 	slli	r6,r6,9
     d64:	518d883a 	add	r6,r10,r6
     d68:	318d883a 	add	r6,r6,r6
     d6c:	898d883a 	add	r6,r17,r6
			
			gradientArray[(j<<9) + i] = (short)(temp >> NUM_FRACTIONAL_BITS);
     d70:	4491883a 	add	r8,r8,r18
     d74:	4940000f 	ldh	r5,0(r9)
     d78:	80800017 	ldw	r2,0(r16)
     d7c:	288b383a 	mul	r5,r5,r2
     d80:	48bfff8f 	ldh	r2,-2(r9)
     d84:	80c00117 	ldw	r3,4(r16)
     d88:	10c5383a 	mul	r2,r2,r3
     d8c:	288b883a 	add	r5,r5,r2
     d90:	3900000f 	ldh	r4,0(r7)
     d94:	80800317 	ldw	r2,12(r16)
     d98:	2089383a 	mul	r4,r4,r2
     d9c:	48bfff0f 	ldh	r2,-4(r9)
     da0:	80c00217 	ldw	r3,8(r16)
     da4:	10c5383a 	mul	r2,r2,r3
     da8:	2089883a 	add	r4,r4,r2
     dac:	290b883a 	add	r5,r5,r4
     db0:	313fff8f 	ldh	r4,-2(r6)
     db4:	80800717 	ldw	r2,28(r16)
     db8:	2089383a 	mul	r4,r4,r2
     dbc:	3080000f 	ldh	r2,0(r6)
     dc0:	80c00617 	ldw	r3,24(r16)
     dc4:	10c5383a 	mul	r2,r2,r3
     dc8:	2089883a 	add	r4,r4,r2
     dcc:	290b883a 	add	r5,r5,r4
     dd0:	38ffff0f 	ldh	r3,-4(r7)
     dd4:	80800517 	ldw	r2,20(r16)
     dd8:	1887383a 	mul	r3,r3,r2
     ddc:	38bfff8f 	ldh	r2,-2(r7)
     de0:	81000417 	ldw	r4,16(r16)
     de4:	1105383a 	mul	r2,r2,r4
     de8:	1887883a 	add	r3,r3,r2
     dec:	30bfff0f 	ldh	r2,-4(r6)
     df0:	81000817 	ldw	r4,32(r16)
     df4:	1105383a 	mul	r2,r2,r4
     df8:	1887883a 	add	r3,r3,r2
     dfc:	28cb883a 	add	r5,r5,r3
     e00:	280bd1ba 	srai	r5,r5,6
     e04:	4140000d 	sth	r5,0(r8)
	printf("convolution\n");
	int j;
	int i;
	for(j = 2; j < LCD_RES_Y; j++){
		//if (j%20 == 0) printf("convolution row %d\0", j);
		for(i = 2; i < LCD_RES_X; i++){
     e08:	00c00044 	movi	r3,1
     e0c:	50d5883a 	add	r10,r10,r3
     e10:	00807044 	movi	r2,449
     e14:	50bfc81e 	bne	r10,r2,d38 <convolutionFnFP+0x34>

void convolutionFnFP(short* bwImage, int* sobelArray, short* gradientArray){
	printf("convolution\n");
	int j;
	int i;
	for(j = 2; j < LCD_RES_Y; j++){
     e18:	58d7883a 	add	r11,r11,r3
     e1c:	008055c4 	movi	r2,343
     e20:	58800226 	beq	r11,r2,e2c <convolutionFnFP+0x128>
			sobelArray[6]*bwImage[((j-2)<<9) + i] + sobelArray[7]*bwImage[((j-2)<<9) + i-1] + sobelArray[8]*bwImage[((j-2)<<9) + i-2];
			
			gradientArray[(j<<9) + i] = (short)(temp >> NUM_FRACTIONAL_BITS);
		}
	}
}
     e24:	02800084 	movi	r10,2
     e28:	003fc306 	br	d38 <convolutionFnFP+0x34>
     e2c:	dfc00317 	ldw	ra,12(sp)
     e30:	dc800217 	ldw	r18,8(sp)
     e34:	dc400117 	ldw	r17,4(sp)
     e38:	dc000017 	ldw	r16,0(sp)
     e3c:	dec00404 	addi	sp,sp,16
     e40:	f800283a 	ret

00000e44 <convolutionFn>:
		}
	}
}

// Function that computes the gradient matrix
void convolutionFn(double* bwImage, int* sobelArray, double* gradientArray){
     e44:	defff604 	addi	sp,sp,-40
     e48:	dfc00915 	stw	ra,36(sp)
     e4c:	df000815 	stw	fp,32(sp)
     e50:	ddc00715 	stw	r23,28(sp)
     e54:	dd800615 	stw	r22,24(sp)
     e58:	dd400515 	stw	r21,20(sp)
     e5c:	dd000415 	stw	r20,16(sp)
     e60:	dcc00315 	stw	r19,12(sp)
     e64:	dc800215 	stw	r18,8(sp)
     e68:	dc400115 	stw	r17,4(sp)
     e6c:	dc000015 	stw	r16,0(sp)
     e70:	2023883a 	mov	r17,r4
     e74:	2827883a 	mov	r19,r5
     e78:	3021883a 	mov	r16,r6
	printf("convolution\n");
     e7c:	01000074 	movhi	r4,1
     e80:	213f9304 	addi	r4,r4,-436
     e84:	00061680 	call	6168 <puts>
     e88:	00870804 	movi	r2,7200
     e8c:	80af883a 	add	r23,r16,r2
     e90:	88ad883a 	add	r22,r17,r2
     e94:	07000084 	movi	fp,2
     e98:	00008606 	br	10b4 <convolutionFn+0x270>
	int i;
	for(j = 2; j < LCD_RES_Y; j++){
		//if (j%20 == 0) printf("convolution row %d\0", j);
		for(i = 2; i < LCD_RES_X; i++){
			// printf("bwConversion col %d", i);
			gradientArray[j*LCD_RES_X + i] = sobelArray[0]*bwImage[j*LCD_RES_X + i] + sobelArray[1]*bwImage[j*LCD_RES_X + i-1] + sobelArray[2]*bwImage[j*LCD_RES_X + i-2] + 
     e9c:	99000017 	ldw	r4,0(r19)
     ea0:	00035380 	call	3538 <__floatsidf>
     ea4:	1009883a 	mov	r4,r2
     ea8:	180b883a 	mov	r5,r3
     eac:	91800017 	ldw	r6,0(r18)
     eb0:	91c00117 	ldw	r7,4(r18)
     eb4:	0002e0c0 	call	2e0c <__muldf3>
     eb8:	1021883a 	mov	r16,r2
     ebc:	1823883a 	mov	r17,r3
     ec0:	99000117 	ldw	r4,4(r19)
     ec4:	00035380 	call	3538 <__floatsidf>
     ec8:	1009883a 	mov	r4,r2
     ecc:	180b883a 	mov	r5,r3
     ed0:	91bffe17 	ldw	r6,-8(r18)
     ed4:	91ffff17 	ldw	r7,-4(r18)
     ed8:	0002e0c0 	call	2e0c <__muldf3>
     edc:	8009883a 	mov	r4,r16
     ee0:	880b883a 	mov	r5,r17
     ee4:	100d883a 	mov	r6,r2
     ee8:	180f883a 	mov	r7,r3
     eec:	0002d980 	call	2d98 <__adddf3>
     ef0:	1021883a 	mov	r16,r2
     ef4:	1823883a 	mov	r17,r3
     ef8:	99000217 	ldw	r4,8(r19)
     efc:	00035380 	call	3538 <__floatsidf>
     f00:	1009883a 	mov	r4,r2
     f04:	180b883a 	mov	r5,r3
     f08:	91bffc17 	ldw	r6,-16(r18)
     f0c:	91fffd17 	ldw	r7,-12(r18)
     f10:	0002e0c0 	call	2e0c <__muldf3>
     f14:	8009883a 	mov	r4,r16
     f18:	880b883a 	mov	r5,r17
     f1c:	100d883a 	mov	r6,r2
     f20:	180f883a 	mov	r7,r3
     f24:	0002d980 	call	2d98 <__adddf3>
     f28:	1021883a 	mov	r16,r2
     f2c:	1823883a 	mov	r17,r3
     f30:	99000317 	ldw	r4,12(r19)
     f34:	00035380 	call	3538 <__floatsidf>
     f38:	1009883a 	mov	r4,r2
     f3c:	180b883a 	mov	r5,r3
     f40:	91bc7e17 	ldw	r6,-3592(r18)
     f44:	91fc7f17 	ldw	r7,-3588(r18)
     f48:	0002e0c0 	call	2e0c <__muldf3>
     f4c:	8009883a 	mov	r4,r16
     f50:	880b883a 	mov	r5,r17
     f54:	100d883a 	mov	r6,r2
     f58:	180f883a 	mov	r7,r3
     f5c:	0002d980 	call	2d98 <__adddf3>
     f60:	1021883a 	mov	r16,r2
     f64:	1823883a 	mov	r17,r3
     f68:	99000417 	ldw	r4,16(r19)
     f6c:	00035380 	call	3538 <__floatsidf>
     f70:	1009883a 	mov	r4,r2
     f74:	180b883a 	mov	r5,r3
     f78:	91bc7c17 	ldw	r6,-3600(r18)
     f7c:	91fc7d17 	ldw	r7,-3596(r18)
     f80:	0002e0c0 	call	2e0c <__muldf3>
     f84:	8009883a 	mov	r4,r16
     f88:	880b883a 	mov	r5,r17
     f8c:	100d883a 	mov	r6,r2
     f90:	180f883a 	mov	r7,r3
     f94:	0002d980 	call	2d98 <__adddf3>
     f98:	1021883a 	mov	r16,r2
     f9c:	1823883a 	mov	r17,r3
     fa0:	99000517 	ldw	r4,20(r19)
     fa4:	00035380 	call	3538 <__floatsidf>
     fa8:	1009883a 	mov	r4,r2
     fac:	180b883a 	mov	r5,r3
     fb0:	91bc7a17 	ldw	r6,-3608(r18)
     fb4:	91fc7b17 	ldw	r7,-3604(r18)
     fb8:	0002e0c0 	call	2e0c <__muldf3>
     fbc:	8009883a 	mov	r4,r16
     fc0:	880b883a 	mov	r5,r17
     fc4:	100d883a 	mov	r6,r2
     fc8:	180f883a 	mov	r7,r3
     fcc:	0002d980 	call	2d98 <__adddf3>
     fd0:	1021883a 	mov	r16,r2
     fd4:	1823883a 	mov	r17,r3
     fd8:	99000617 	ldw	r4,24(r19)
     fdc:	00035380 	call	3538 <__floatsidf>
     fe0:	1009883a 	mov	r4,r2
     fe4:	180b883a 	mov	r5,r3
     fe8:	91b8fc17 	ldw	r6,-7184(r18)
     fec:	91f8fd17 	ldw	r7,-7180(r18)
     ff0:	0002e0c0 	call	2e0c <__muldf3>
     ff4:	8009883a 	mov	r4,r16
     ff8:	880b883a 	mov	r5,r17
     ffc:	100d883a 	mov	r6,r2
    1000:	180f883a 	mov	r7,r3
    1004:	0002d980 	call	2d98 <__adddf3>
    1008:	1021883a 	mov	r16,r2
    100c:	1823883a 	mov	r17,r3
    1010:	99000717 	ldw	r4,28(r19)
    1014:	00035380 	call	3538 <__floatsidf>
    1018:	1009883a 	mov	r4,r2
    101c:	180b883a 	mov	r5,r3
    1020:	91b8fa17 	ldw	r6,-7192(r18)
    1024:	91f8fb17 	ldw	r7,-7188(r18)
    1028:	0002e0c0 	call	2e0c <__muldf3>
    102c:	8009883a 	mov	r4,r16
    1030:	880b883a 	mov	r5,r17
    1034:	100d883a 	mov	r6,r2
    1038:	180f883a 	mov	r7,r3
    103c:	0002d980 	call	2d98 <__adddf3>
    1040:	1021883a 	mov	r16,r2
    1044:	1823883a 	mov	r17,r3
    1048:	99000817 	ldw	r4,32(r19)
    104c:	00035380 	call	3538 <__floatsidf>
    1050:	1009883a 	mov	r4,r2
    1054:	180b883a 	mov	r5,r3
    1058:	91b8f817 	ldw	r6,-7200(r18)
    105c:	91f8f917 	ldw	r7,-7196(r18)
    1060:	0002e0c0 	call	2e0c <__muldf3>
    1064:	8009883a 	mov	r4,r16
    1068:	880b883a 	mov	r5,r17
    106c:	100d883a 	mov	r6,r2
    1070:	180f883a 	mov	r7,r3
    1074:	0002d980 	call	2d98 <__adddf3>
    1078:	a0800015 	stw	r2,0(r20)
    107c:	a0c00115 	stw	r3,4(r20)
	printf("convolution\n");
	int j;
	int i;
	for(j = 2; j < LCD_RES_Y; j++){
		//if (j%20 == 0) printf("convolution row %d\0", j);
		for(i = 2; i < LCD_RES_X; i++){
    1080:	00c00044 	movi	r3,1
    1084:	a8eb883a 	add	r21,r21,r3
    1088:	00800204 	movi	r2,8
    108c:	90a5883a 	add	r18,r18,r2
    1090:	a0a9883a 	add	r20,r20,r2
    1094:	00807044 	movi	r2,449
    1098:	a8bf801e 	bne	r21,r2,e9c <convolutionFn+0x58>
// Function that computes the gradient matrix
void convolutionFn(double* bwImage, int* sobelArray, double* gradientArray){
	printf("convolution\n");
	int j;
	int i;
	for(j = 2; j < LCD_RES_Y; j++){
    109c:	e0f9883a 	add	fp,fp,r3
    10a0:	00838204 	movi	r2,3592
    10a4:	b8af883a 	add	r23,r23,r2
    10a8:	b0ad883a 	add	r22,r22,r2
    10ac:	008055c4 	movi	r2,343
    10b0:	e0800426 	beq	fp,r2,10c4 <convolutionFn+0x280>
			gradientArray[j*LCD_RES_X + i] = sobelArray[0]*bwImage[j*LCD_RES_X + i] + sobelArray[1]*bwImage[j*LCD_RES_X + i-1] + sobelArray[2]*bwImage[j*LCD_RES_X + i-2] + 
			sobelArray[3]*bwImage[(j-1)*LCD_RES_X + i] + sobelArray[4]*bwImage[(j-1)*LCD_RES_X + i-1] + sobelArray[5]*bwImage[(j-1)*LCD_RES_X + i-2] + 
			sobelArray[6]*bwImage[(j-2)*LCD_RES_X + i] + sobelArray[7]*bwImage[(j-2)*LCD_RES_X + i-1] + sobelArray[8]*bwImage[(j-2)*LCD_RES_X + i-2];
		}
	}
}
    10b4:	b025883a 	mov	r18,r22
    10b8:	b829883a 	mov	r20,r23
    10bc:	05400084 	movi	r21,2
    10c0:	003f7606 	br	e9c <convolutionFn+0x58>
    10c4:	dfc00917 	ldw	ra,36(sp)
    10c8:	df000817 	ldw	fp,32(sp)
    10cc:	ddc00717 	ldw	r23,28(sp)
    10d0:	dd800617 	ldw	r22,24(sp)
    10d4:	dd400517 	ldw	r21,20(sp)
    10d8:	dd000417 	ldw	r20,16(sp)
    10dc:	dcc00317 	ldw	r19,12(sp)
    10e0:	dc800217 	ldw	r18,8(sp)
    10e4:	dc400117 	ldw	r17,4(sp)
    10e8:	dc000017 	ldw	r16,0(sp)
    10ec:	dec00a04 	addi	sp,sp,40
    10f0:	f800283a 	ret

000010f4 <setupHardware>:
	}
	pushbuttons_clear_edge_capture();
}

// Setting up and interfacing with the hardware
void setupHardware() {
    10f4:	defffd04 	addi	sp,sp,-12
    10f8:	dfc00215 	stw	ra,8(sp)
    10fc:	dc000115 	stw	r16,4(sp)
	camera_enable_dma(1);
    1100:	04000044 	movi	r16,1
    1104:	8009883a 	mov	r4,r16
    1108:	00020580 	call	2058 <camera_enable_dma>
	lcd_enable_dma(1);
    110c:	8009883a 	mov	r4,r16
    1110:	00021300 	call	2130 <lcd_enable_dma>
	//lcd_draw_rectangle(0, 0, LCD_RES_X, LCD_RES_Y, GREEN);
	pushbuttons_enable_interrupts(pushbuttons_isr);
    1114:	01000034 	movhi	r4,0
    1118:	2104a104 	addi	r4,r4,4740
    111c:	00022800 	call	2280 <pushbuttons_enable_interrupts>

	vga_enable_dma(1);
    1120:	8009883a 	mov	r4,r16
    1124:	00022b80 	call	22b8 <vga_enable_dma>
	vga_draw_rectangle(0, 0, LCD_RES_X, LCD_RES_Y, BLACK);
    1128:	d8000015 	stw	zero,0(sp)
    112c:	0009883a 	mov	r4,zero
    1130:	000b883a 	mov	r5,zero
    1134:	01807044 	movi	r6,449
    1138:	01c055c4 	movi	r7,343
    113c:	00023680 	call	2368 <vga_draw_rectangle>
}
    1140:	dfc00217 	ldw	ra,8(sp)
    1144:	dc000117 	ldw	r16,4(sp)
    1148:	dec00304 	addi	sp,sp,12
    114c:	f800283a 	ret

00001150 <captureImageDataFP>:
    imageCaptured = 1;
    printf("D\n");

}

void captureImageDataFP() {
    1150:	defff804 	addi	sp,sp,-32
    1154:	dfc00715 	stw	ra,28(sp)
    1158:	dd000615 	stw	r20,24(sp)
    115c:	dcc00515 	stw	r19,20(sp)
    1160:	dc800415 	stw	r18,16(sp)
    1164:	dc400315 	stw	r17,12(sp)
    1168:	dc000215 	stw	r16,8(sp)
	int rowNum = 0;
	int yOffset = 9;

	printf("C\n");
    116c:	01000074 	movhi	r4,1
    1170:	213f9604 	addi	r4,r4,-424
    1174:	00061680 	call	6168 <puts>
    1178:	0027883a 	mov	r19,zero
    117c:	05000374 	movhi	r20,13
    1180:	a5110004 	addi	r20,r20,17408
    1184:	04803fc4 	movi	r18,255

    for (rowNum; rowNum < LCD_RES_Y; rowNum++){
        memcpy(pixelData, 
    1188:	9822927a 	slli	r17,r19,9
    118c:	8c61883a 	add	r16,r17,r17
    1190:	a009883a 	mov	r4,r20
    1194:	d1600017 	ldw	r5,-32768(gp)
    1198:	814b883a 	add	r5,r16,r5
    119c:	0180e084 	movi	r6,898
    11a0:	0005cb40 	call	5cb4 <memcpy>
    11a4:	8461883a 	add	r16,r16,r17
    11a8:	00800074 	movhi	r2,1
    11ac:	10910004 	addi	r2,r2,17408
    11b0:	80a1883a 	add	r16,r16,r2
    11b4:	a023883a 	mov	r17,r20
        	  (volatile short *)imagePtr + (rowNum << yOffset), 
        	   NUM_BYTES_PER_PIXEL * LCD_RES_X);
        int index;
        for (index = 0; index < LCD_RES_X; index++){
        	short currRawData = pixelData[index];
        	struct pixel p = shortToPixel(currRawData);
    11b8:	8900000f 	ldh	r4,0(r17)
    11bc:	00002940 	call	294 <shortToPixel>
    11c0:	148a703a 	and	r5,r2,r18
    11c4:	1008d23a 	srli	r4,r2,8
    11c8:	2488703a 	and	r4,r4,r18
    11cc:	2008923a 	slli	r4,r4,8
    11d0:	d8c00117 	ldw	r3,4(sp)
    11d4:	18ffffec 	andhi	r3,r3,65535
    11d8:	1946b03a 	or	r3,r3,r5
    11dc:	1906b03a 	or	r3,r3,r4
    11e0:	1004d43a 	srli	r2,r2,16
    11e4:	1484703a 	and	r2,r2,r18
    11e8:	1004943a 	slli	r2,r2,16
    11ec:	013fc074 	movhi	r4,65281
    11f0:	213fffc4 	addi	r4,r4,-1
    11f4:	1906703a 	and	r3,r3,r4
    11f8:	1886b03a 	or	r3,r3,r2
    11fc:	d8c00115 	stw	r3,4(sp)
    1200:	d880010b 	ldhu	r2,4(sp)
    1204:	d880000d 	sth	r2,0(sp)
    1208:	d8c00183 	ldbu	r3,6(sp)
        	capturedImage[(rowNum << yOffset)+ index] = p;
    120c:	d8800003 	ldbu	r2,0(sp)
    1210:	80800005 	stb	r2,0(r16)
    1214:	d8800043 	ldbu	r2,1(sp)
    1218:	80800045 	stb	r2,1(r16)
    121c:	80c00085 	stb	r3,2(r16)
    1220:	8c400084 	addi	r17,r17,2
    1224:	840000c4 	addi	r16,r16,3
    for (rowNum; rowNum < LCD_RES_Y; rowNum++){
        memcpy(pixelData, 
        	  (volatile short *)imagePtr + (rowNum << yOffset), 
        	   NUM_BYTES_PER_PIXEL * LCD_RES_X);
        int index;
        for (index = 0; index < LCD_RES_X; index++){
    1228:	00800374 	movhi	r2,13
    122c:	1091e084 	addi	r2,r2,18306
    1230:	88bfe11e 	bne	r17,r2,11b8 <captureImageDataFP+0x68>
    1234:	d8c00085 	stb	r3,2(sp)
	int rowNum = 0;
	int yOffset = 9;

	printf("C\n");

    for (rowNum; rowNum < LCD_RES_Y; rowNum++){
    1238:	04000044 	movi	r16,1
    123c:	9c27883a 	add	r19,r19,r16
    1240:	008055c4 	movi	r2,343
    1244:	98bfd01e 	bne	r19,r2,1188 <captureImageDataFP+0x38>
        	short currRawData = pixelData[index];
        	struct pixel p = shortToPixel(currRawData);
        	capturedImage[(rowNum << yOffset)+ index] = p;
        }
    }	
    char_lcd_write("Snapshot taken\0");
    1248:	01000074 	movhi	r4,1
    124c:	21001304 	addi	r4,r4,76
    1250:	00020d80 	call	20d8 <char_lcd_write>
    imageCaptured = 1;
    1254:	d427ee15 	stw	r16,-24648(gp)
    printf("D\n");
    1258:	01000074 	movhi	r4,1
    125c:	213f9704 	addi	r4,r4,-420
    1260:	00061680 	call	6168 <puts>

}
    1264:	dfc00717 	ldw	ra,28(sp)
    1268:	dd000617 	ldw	r20,24(sp)
    126c:	dcc00517 	ldw	r19,20(sp)
    1270:	dc800417 	ldw	r18,16(sp)
    1274:	dc400317 	ldw	r17,12(sp)
    1278:	dc000217 	ldw	r16,8(sp)
    127c:	dec00804 	addi	sp,sp,32
    1280:	f800283a 	ret

00001284 <pushbuttons_isr>:

void pushbuttons_isr(void* context, unsigned int id) {
    1284:	defffe04 	addi	sp,sp,-8
    1288:	dfc00115 	stw	ra,4(sp)
    128c:	dc000015 	stw	r16,0(sp)
	printf("A\n");
    1290:	01000074 	movhi	r4,1
    1294:	21010204 	addi	r4,r4,1032
    1298:	00061680 	call	6168 <puts>
	uint32_t edge_addr = pushbuttons_get_edge_capture();
    129c:	00022640 	call	2264 <pushbuttons_get_edge_capture>
    12a0:	1021883a 	mov	r16,r2
	printf("%x", (int) edge_addr);
    12a4:	01000074 	movhi	r4,1
    12a8:	213f9804 	addi	r4,r4,-416
    12ac:	100b883a 	mov	r5,r2
    12b0:	0005e640 	call	5e64 <printf>
	if (edge_addr == 2){
    12b4:	00800084 	movi	r2,2
    12b8:	8080041e 	bne	r16,r2,12cc <pushbuttons_isr+0x48>
		printf("B\n");
    12bc:	01000074 	movhi	r4,1
    12c0:	213f9904 	addi	r4,r4,-412
    12c4:	00061680 	call	6168 <puts>
		captureImageDataFP();
    12c8:	00011500 	call	1150 <captureImageDataFP>
	}
	pushbuttons_clear_edge_capture();
    12cc:	00022700 	call	2270 <pushbuttons_clear_edge_capture>
}
    12d0:	dfc00117 	ldw	ra,4(sp)
    12d4:	dc000017 	ldw	r16,0(sp)
    12d8:	dec00204 	addi	sp,sp,8
    12dc:	f800283a 	ret

000012e0 <captureImageData>:
	fclose(f2);
	fclose(f3);
	fclose(f4);
}

void captureImageData() {
    12e0:	defff704 	addi	sp,sp,-36
    12e4:	dfc00815 	stw	ra,32(sp)
    12e8:	dd400715 	stw	r21,28(sp)
    12ec:	dd000615 	stw	r20,24(sp)
    12f0:	dcc00515 	stw	r19,20(sp)
    12f4:	dc800415 	stw	r18,16(sp)
    12f8:	dc400315 	stw	r17,12(sp)
    12fc:	dc000215 	stw	r16,8(sp)
	int rowNum = 0;
	int yOffset = 9;

	printf("C\n");
    1300:	01000074 	movhi	r4,1
    1304:	213f9604 	addi	r4,r4,-424
    1308:	00061680 	call	6168 <puts>
    130c:	0029883a 	mov	r20,zero
    1310:	0027883a 	mov	r19,zero
    1314:	05400374 	movhi	r21,13
    1318:	ad510004 	addi	r21,r21,17408
    131c:	04803fc4 	movi	r18,255

    for (rowNum; rowNum < LCD_RES_Y; rowNum++){
        memcpy(pixelData, 
    1320:	a00492ba 	slli	r2,r20,10
    1324:	a809883a 	mov	r4,r21
    1328:	d1600017 	ldw	r5,-32768(gp)
    132c:	114b883a 	add	r5,r2,r5
    1330:	0180e084 	movi	r6,898
    1334:	0005cb40 	call	5cb4 <memcpy>
    1338:	9cc5883a 	add	r2,r19,r19
    133c:	14c5883a 	add	r2,r2,r19
    1340:	00c00074 	movhi	r3,1
    1344:	18d10004 	addi	r3,r3,17408
    1348:	10e1883a 	add	r16,r2,r3
    134c:	a823883a 	mov	r17,r21
        	  (volatile short *)imagePtr + (rowNum << yOffset), 
        	   NUM_BYTES_PER_PIXEL * LCD_RES_X);
        int index;
        for (index = 0; index < LCD_RES_X; index++){
        	short currRawData = pixelData[index];
        	struct pixel p = shortToPixel(currRawData);
    1350:	8900000f 	ldh	r4,0(r17)
    1354:	00002940 	call	294 <shortToPixel>
    1358:	148a703a 	and	r5,r2,r18
    135c:	1008d23a 	srli	r4,r2,8
    1360:	2488703a 	and	r4,r4,r18
    1364:	2008923a 	slli	r4,r4,8
    1368:	d8c00117 	ldw	r3,4(sp)
    136c:	18ffffec 	andhi	r3,r3,65535
    1370:	1946b03a 	or	r3,r3,r5
    1374:	1906b03a 	or	r3,r3,r4
    1378:	1004d43a 	srli	r2,r2,16
    137c:	1484703a 	and	r2,r2,r18
    1380:	1004943a 	slli	r2,r2,16
    1384:	013fc074 	movhi	r4,65281
    1388:	213fffc4 	addi	r4,r4,-1
    138c:	1906703a 	and	r3,r3,r4
    1390:	1886b03a 	or	r3,r3,r2
    1394:	d8c00115 	stw	r3,4(sp)
    1398:	d880010b 	ldhu	r2,4(sp)
    139c:	d880000d 	sth	r2,0(sp)
    13a0:	d8c00183 	ldbu	r3,6(sp)
        	capturedImage[rowNum * LCD_RES_X + index] = p;
    13a4:	d8800003 	ldbu	r2,0(sp)
    13a8:	80800005 	stb	r2,0(r16)
    13ac:	d8800043 	ldbu	r2,1(sp)
    13b0:	80800045 	stb	r2,1(r16)
    13b4:	80c00085 	stb	r3,2(r16)
    13b8:	8c400084 	addi	r17,r17,2
    13bc:	840000c4 	addi	r16,r16,3
    for (rowNum; rowNum < LCD_RES_Y; rowNum++){
        memcpy(pixelData, 
        	  (volatile short *)imagePtr + (rowNum << yOffset), 
        	   NUM_BYTES_PER_PIXEL * LCD_RES_X);
        int index;
        for (index = 0; index < LCD_RES_X; index++){
    13c0:	00800374 	movhi	r2,13
    13c4:	1091e084 	addi	r2,r2,18306
    13c8:	88bfe11e 	bne	r17,r2,1350 <captureImageData+0x70>
    13cc:	d8c00085 	stb	r3,2(sp)
	int rowNum = 0;
	int yOffset = 9;

	printf("C\n");

    for (rowNum; rowNum < LCD_RES_Y; rowNum++){
    13d0:	04000044 	movi	r16,1
    13d4:	a429883a 	add	r20,r20,r16
    13d8:	9cc07044 	addi	r19,r19,449
    13dc:	008055c4 	movi	r2,343
    13e0:	a0bfcf1e 	bne	r20,r2,1320 <captureImageData+0x40>
        	short currRawData = pixelData[index];
        	struct pixel p = shortToPixel(currRawData);
        	capturedImage[rowNum * LCD_RES_X + index] = p;
        }
    }	
    char_lcd_write("Snapshot taken\0");
    13e4:	01000074 	movhi	r4,1
    13e8:	21001304 	addi	r4,r4,76
    13ec:	00020d80 	call	20d8 <char_lcd_write>
    imageCaptured = 1;
    13f0:	d427ee15 	stw	r16,-24648(gp)
    printf("D\n");
    13f4:	01000074 	movhi	r4,1
    13f8:	213f9704 	addi	r4,r4,-420
    13fc:	00061680 	call	6168 <puts>

}
    1400:	dfc00817 	ldw	ra,32(sp)
    1404:	dd400717 	ldw	r21,28(sp)
    1408:	dd000617 	ldw	r20,24(sp)
    140c:	dcc00517 	ldw	r19,20(sp)
    1410:	dc800417 	ldw	r18,16(sp)
    1414:	dc400317 	ldw	r17,12(sp)
    1418:	dc000217 	ldw	r16,8(sp)
    141c:	dec00904 	addi	sp,sp,36
    1420:	f800283a 	ret

00001424 <exportToMatlabFP>:
	fclose(f3);
	fclose(f4);
}

void exportToMatlabFP(short* bwImage, short* gradientArrayX, short* gradientArrayY, 
						char* mMatrixBinary){
    1424:	defff004 	addi	sp,sp,-64
    1428:	dfc00f15 	stw	ra,60(sp)
    142c:	df000e15 	stw	fp,56(sp)
    1430:	ddc00d15 	stw	r23,52(sp)
    1434:	dd800c15 	stw	r22,48(sp)
    1438:	dd400b15 	stw	r21,44(sp)
    143c:	dd000a15 	stw	r20,40(sp)
    1440:	dcc00915 	stw	r19,36(sp)
    1444:	dc800815 	stw	r18,32(sp)
    1448:	dc400715 	stw	r17,28(sp)
    144c:	dc000615 	stw	r16,24(sp)
    1450:	d9000215 	stw	r4,8(sp)
    1454:	d9400315 	stw	r5,12(sp)
    1458:	d9800415 	stw	r6,16(sp)
    145c:	d9c00515 	stw	r7,20(sp)
	printf("export to matlab\n");
    1460:	01000074 	movhi	r4,1
    1464:	213f9a04 	addi	r4,r4,-408
    1468:	00061680 	call	6168 <puts>
	char *gradXString = "xGrad.txt";
	char *gradYString = "yGrad.txt";
	char *mMatrixString = "mMatrix.txt";

	// FILE *f0 = fopen(origString, "w");
	FILE *f1 = fopen(bwString, "w");
    146c:	04000074 	movhi	r16,1
    1470:	843fa204 	addi	r16,r16,-376
    1474:	01000074 	movhi	r4,1
    1478:	213f9f04 	addi	r4,r4,-388
    147c:	800b883a 	mov	r5,r16
    1480:	00047380 	call	4738 <fopen>
    1484:	d8800115 	stw	r2,4(sp)
	FILE *f2 = fopen(gradXString, "w");
    1488:	01000074 	movhi	r4,1
    148c:	213fa304 	addi	r4,r4,-372
    1490:	800b883a 	mov	r5,r16
    1494:	00047380 	call	4738 <fopen>
    1498:	d8800015 	stw	r2,0(sp)
	FILE *f3 = fopen(gradYString, "w");
    149c:	01000074 	movhi	r4,1
    14a0:	213fa604 	addi	r4,r4,-360
    14a4:	800b883a 	mov	r5,r16
    14a8:	00047380 	call	4738 <fopen>
    14ac:	1039883a 	mov	fp,r2
	FILE *f4 = fopen(mMatrixString, "w");
    14b0:	01000074 	movhi	r4,1
    14b4:	213fa904 	addi	r4,r4,-348
    14b8:	800b883a 	mov	r5,r16
    14bc:	00047380 	call	4738 <fopen>
    14c0:	102f883a 	mov	r23,r2

	// fprintf(f0, "%s", "orig_mat = [");
	fprintf(f1, "%s", "bw_mat = [");	
    14c4:	04000044 	movi	r16,1
    14c8:	01000074 	movhi	r4,1
    14cc:	213fac04 	addi	r4,r4,-336
    14d0:	800b883a 	mov	r5,r16
    14d4:	01800284 	movi	r6,10
    14d8:	d9c00117 	ldw	r7,4(sp)
    14dc:	00053a00 	call	53a0 <fwrite>
	fprintf(f2, "%s", "x_grad_mat = [");
    14e0:	04400384 	movi	r17,14
    14e4:	01000074 	movhi	r4,1
    14e8:	213faf04 	addi	r4,r4,-324
    14ec:	800b883a 	mov	r5,r16
    14f0:	880d883a 	mov	r6,r17
    14f4:	d9c00017 	ldw	r7,0(sp)
    14f8:	00053a00 	call	53a0 <fwrite>
	fprintf(f3, "%s", "y_grad_mat = [");
    14fc:	01000074 	movhi	r4,1
    1500:	213fb304 	addi	r4,r4,-308
    1504:	800b883a 	mov	r5,r16
    1508:	880d883a 	mov	r6,r17
    150c:	e00f883a 	mov	r7,fp
    1510:	00053a00 	call	53a0 <fwrite>
	fprintf(f4, "%s", "m_matrix = [");
    1514:	01000074 	movhi	r4,1
    1518:	213fb704 	addi	r4,r4,-292
    151c:	800b883a 	mov	r5,r16
    1520:	01800304 	movi	r6,12
    1524:	b80f883a 	mov	r7,r23
    1528:	00053a00 	call	53a0 <fwrite>
    152c:	002d883a 	mov	r22,zero
    1530:	0000bc06 	br	1824 <exportToMatlabFP+0x400>

	for(j = 0; j < LCD_RES_Y; j++){
		for(i = 0; i < LCD_RES_X; i++){
			if(i == LCD_RES_X - 1) {
				// fprintf(f0, "%g", originalImage[j*LCD_RES_Y + i]);
				fprintf(f1, "%g", ((double)bwImage[(j<<9) + i]) / pow(2, NUM_FRACTIONAL_BITS));
    1534:	b024927a 	slli	r18,r22,9
    1538:	9565883a 	add	r18,r18,r21
    153c:	94a7883a 	add	r19,r18,r18
    1540:	05000074 	movhi	r20,1
    1544:	a53fbb04 	addi	r20,r20,-276
    1548:	d8c00217 	ldw	r3,8(sp)
    154c:	1cc5883a 	add	r2,r3,r19
    1550:	1100000f 	ldh	r4,0(r2)
    1554:	00035380 	call	3538 <__floatsidf>
    1558:	0021883a 	mov	r16,zero
    155c:	044fe434 	movhi	r17,16272
    1560:	1009883a 	mov	r4,r2
    1564:	180b883a 	mov	r5,r3
    1568:	800d883a 	mov	r6,r16
    156c:	880f883a 	mov	r7,r17
    1570:	0002e0c0 	call	2e0c <__muldf3>
    1574:	d9000117 	ldw	r4,4(sp)
    1578:	a00b883a 	mov	r5,r20
    157c:	100d883a 	mov	r6,r2
    1580:	180f883a 	mov	r7,r3
    1584:	00047540 	call	4754 <fprintf>
				fprintf(f2, "%g", ((double)gradientArrayX[(j<<9) + i]) / pow(2, NUM_FRACTIONAL_BITS));
    1588:	d8c00317 	ldw	r3,12(sp)
    158c:	1cc5883a 	add	r2,r3,r19
    1590:	1100000f 	ldh	r4,0(r2)
    1594:	00035380 	call	3538 <__floatsidf>
    1598:	000d883a 	mov	r6,zero
    159c:	880f883a 	mov	r7,r17
    15a0:	1009883a 	mov	r4,r2
    15a4:	180b883a 	mov	r5,r3
    15a8:	0002e0c0 	call	2e0c <__muldf3>
    15ac:	d9000017 	ldw	r4,0(sp)
    15b0:	a00b883a 	mov	r5,r20
    15b4:	100d883a 	mov	r6,r2
    15b8:	180f883a 	mov	r7,r3
    15bc:	00047540 	call	4754 <fprintf>
				fprintf(f3, "%g", ((double)gradientArrayY[(j<<9) + i]) / pow(2, NUM_FRACTIONAL_BITS));
    15c0:	d8800417 	ldw	r2,16(sp)
    15c4:	14e7883a 	add	r19,r2,r19
    15c8:	9900000f 	ldh	r4,0(r19)
    15cc:	00035380 	call	3538 <__floatsidf>
    15d0:	000d883a 	mov	r6,zero
    15d4:	880f883a 	mov	r7,r17
    15d8:	1009883a 	mov	r4,r2
    15dc:	180b883a 	mov	r5,r3
    15e0:	0002e0c0 	call	2e0c <__muldf3>
    15e4:	e009883a 	mov	r4,fp
    15e8:	a00b883a 	mov	r5,r20
    15ec:	100d883a 	mov	r6,r2
    15f0:	180f883a 	mov	r7,r3
    15f4:	00047540 	call	4754 <fprintf>
				fprintf(f4, "%d", mMatrixBinary[(j<<9)+ i]);
    15f8:	d8c00517 	ldw	r3,20(sp)
    15fc:	1ca5883a 	add	r18,r3,r18
    1600:	b809883a 	mov	r4,r23
    1604:	01400074 	movhi	r5,1
    1608:	297fbc04 	addi	r5,r5,-272
    160c:	91800007 	ldb	r6,0(r18)
    1610:	00047540 	call	4754 <fprintf>
    1614:	00003d06 	br	170c <exportToMatlabFP+0x2e8>
	int j;
	int i;

	for(j = 0; j < LCD_RES_Y; j++){
		for(i = 0; i < LCD_RES_X; i++){
			if(i == LCD_RES_X - 1) {
    1618:	00807004 	movi	r2,448
    161c:	a8bfc526 	beq	r21,r2,1534 <exportToMatlabFP+0x110>
				fprintf(f3, "%g", gradientArrayY[j*LCD_RES_X + i]);
				fprintf(f4, "%d", mMatrixBinary[j*LCD_RES_X+ i]);*/
			}
			else{
				// fprintf(f0, "%g,", originalImage[j*LCD_RES_Y + i]);
				fprintf(f1, "%g,", ((double)bwImage[(j<<9) + i]) / pow(2, NUM_FRACTIONAL_BITS));
    1620:	b024927a 	slli	r18,r22,9
    1624:	9565883a 	add	r18,r18,r21
    1628:	94a7883a 	add	r19,r18,r18
    162c:	05000074 	movhi	r20,1
    1630:	a53fbd04 	addi	r20,r20,-268
    1634:	d8c00217 	ldw	r3,8(sp)
    1638:	98c5883a 	add	r2,r19,r3
    163c:	1100000f 	ldh	r4,0(r2)
    1640:	00035380 	call	3538 <__floatsidf>
    1644:	0021883a 	mov	r16,zero
    1648:	044fe434 	movhi	r17,16272
    164c:	1009883a 	mov	r4,r2
    1650:	180b883a 	mov	r5,r3
    1654:	800d883a 	mov	r6,r16
    1658:	880f883a 	mov	r7,r17
    165c:	0002e0c0 	call	2e0c <__muldf3>
    1660:	d9000117 	ldw	r4,4(sp)
    1664:	a00b883a 	mov	r5,r20
    1668:	100d883a 	mov	r6,r2
    166c:	180f883a 	mov	r7,r3
    1670:	00047540 	call	4754 <fprintf>
				fprintf(f2, "%g,", ((double)gradientArrayX[(j<<9) + i]) / pow(2, NUM_FRACTIONAL_BITS));
    1674:	d8c00317 	ldw	r3,12(sp)
    1678:	98c5883a 	add	r2,r19,r3
    167c:	1100000f 	ldh	r4,0(r2)
    1680:	00035380 	call	3538 <__floatsidf>
    1684:	000d883a 	mov	r6,zero
    1688:	880f883a 	mov	r7,r17
    168c:	1009883a 	mov	r4,r2
    1690:	180b883a 	mov	r5,r3
    1694:	0002e0c0 	call	2e0c <__muldf3>
    1698:	d9000017 	ldw	r4,0(sp)
    169c:	a00b883a 	mov	r5,r20
    16a0:	100d883a 	mov	r6,r2
    16a4:	180f883a 	mov	r7,r3
    16a8:	00047540 	call	4754 <fprintf>
				fprintf(f3, "%g,", ((double)gradientArrayY[(j<<9) + i]) / pow(2, NUM_FRACTIONAL_BITS));
    16ac:	d8800417 	ldw	r2,16(sp)
    16b0:	98a7883a 	add	r19,r19,r2
    16b4:	9900000f 	ldh	r4,0(r19)
    16b8:	00035380 	call	3538 <__floatsidf>
    16bc:	000d883a 	mov	r6,zero
    16c0:	880f883a 	mov	r7,r17
    16c4:	1009883a 	mov	r4,r2
    16c8:	180b883a 	mov	r5,r3
    16cc:	0002e0c0 	call	2e0c <__muldf3>
    16d0:	e009883a 	mov	r4,fp
    16d4:	a00b883a 	mov	r5,r20
    16d8:	100d883a 	mov	r6,r2
    16dc:	180f883a 	mov	r7,r3
    16e0:	00047540 	call	4754 <fprintf>
				fprintf(f4, "%d,", mMatrixBinary[(j<<9)+ i]);
    16e4:	d8c00517 	ldw	r3,20(sp)
    16e8:	90e5883a 	add	r18,r18,r3
    16ec:	b809883a 	mov	r4,r23
    16f0:	01400074 	movhi	r5,1
    16f4:	297fbe04 	addi	r5,r5,-264
    16f8:	91800007 	ldb	r6,0(r18)
    16fc:	00047540 	call	4754 <fprintf>

	int j;
	int i;

	for(j = 0; j < LCD_RES_Y; j++){
		for(i = 0; i < LCD_RES_X; i++){
    1700:	ad400044 	addi	r21,r21,1
    1704:	00807044 	movi	r2,449
    1708:	a8bfc31e 	bne	r21,r2,1618 <exportToMatlabFP+0x1f4>
				fprintf(f4, "%d,", mMatrixBinary[j*LCD_RES_X+ i]);*/
			}
		}

		// Don't print the semicolon the last time
		if(j == LCD_RES_Y - 1) break;
    170c:	00805584 	movi	r2,342
    1710:	b0801826 	beq	r22,r2,1774 <exportToMatlabFP+0x350>

		// fprintf(f0, "%s", "; ");	
		fprintf(f1, "%s", "; ");	
    1714:	04000074 	movhi	r16,1
    1718:	843fbf04 	addi	r16,r16,-260
    171c:	04400044 	movi	r17,1
    1720:	04800084 	movi	r18,2
    1724:	8009883a 	mov	r4,r16
    1728:	880b883a 	mov	r5,r17
    172c:	900d883a 	mov	r6,r18
    1730:	d9c00117 	ldw	r7,4(sp)
    1734:	00053a00 	call	53a0 <fwrite>
		fprintf(f2, "%s", "; ");
    1738:	8009883a 	mov	r4,r16
    173c:	880b883a 	mov	r5,r17
    1740:	900d883a 	mov	r6,r18
    1744:	d9c00017 	ldw	r7,0(sp)
    1748:	00053a00 	call	53a0 <fwrite>
		fprintf(f3, "%s", ";");
    174c:	04000ec4 	movi	r16,59
    1750:	8009883a 	mov	r4,r16
    1754:	e00b883a 	mov	r5,fp
    1758:	00047b40 	call	47b4 <fputc>
		fprintf(f4, "%s", ";");
    175c:	8009883a 	mov	r4,r16
    1760:	b80b883a 	mov	r5,r23
    1764:	00047b40 	call	47b4 <fputc>
	fprintf(f4, "%s", "m_matrix = [");

	int j;
	int i;

	for(j = 0; j < LCD_RES_Y; j++){
    1768:	b46d883a 	add	r22,r22,r17
    176c:	008055c4 	movi	r2,343
    1770:	b0802c1e 	bne	r22,r2,1824 <exportToMatlabFP+0x400>
		fprintf(f3, "%s", ";");
		fprintf(f4, "%s", ";");
	}

	// fprintf(f0, "%s", "];");
	fprintf(f1, "%s", "];");	
    1774:	04000074 	movhi	r16,1
    1778:	843fc004 	addi	r16,r16,-256
    177c:	04400044 	movi	r17,1
    1780:	04800084 	movi	r18,2
    1784:	8009883a 	mov	r4,r16
    1788:	880b883a 	mov	r5,r17
    178c:	900d883a 	mov	r6,r18
    1790:	d9c00117 	ldw	r7,4(sp)
    1794:	00053a00 	call	53a0 <fwrite>
	fprintf(f2, "%s", "];");
    1798:	8009883a 	mov	r4,r16
    179c:	880b883a 	mov	r5,r17
    17a0:	900d883a 	mov	r6,r18
    17a4:	d9c00017 	ldw	r7,0(sp)
    17a8:	00053a00 	call	53a0 <fwrite>
	fprintf(f3, "%s", "];");
    17ac:	8009883a 	mov	r4,r16
    17b0:	880b883a 	mov	r5,r17
    17b4:	900d883a 	mov	r6,r18
    17b8:	e00f883a 	mov	r7,fp
    17bc:	00053a00 	call	53a0 <fwrite>
	fprintf(f4, "%s", "];");
    17c0:	8009883a 	mov	r4,r16
    17c4:	880b883a 	mov	r5,r17
    17c8:	900d883a 	mov	r6,r18
    17cc:	b80f883a 	mov	r7,r23
    17d0:	00053a00 	call	53a0 <fwrite>

	// fclose(f0);
	fclose(f1);
    17d4:	d9000117 	ldw	r4,4(sp)
    17d8:	00041400 	call	4140 <fclose>
	fclose(f2);
    17dc:	d9000017 	ldw	r4,0(sp)
    17e0:	00041400 	call	4140 <fclose>
	fclose(f3);
    17e4:	e009883a 	mov	r4,fp
    17e8:	00041400 	call	4140 <fclose>
	fclose(f4);
    17ec:	b809883a 	mov	r4,r23
    17f0:	00041400 	call	4140 <fclose>
}
    17f4:	dfc00f17 	ldw	ra,60(sp)
    17f8:	df000e17 	ldw	fp,56(sp)
    17fc:	ddc00d17 	ldw	r23,52(sp)
    1800:	dd800c17 	ldw	r22,48(sp)
    1804:	dd400b17 	ldw	r21,44(sp)
    1808:	dd000a17 	ldw	r20,40(sp)
    180c:	dcc00917 	ldw	r19,36(sp)
    1810:	dc800817 	ldw	r18,32(sp)
    1814:	dc400717 	ldw	r17,28(sp)
    1818:	dc000617 	ldw	r16,24(sp)
    181c:	dec01004 	addi	sp,sp,64
    1820:	f800283a 	ret
    1824:	002b883a 	mov	r21,zero
    1828:	003f7d06 	br	1620 <exportToMatlabFP+0x1fc>

0000182c <exportToMatlab>:
		}
	}
}

void exportToMatlab(double* bwImage, double* gradientArrayX, double* gradientArrayY, 
						int* mMatrixBinary){
    182c:	defff004 	addi	sp,sp,-64
    1830:	dfc00f15 	stw	ra,60(sp)
    1834:	df000e15 	stw	fp,56(sp)
    1838:	ddc00d15 	stw	r23,52(sp)
    183c:	dd800c15 	stw	r22,48(sp)
    1840:	dd400b15 	stw	r21,44(sp)
    1844:	dd000a15 	stw	r20,40(sp)
    1848:	dcc00915 	stw	r19,36(sp)
    184c:	dc800815 	stw	r18,32(sp)
    1850:	dc400715 	stw	r17,28(sp)
    1854:	dc000615 	stw	r16,24(sp)
    1858:	2025883a 	mov	r18,r4
    185c:	2827883a 	mov	r19,r5
    1860:	3029883a 	mov	r20,r6
    1864:	382b883a 	mov	r21,r7
	printf("export to matlab\n");
    1868:	01000074 	movhi	r4,1
    186c:	213f9a04 	addi	r4,r4,-408
    1870:	00061680 	call	6168 <puts>
	char *gradXString = "xGrad.txt";
	char *gradYString = "yGrad.txt";
	char *mMatrixString = "mMatrix.txt";

	// FILE *f0 = fopen(origString, "w");
	FILE *f1 = fopen(bwString, "w");
    1874:	04000074 	movhi	r16,1
    1878:	843fa204 	addi	r16,r16,-376
    187c:	01000074 	movhi	r4,1
    1880:	213f9f04 	addi	r4,r4,-388
    1884:	800b883a 	mov	r5,r16
    1888:	00047380 	call	4738 <fopen>
    188c:	d8800515 	stw	r2,20(sp)
	FILE *f2 = fopen(gradXString, "w");
    1890:	01000074 	movhi	r4,1
    1894:	213fa304 	addi	r4,r4,-372
    1898:	800b883a 	mov	r5,r16
    189c:	00047380 	call	4738 <fopen>
    18a0:	d8800415 	stw	r2,16(sp)
	FILE *f3 = fopen(gradYString, "w");
    18a4:	01000074 	movhi	r4,1
    18a8:	213fa604 	addi	r4,r4,-360
    18ac:	800b883a 	mov	r5,r16
    18b0:	00047380 	call	4738 <fopen>
    18b4:	d8800315 	stw	r2,12(sp)
	FILE *f4 = fopen(mMatrixString, "w");
    18b8:	01000074 	movhi	r4,1
    18bc:	213fa904 	addi	r4,r4,-348
    18c0:	800b883a 	mov	r5,r16
    18c4:	00047380 	call	4738 <fopen>
    18c8:	d8800215 	stw	r2,8(sp)

	// fprintf(f0, "%s", "orig_mat = [");
	fprintf(f1, "%s", "bw_mat = [");	
    18cc:	04000044 	movi	r16,1
    18d0:	01000074 	movhi	r4,1
    18d4:	213fac04 	addi	r4,r4,-336
    18d8:	800b883a 	mov	r5,r16
    18dc:	01800284 	movi	r6,10
    18e0:	d9c00517 	ldw	r7,20(sp)
    18e4:	00053a00 	call	53a0 <fwrite>
	fprintf(f2, "%s", "x_grad_mat = [");
    18e8:	04400384 	movi	r17,14
    18ec:	01000074 	movhi	r4,1
    18f0:	213faf04 	addi	r4,r4,-324
    18f4:	800b883a 	mov	r5,r16
    18f8:	880d883a 	mov	r6,r17
    18fc:	d9c00417 	ldw	r7,16(sp)
    1900:	00053a00 	call	53a0 <fwrite>
	fprintf(f3, "%s", "y_grad_mat = [");
    1904:	01000074 	movhi	r4,1
    1908:	213fb304 	addi	r4,r4,-308
    190c:	800b883a 	mov	r5,r16
    1910:	880d883a 	mov	r6,r17
    1914:	d9c00317 	ldw	r7,12(sp)
    1918:	00053a00 	call	53a0 <fwrite>
	fprintf(f4, "%s", "m_matrix = [");
    191c:	01000074 	movhi	r4,1
    1920:	213fb704 	addi	r4,r4,-292
    1924:	800b883a 	mov	r5,r16
    1928:	01800304 	movi	r6,12
    192c:	d9c00217 	ldw	r7,8(sp)
    1930:	00053a00 	call	53a0 <fwrite>
    1934:	9039883a 	mov	fp,r18
    1938:	982f883a 	mov	r23,r19
    193c:	a02d883a 	mov	r22,r20
    1940:	dd400015 	stw	r21,0(sp)
    1944:	d8000115 	stw	zero,4(sp)
    1948:	00009006 	br	1b8c <exportToMatlab+0x360>
	for(j = 0; j < LCD_RES_Y; j++){
		for(i = 0; i < LCD_RES_X; i++){
			if(i == LCD_RES_X - 1) {
				// fprintf(f0, "%g", originalImage[j*LCD_RES_Y + i]);
				//fprintf(f1, "%g", bwImage[j*LCD_RES_X + i]);
				fprintf(f1, "%g", bwImage[j*LCD_RES_X + i]);
    194c:	04000074 	movhi	r16,1
    1950:	843fbb04 	addi	r16,r16,-276
    1954:	e0838017 	ldw	r2,3584(fp)
    1958:	e0c38117 	ldw	r3,3588(fp)
    195c:	d9000517 	ldw	r4,20(sp)
    1960:	800b883a 	mov	r5,r16
    1964:	100d883a 	mov	r6,r2
    1968:	180f883a 	mov	r7,r3
    196c:	00047540 	call	4754 <fprintf>
				fprintf(f2, "%g", gradientArrayX[j*LCD_RES_X + i]);
    1970:	b8838017 	ldw	r2,3584(r23)
    1974:	b8c38117 	ldw	r3,3588(r23)
    1978:	d9000417 	ldw	r4,16(sp)
    197c:	800b883a 	mov	r5,r16
    1980:	100d883a 	mov	r6,r2
    1984:	180f883a 	mov	r7,r3
    1988:	00047540 	call	4754 <fprintf>
				fprintf(f3, "%g", gradientArrayY[j*LCD_RES_X + i]);
    198c:	b0838017 	ldw	r2,3584(r22)
    1990:	b0c38117 	ldw	r3,3588(r22)
    1994:	d9000317 	ldw	r4,12(sp)
    1998:	800b883a 	mov	r5,r16
    199c:	100d883a 	mov	r6,r2
    19a0:	180f883a 	mov	r7,r3
    19a4:	00047540 	call	4754 <fprintf>
				fprintf(f4, "%d", mMatrixBinary[j*LCD_RES_X+ i]);
    19a8:	d9000217 	ldw	r4,8(sp)
    19ac:	01400074 	movhi	r5,1
    19b0:	297fbc04 	addi	r5,r5,-272
    19b4:	d8800017 	ldw	r2,0(sp)
    19b8:	1181c017 	ldw	r6,1792(r2)
    19bc:	00047540 	call	4754 <fprintf>
    19c0:	00002106 	br	1a48 <exportToMatlab+0x21c>
	int j;
	int i;

	for(j = 0; j < LCD_RES_Y; j++){
		for(i = 0; i < LCD_RES_X; i++){
			if(i == LCD_RES_X - 1) {
    19c4:	00807004 	movi	r2,448
    19c8:	88bfe026 	beq	r17,r2,194c <exportToMatlab+0x120>
				fprintf(f4, "%d", mMatrixBinary[j*LCD_RES_X+ i]);
			}
			else{
				// fprintf(f0, "%g,", originalImage[j*LCD_RES_Y + i]);
				//fprintf(f1, "%g,", bwImage[j*LCD_RES_X + i]);
				fprintf(f1, "%g, ", bwImage[j*LCD_RES_X + i]);
    19cc:	d9000517 	ldw	r4,20(sp)
    19d0:	01400074 	movhi	r5,1
    19d4:	297fc104 	addi	r5,r5,-252
    19d8:	a1800017 	ldw	r6,0(r20)
    19dc:	a1c00117 	ldw	r7,4(r20)
    19e0:	00047540 	call	4754 <fprintf>
				fprintf(f2, "%g,", gradientArrayX[j*LCD_RES_X + i]);
    19e4:	04000074 	movhi	r16,1
    19e8:	843fbd04 	addi	r16,r16,-268
    19ec:	d9000417 	ldw	r4,16(sp)
    19f0:	800b883a 	mov	r5,r16
    19f4:	99800017 	ldw	r6,0(r19)
    19f8:	99c00117 	ldw	r7,4(r19)
    19fc:	00047540 	call	4754 <fprintf>
				fprintf(f3, "%g,", gradientArrayY[j*LCD_RES_X + i]);
    1a00:	d9000317 	ldw	r4,12(sp)
    1a04:	800b883a 	mov	r5,r16
    1a08:	91800017 	ldw	r6,0(r18)
    1a0c:	91c00117 	ldw	r7,4(r18)
    1a10:	00047540 	call	4754 <fprintf>
				fprintf(f4, "%d,", mMatrixBinary[j*LCD_RES_X+ i]);
    1a14:	d9000217 	ldw	r4,8(sp)
    1a18:	01400074 	movhi	r5,1
    1a1c:	297fbe04 	addi	r5,r5,-264
    1a20:	a9800017 	ldw	r6,0(r21)
    1a24:	00047540 	call	4754 <fprintf>

	int j;
	int i;

	for(j = 0; j < LCD_RES_Y; j++){
		for(i = 0; i < LCD_RES_X; i++){
    1a28:	8c400044 	addi	r17,r17,1
    1a2c:	00800204 	movi	r2,8
    1a30:	a0a9883a 	add	r20,r20,r2
    1a34:	98a7883a 	add	r19,r19,r2
    1a38:	90a5883a 	add	r18,r18,r2
    1a3c:	ad400104 	addi	r21,r21,4
    1a40:	00807044 	movi	r2,449
    1a44:	88bfdf1e 	bne	r17,r2,19c4 <exportToMatlab+0x198>
				fprintf(f4, "%d,", mMatrixBinary[j*LCD_RES_X+ i]);
			}
		}

		// Don't print the semicolon the last time
		if(j == LCD_RES_Y - 1) break;
    1a48:	00805584 	movi	r2,342
    1a4c:	d8c00117 	ldw	r3,4(sp)
    1a50:	18802226 	beq	r3,r2,1adc <exportToMatlab+0x2b0>

		// fprintf(f0, "%s", "; ");	
		fprintf(f1, "%s", "; ");	
    1a54:	04000074 	movhi	r16,1
    1a58:	843fbf04 	addi	r16,r16,-260
    1a5c:	04400044 	movi	r17,1
    1a60:	04800084 	movi	r18,2
    1a64:	8009883a 	mov	r4,r16
    1a68:	880b883a 	mov	r5,r17
    1a6c:	900d883a 	mov	r6,r18
    1a70:	d9c00517 	ldw	r7,20(sp)
    1a74:	00053a00 	call	53a0 <fwrite>
		fprintf(f2, "%s", "; ");
    1a78:	8009883a 	mov	r4,r16
    1a7c:	880b883a 	mov	r5,r17
    1a80:	900d883a 	mov	r6,r18
    1a84:	d9c00417 	ldw	r7,16(sp)
    1a88:	00053a00 	call	53a0 <fwrite>
		fprintf(f3, "%s", ";");
    1a8c:	04000ec4 	movi	r16,59
    1a90:	8009883a 	mov	r4,r16
    1a94:	d9400317 	ldw	r5,12(sp)
    1a98:	00047b40 	call	47b4 <fputc>
		fprintf(f4, "%s", ";");
    1a9c:	8009883a 	mov	r4,r16
    1aa0:	d9400217 	ldw	r5,8(sp)
    1aa4:	00047b40 	call	47b4 <fputc>
	fprintf(f4, "%s", "m_matrix = [");

	int j;
	int i;

	for(j = 0; j < LCD_RES_Y; j++){
    1aa8:	d8800117 	ldw	r2,4(sp)
    1aac:	1445883a 	add	r2,r2,r17
    1ab0:	d8800115 	stw	r2,4(sp)
    1ab4:	00838204 	movi	r2,3592
    1ab8:	e0b9883a 	add	fp,fp,r2
    1abc:	b8af883a 	add	r23,r23,r2
    1ac0:	b0ad883a 	add	r22,r22,r2
    1ac4:	d8c00017 	ldw	r3,0(sp)
    1ac8:	18c1c104 	addi	r3,r3,1796
    1acc:	d8c00015 	stw	r3,0(sp)
    1ad0:	008055c4 	movi	r2,343
    1ad4:	d8c00117 	ldw	r3,4(sp)
    1ad8:	18802c1e 	bne	r3,r2,1b8c <exportToMatlab+0x360>
		fprintf(f3, "%s", ";");
		fprintf(f4, "%s", ";");
	}

	// fprintf(f0, "%s", "];");
	fprintf(f1, "%s", "];");	
    1adc:	04000074 	movhi	r16,1
    1ae0:	843fc004 	addi	r16,r16,-256
    1ae4:	04400044 	movi	r17,1
    1ae8:	04800084 	movi	r18,2
    1aec:	8009883a 	mov	r4,r16
    1af0:	880b883a 	mov	r5,r17
    1af4:	900d883a 	mov	r6,r18
    1af8:	d9c00517 	ldw	r7,20(sp)
    1afc:	00053a00 	call	53a0 <fwrite>
	fprintf(f2, "%s", "];");
    1b00:	8009883a 	mov	r4,r16
    1b04:	880b883a 	mov	r5,r17
    1b08:	900d883a 	mov	r6,r18
    1b0c:	d9c00417 	ldw	r7,16(sp)
    1b10:	00053a00 	call	53a0 <fwrite>
	fprintf(f3, "%s", "];");
    1b14:	8009883a 	mov	r4,r16
    1b18:	880b883a 	mov	r5,r17
    1b1c:	900d883a 	mov	r6,r18
    1b20:	d9c00317 	ldw	r7,12(sp)
    1b24:	00053a00 	call	53a0 <fwrite>
	fprintf(f4, "%s", "];");
    1b28:	8009883a 	mov	r4,r16
    1b2c:	880b883a 	mov	r5,r17
    1b30:	900d883a 	mov	r6,r18
    1b34:	d9c00217 	ldw	r7,8(sp)
    1b38:	00053a00 	call	53a0 <fwrite>

	// fclose(f0);
	fclose(f1);
    1b3c:	d9000517 	ldw	r4,20(sp)
    1b40:	00041400 	call	4140 <fclose>
	fclose(f2);
    1b44:	d9000417 	ldw	r4,16(sp)
    1b48:	00041400 	call	4140 <fclose>
	fclose(f3);
    1b4c:	d9000317 	ldw	r4,12(sp)
    1b50:	00041400 	call	4140 <fclose>
	fclose(f4);
    1b54:	d9000217 	ldw	r4,8(sp)
    1b58:	00041400 	call	4140 <fclose>
}
    1b5c:	dfc00f17 	ldw	ra,60(sp)
    1b60:	df000e17 	ldw	fp,56(sp)
    1b64:	ddc00d17 	ldw	r23,52(sp)
    1b68:	dd800c17 	ldw	r22,48(sp)
    1b6c:	dd400b17 	ldw	r21,44(sp)
    1b70:	dd000a17 	ldw	r20,40(sp)
    1b74:	dcc00917 	ldw	r19,36(sp)
    1b78:	dc800817 	ldw	r18,32(sp)
    1b7c:	dc400717 	ldw	r17,28(sp)
    1b80:	dc000617 	ldw	r16,24(sp)
    1b84:	dec01004 	addi	sp,sp,64
    1b88:	f800283a 	ret
    1b8c:	e029883a 	mov	r20,fp
    1b90:	b827883a 	mov	r19,r23
    1b94:	b025883a 	mov	r18,r22
    1b98:	dd400017 	ldw	r21,0(sp)
    1b9c:	0023883a 	mov	r17,zero
    1ba0:	003f8a06 	br	19cc <exportToMatlab+0x1a0>

00001ba4 <bwConversionFixedPoint>:
			// printf("R: %d G: %d B: %d\n Mag: %g\n", currPixel.red, currPixel.green, currPixel.blue, sqrt(currPixel.red * currPixel.red + currPixel.blue * currPixel.blue + currPixel.green * currPixel.green));
		}
	}
}

void bwConversionFixedPoint(struct pixel *originalImage, short *bwImage){
    1ba4:	defffa04 	addi	sp,sp,-24
    1ba8:	dfc00515 	stw	ra,20(sp)
    1bac:	dd000415 	stw	r20,16(sp)
    1bb0:	dcc00315 	stw	r19,12(sp)
    1bb4:	dc800215 	stw	r18,8(sp)
    1bb8:	dc400115 	stw	r17,4(sp)
    1bbc:	dc000015 	stw	r16,0(sp)
    1bc0:	2029883a 	mov	r20,r4
    1bc4:	2827883a 	mov	r19,r5
	printf("bw conversion fixed point\n");
    1bc8:	01000074 	movhi	r4,1
    1bcc:	213fc304 	addi	r4,r4,-244
    1bd0:	00061680 	call	6168 <puts>
    1bd4:	0025883a 	mov	r18,zero
    1bd8:	00002f06 	br	1c98 <bwConversionFixedPoint+0xf4>
	int i;
	int j;
	for(j = 0; j < LCD_RES_Y; j++){
		for(i = 0; i < LCD_RES_X; i++){
			struct pixel currPixel = originalImage[(j<<9) + i];
    1bdc:	9004927a 	slli	r2,r18,9
    1be0:	1445883a 	add	r2,r2,r17
    1be4:	10a1883a 	add	r16,r2,r2
    1be8:	8085883a 	add	r2,r16,r2
    1bec:	1505883a 	add	r2,r2,r20
			double norm_magnitude = sqrt(currPixel.red * currPixel.red + currPixel.blue * currPixel.blue + currPixel.green * currPixel.green) / 64;
    1bf0:	11000003 	ldbu	r4,0(r2)
    1bf4:	10c00083 	ldbu	r3,2(r2)
    1bf8:	10800043 	ldbu	r2,1(r2)
    1bfc:	2109383a 	mul	r4,r4,r4
    1c00:	18c7383a 	mul	r3,r3,r3
    1c04:	20c9883a 	add	r4,r4,r3
    1c08:	1085383a 	mul	r2,r2,r2
    1c0c:	2089883a 	add	r4,r4,r2
    1c10:	00035380 	call	3538 <__floatsidf>
    1c14:	1009883a 	mov	r4,r2
    1c18:	180b883a 	mov	r5,r3
    1c1c:	00023c80 	call	23c8 <sqrt>
    1c20:	100b883a 	mov	r5,r2
    1c24:	180d883a 	mov	r6,r3
			bwImage[(j<<9)+ i] = ((short)(norm_magnitude * pow(2.0, NUM_FRACTIONAL_BITS)));
    1c28:	84e1883a 	add	r16,r16,r19
    1c2c:	0005883a 	mov	r2,zero
    1c30:	00cfe434 	movhi	r3,16272
    1c34:	2809883a 	mov	r4,r5
    1c38:	300b883a 	mov	r5,r6
    1c3c:	100d883a 	mov	r6,r2
    1c40:	180f883a 	mov	r7,r3
    1c44:	0002e0c0 	call	2e0c <__muldf3>
    1c48:	100b883a 	mov	r5,r2
    1c4c:	180d883a 	mov	r6,r3
    1c50:	0005883a 	mov	r2,zero
    1c54:	00d01434 	movhi	r3,16464
    1c58:	2809883a 	mov	r4,r5
    1c5c:	300b883a 	mov	r5,r6
    1c60:	100d883a 	mov	r6,r2
    1c64:	180f883a 	mov	r7,r3
    1c68:	0002e0c0 	call	2e0c <__muldf3>
    1c6c:	1009883a 	mov	r4,r2
    1c70:	180b883a 	mov	r5,r3
    1c74:	00036300 	call	3630 <__fixdfsi>
    1c78:	8080000d 	sth	r2,0(r16)
void bwConversionFixedPoint(struct pixel *originalImage, short *bwImage){
	printf("bw conversion fixed point\n");
	int i;
	int j;
	for(j = 0; j < LCD_RES_Y; j++){
		for(i = 0; i < LCD_RES_X; i++){
    1c7c:	00c00044 	movi	r3,1
    1c80:	88e3883a 	add	r17,r17,r3
    1c84:	00807044 	movi	r2,449
    1c88:	88bfd41e 	bne	r17,r2,1bdc <bwConversionFixedPoint+0x38>

void bwConversionFixedPoint(struct pixel *originalImage, short *bwImage){
	printf("bw conversion fixed point\n");
	int i;
	int j;
	for(j = 0; j < LCD_RES_Y; j++){
    1c8c:	90e5883a 	add	r18,r18,r3
    1c90:	008055c4 	movi	r2,343
    1c94:	90800226 	beq	r18,r2,1ca0 <bwConversionFixedPoint+0xfc>
			/*printf("Red: %u, Green: %u, Blue: %u, FP Mag: %x, Shifted Mag: %f, Exact: %f\n", currPixel.red, currPixel.blue, currPixel.green, bwImage[(j<<9) + i], 
				((double)bwImage[(j<<9) + i]) / pow(2, NUM_FRACTIONAL_BITS), 
				sqrt(currPixel.red * currPixel.red + currPixel.blue * currPixel.blue + currPixel.green * currPixel.green) / 255);*/
		}
	}
}
    1c98:	0023883a 	mov	r17,zero
    1c9c:	003fcf06 	br	1bdc <bwConversionFixedPoint+0x38>
    1ca0:	dfc00517 	ldw	ra,20(sp)
    1ca4:	dd000417 	ldw	r20,16(sp)
    1ca8:	dcc00317 	ldw	r19,12(sp)
    1cac:	dc800217 	ldw	r18,8(sp)
    1cb0:	dc400117 	ldw	r17,4(sp)
    1cb4:	dc000017 	ldw	r16,0(sp)
    1cb8:	dec00604 	addi	sp,sp,24
    1cbc:	f800283a 	ret

00001cc0 <main>:
			vga_front_buffer[(j << 9) + i] = pixel;
		}
	}
}

int main(int argc, char *argv[]){
    1cc0:	defffa04 	addi	sp,sp,-24
    1cc4:	dfc00515 	stw	ra,20(sp)
    1cc8:	dd000415 	stw	r20,16(sp)
    1ccc:	dcc00315 	stw	r19,12(sp)
    1cd0:	dc800215 	stw	r18,8(sp)
    1cd4:	dc400115 	stw	r17,4(sp)
    1cd8:	dc000015 	stw	r16,0(sp)
    1cdc:	023ff934 	movhi	r8,65508
    1ce0:	423fe404 	addi	r8,r8,-112
    1ce4:	da37883a 	add	sp,sp,r8
	time_t t2;
	time_t t3;
	time_t t4;
	time_t t5;

	setupHardware();
    1ce8:	00010f40 	call	10f4 <setupHardware>

	printf("Waiting to acquire image\n\0");
    1cec:	01000074 	movhi	r4,1
    1cf0:	213fca04 	addi	r4,r4,-216
    1cf4:	00061680 	call	6168 <puts>
	while(!imageCaptured){}
    1cf8:	d0a7ee17 	ldw	r2,-24648(gp)
    1cfc:	103ffe26 	beq	r2,zero,1cf8 <main+0x38>
	printf("Image acquired\n\0");
    1d00:	01000074 	movhi	r4,1
    1d04:	213fd104 	addi	r4,r4,-188
    1d08:	00061680 	call	6168 <puts>

	struct pixel* originalImage = (struct pixel*) capturedImage;

	// struct pixel originalImage[LCD_RES_X * LCD_RES_Y];

	time(&t0);
    1d0c:	d809883a 	mov	r4,sp
    1d10:	000658c0 	call	658c <time>
	//double bwImage[LCD_RES_X * LCD_RES_Y];

	short bwImage[MATRIX_DIM_X*MATRIX_DIM_Y];

	//displayColorImage(originalImage);
	bwConversionFixedPoint(originalImage, bwImage);
    1d14:	dc800604 	addi	r18,sp,24
    1d18:	01000074 	movhi	r4,1
    1d1c:	21110004 	addi	r4,r4,17408
    1d20:	900b883a 	mov	r5,r18
    1d24:	0001ba40 	call	1ba4 <bwConversionFixedPoint>

	time(&t1);
    1d28:	d9000104 	addi	r4,sp,4
    1d2c:	000658c0 	call	658c <time>
	printf("BW Conversion took %f seconds\n", difftime(t1, t0));
    1d30:	d9000117 	ldw	r4,4(sp)
    1d34:	d9400017 	ldw	r5,0(sp)
    1d38:	00040040 	call	4004 <difftime>
    1d3c:	01000074 	movhi	r4,1
    1d40:	213fd504 	addi	r4,r4,-172
    1d44:	100b883a 	mov	r5,r2
    1d48:	180d883a 	mov	r6,r3
    1d4c:	0005e640 	call	5e64 <printf>
	
	//Debug
	displayImageFP(bwImage);
    1d50:	9009883a 	mov	r4,r18
    1d54:	00005e80 	call	5e8 <displayImageFP>
	//short gradientArrayXFP_trunc[MATRIX_DIM_X*MATRIX_DIM_Y];
	//short gradientArrayYFP_trunc[MATRIX_DIM_X*MATRIX_DIM_Y];

	int SOBEL_ARRAY_X_FP[9];
	int SOBEL_ARRAY_Y_FP[9];
	intToFPArray(SOBEL_ARRAY_X, SOBEL_ARRAY_X_FP, 9);
    1d58:	00800734 	movhi	r2,28
    1d5c:	10800604 	addi	r2,r2,24
    1d60:	d8a3883a 	add	r17,sp,r2
    1d64:	04000244 	movi	r16,9
    1d68:	01000074 	movhi	r4,1
    1d6c:	21015004 	addi	r4,r4,1344
    1d70:	880b883a 	mov	r5,r17
    1d74:	800d883a 	mov	r6,r16
    1d78:	00001a40 	call	1a4 <intToFPArray>
	intToFPArray(SOBEL_ARRAY_Y, SOBEL_ARRAY_Y_FP, 9);
    1d7c:	00800734 	movhi	r2,28
    1d80:	10800f04 	addi	r2,r2,60
    1d84:	d8a7883a 	add	r19,sp,r2
    1d88:	01000074 	movhi	r4,1
    1d8c:	21015904 	addi	r4,r4,1380
    1d90:	980b883a 	mov	r5,r19
    1d94:	800d883a 	mov	r6,r16
    1d98:	00001a40 	call	1a4 <intToFPArray>
	//double gradientArrayX[LCD_RES_X * LCD_RES_Y];

	//double gradientArrayY[LCD_RES_X * LCD_RES_Y];

	//convolutionFn(bwImage, SOBEL_ARRAY_X, gradientArrayX);
	convolutionFnFP(bwImage, SOBEL_ARRAY_X_FP, gradientArrayX);
    1d9c:	00800334 	movhi	r2,12
    1da0:	10800604 	addi	r2,r2,24
    1da4:	d8a9883a 	add	r20,sp,r2
    1da8:	9009883a 	mov	r4,r18
    1dac:	880b883a 	mov	r5,r17
    1db0:	a00d883a 	mov	r6,r20
    1db4:	0000d040 	call	d04 <convolutionFnFP>

	time(&t2);
    1db8:	d9000204 	addi	r4,sp,8
    1dbc:	000658c0 	call	658c <time>
	printf("1st Convolution took %f seconds\n", difftime(t2, t1));
    1dc0:	d9000217 	ldw	r4,8(sp)
    1dc4:	d9400117 	ldw	r5,4(sp)
    1dc8:	00040040 	call	4004 <difftime>
    1dcc:	01000074 	movhi	r4,1
    1dd0:	213fdd04 	addi	r4,r4,-140
    1dd4:	100b883a 	mov	r5,r2
    1dd8:	180d883a 	mov	r6,r3
    1ddc:	0005e640 	call	5e64 <printf>

	//convolutionFn(bwImage, SOBEL_ARRAY_Y, gradientArrayY);
	convolutionFnFP(bwImage, SOBEL_ARRAY_Y_FP, gradientArrayY);
    1de0:	00800534 	movhi	r2,20
    1de4:	10800604 	addi	r2,r2,24
    1de8:	d8a1883a 	add	r16,sp,r2
    1dec:	9009883a 	mov	r4,r18
    1df0:	980b883a 	mov	r5,r19
    1df4:	800d883a 	mov	r6,r16
    1df8:	0000d040 	call	d04 <convolutionFnFP>

	time(&t3);
    1dfc:	d9000304 	addi	r4,sp,12
    1e00:	000658c0 	call	658c <time>
	printf("2nd Convolution took %f seconds\n", difftime(t3, t2));
    1e04:	d9000317 	ldw	r4,12(sp)
    1e08:	d9400217 	ldw	r5,8(sp)
    1e0c:	00040040 	call	4004 <difftime>
    1e10:	01000074 	movhi	r4,1
    1e14:	213fe604 	addi	r4,r4,-104
    1e18:	100b883a 	mov	r5,r2
    1e1c:	180d883a 	mov	r6,r3
    1e20:	0005e640 	call	5e64 <printf>

	//computePixelScores(gradientArrayX, gradientArrayY, mMatrixBinary);
	computePixelScoresFP(gradientArrayX, gradientArrayY, mMatrixBinary);
    1e24:	00800234 	movhi	r2,8
    1e28:	10800604 	addi	r2,r2,24
    1e2c:	d8a5883a 	add	r18,sp,r2
    1e30:	a009883a 	mov	r4,r20
    1e34:	800b883a 	mov	r5,r16
    1e38:	900d883a 	mov	r6,r18
    1e3c:	00008d00 	call	8d0 <computePixelScoresFP>


	time(&t4);
    1e40:	d9000404 	addi	r4,sp,16
    1e44:	000658c0 	call	658c <time>
	double numSecs = difftime(t4, t3);
    1e48:	d9000417 	ldw	r4,16(sp)
    1e4c:	d9400317 	ldw	r5,12(sp)
    1e50:	00040040 	call	4004 <difftime>
    1e54:	1021883a 	mov	r16,r2
    1e58:	1823883a 	mov	r17,r3
	printf("F\n");
    1e5c:	01000074 	movhi	r4,1
    1e60:	213fef04 	addi	r4,r4,-68
    1e64:	00061680 	call	6168 <puts>
	printf("Pixel scores took %f seconds\n", numSecs);
    1e68:	01000074 	movhi	r4,1
    1e6c:	213ff004 	addi	r4,r4,-64
    1e70:	800b883a 	mov	r5,r16
    1e74:	880d883a 	mov	r6,r17
    1e78:	0005e640 	call	5e64 <printf>
	printf("G\n");
    1e7c:	01000074 	movhi	r4,1
    1e80:	213ff804 	addi	r4,r4,-32
    1e84:	00061680 	call	6168 <puts>
	int upperCorner[2];
	int lowerCorner[2];
	printf("H\n");
    1e88:	01000074 	movhi	r4,1
    1e8c:	213ff904 	addi	r4,r4,-28
    1e90:	00061680 	call	6168 <puts>
	//extractCorners(mMatrixBinary, upperCorner, lowerCorner);
	extractCornersFP(mMatrixBinary, upperCorner, lowerCorner);
    1e94:	00800734 	movhi	r2,28
    1e98:	10801804 	addi	r2,r2,96
    1e9c:	d8a1883a 	add	r16,sp,r2
    1ea0:	10800204 	addi	r2,r2,8
    1ea4:	d8a3883a 	add	r17,sp,r2
    1ea8:	9009883a 	mov	r4,r18
    1eac:	800b883a 	mov	r5,r16
    1eb0:	880d883a 	mov	r6,r17
    1eb4:	00007240 	call	724 <extractCornersFP>

	time(&t5);
    1eb8:	d9000504 	addi	r4,sp,20
    1ebc:	000658c0 	call	658c <time>
	printf("Corners took %f seconds\n", difftime(t5, t4));
    1ec0:	d9000517 	ldw	r4,20(sp)
    1ec4:	d9400417 	ldw	r5,16(sp)
    1ec8:	00040040 	call	4004 <difftime>
    1ecc:	01000074 	movhi	r4,1
    1ed0:	213ffa04 	addi	r4,r4,-24
    1ed4:	100b883a 	mov	r5,r2
    1ed8:	180d883a 	mov	r6,r3
    1edc:	0005e640 	call	5e64 <printf>

	// exportToMatlabFP(bwImage, gradientArrayX, gradientArrayY, 
	// 					mMatrixBinary);
	

	printf("Upper 0: %d, Upper 1: %d\n", upperCorner[0], upperCorner[1]);
    1ee0:	01000074 	movhi	r4,1
    1ee4:	21000104 	addi	r4,r4,4
    1ee8:	81400017 	ldw	r5,0(r16)
    1eec:	81800117 	ldw	r6,4(r16)
    1ef0:	0005e640 	call	5e64 <printf>
	printf("Lower 0: %d, Lower 1: %d\n", lowerCorner[0], lowerCorner[1]);
    1ef4:	01000074 	movhi	r4,1
    1ef8:	21000804 	addi	r4,r4,32
    1efc:	89400017 	ldw	r5,0(r17)
    1f00:	89800117 	ldw	r6,4(r17)
    1f04:	0005e640 	call	5e64 <printf>

	return 0;

}
    1f08:	0005883a 	mov	r2,zero
    1f0c:	02000734 	movhi	r8,28
    1f10:	42001c04 	addi	r8,r8,112
    1f14:	da37883a 	add	sp,sp,r8
    1f18:	dfc00517 	ldw	ra,20(sp)
    1f1c:	dd000417 	ldw	r20,16(sp)
    1f20:	dcc00317 	ldw	r19,12(sp)
    1f24:	dc800217 	ldw	r18,8(sp)
    1f28:	dc400117 	ldw	r17,4(sp)
    1f2c:	dc000017 	ldw	r16,0(sp)
    1f30:	dec00604 	addi	sp,sp,24
    1f34:	f800283a 	ret

00001f38 <bwConversion>:
	return p;

}

// Function that turns a colored image to black and white
void bwConversion(struct pixel* originalImage, double* bwImage){
    1f38:	defff904 	addi	sp,sp,-28
    1f3c:	dfc00615 	stw	ra,24(sp)
    1f40:	dd400515 	stw	r21,20(sp)
    1f44:	dd000415 	stw	r20,16(sp)
    1f48:	dcc00315 	stw	r19,12(sp)
    1f4c:	dc800215 	stw	r18,8(sp)
    1f50:	dc400115 	stw	r17,4(sp)
    1f54:	dc000015 	stw	r16,0(sp)
    1f58:	2021883a 	mov	r16,r4
    1f5c:	282b883a 	mov	r21,r5
	printf("bwConversion\n");
    1f60:	01000074 	movhi	r4,1
    1f64:	21000f04 	addi	r4,r4,60
    1f68:	00061680 	call	6168 <puts>
    1f6c:	8027883a 	mov	r19,r16
    1f70:	0029883a 	mov	r20,zero
    1f74:	00002206 	br	2000 <bwConversion+0xc8>
	for(j = 0; j < LCD_RES_Y; j++) {
		// if (j%20 == 0) printf("bwConversion row %d\0", j);
		for(i = 0; i < LCD_RES_X; i++) {
			// printf("bwConversion col %d", i);
			struct pixel currPixel = originalImage[j*LCD_RES_X + i];
			bwImage[j*LCD_RES_X + i] = sqrt(currPixel.red * currPixel.red + currPixel.blue * currPixel.blue + currPixel.green * currPixel.green) / 255;
    1f78:	813fffc3 	ldbu	r4,-1(r16)
    1f7c:	80800043 	ldbu	r2,1(r16)
    1f80:	80c00003 	ldbu	r3,0(r16)
    1f84:	2109383a 	mul	r4,r4,r4
    1f88:	1085383a 	mul	r2,r2,r2
    1f8c:	2089883a 	add	r4,r4,r2
    1f90:	18c7383a 	mul	r3,r3,r3
    1f94:	20c9883a 	add	r4,r4,r3
    1f98:	00035380 	call	3538 <__floatsidf>
    1f9c:	1009883a 	mov	r4,r2
    1fa0:	180b883a 	mov	r5,r3
    1fa4:	00023c80 	call	23c8 <sqrt>
    1fa8:	100b883a 	mov	r5,r2
    1fac:	180d883a 	mov	r6,r3
    1fb0:	0005883a 	mov	r2,zero
    1fb4:	00d01c34 	movhi	r3,16496
    1fb8:	18f80004 	addi	r3,r3,-8192
    1fbc:	2809883a 	mov	r4,r5
    1fc0:	300b883a 	mov	r5,r6
    1fc4:	100d883a 	mov	r6,r2
    1fc8:	180f883a 	mov	r7,r3
    1fcc:	00031d00 	call	31d0 <__divdf3>
    1fd0:	88800015 	stw	r2,0(r17)
    1fd4:	88c00115 	stw	r3,4(r17)
	printf("bwConversion\n");
	int j;
	int i;
	for(j = 0; j < LCD_RES_Y; j++) {
		// if (j%20 == 0) printf("bwConversion row %d\0", j);
		for(i = 0; i < LCD_RES_X; i++) {
    1fd8:	94800044 	addi	r18,r18,1
    1fdc:	840000c4 	addi	r16,r16,3
    1fe0:	8c400204 	addi	r17,r17,8
    1fe4:	00807044 	movi	r2,449
    1fe8:	90bfe31e 	bne	r18,r2,1f78 <bwConversion+0x40>
    1fec:	9cc150c4 	addi	r19,r19,1347
    1ff0:	a5038204 	addi	r20,r20,3592
// Function that turns a colored image to black and white
void bwConversion(struct pixel* originalImage, double* bwImage){
	printf("bwConversion\n");
	int j;
	int i;
	for(j = 0; j < LCD_RES_Y; j++) {
    1ff4:	008004f4 	movhi	r2,19
    1ff8:	10b32e04 	addi	r2,r2,-13128
    1ffc:	a0800426 	beq	r20,r2,2010 <bwConversion+0xd8>
			struct pixel currPixel = originalImage[j*LCD_RES_X + i];
			bwImage[j*LCD_RES_X + i] = sqrt(currPixel.red * currPixel.red + currPixel.blue * currPixel.blue + currPixel.green * currPixel.green) / 255;
			// printf("R: %d G: %d B: %d\n Mag: %g\n", currPixel.red, currPixel.green, currPixel.blue, sqrt(currPixel.red * currPixel.red + currPixel.blue * currPixel.blue + currPixel.green * currPixel.green));
		}
	}
}
    2000:	9c000044 	addi	r16,r19,1
    2004:	ad23883a 	add	r17,r21,r20
    2008:	0025883a 	mov	r18,zero
    200c:	003fda06 	br	1f78 <bwConversion+0x40>
    2010:	dfc00617 	ldw	ra,24(sp)
    2014:	dd400517 	ldw	r21,20(sp)
    2018:	dd000417 	ldw	r20,16(sp)
    201c:	dcc00317 	ldw	r19,12(sp)
    2020:	dc800217 	ldw	r18,8(sp)
    2024:	dc400117 	ldw	r17,4(sp)
    2028:	dc000017 	ldw	r16,0(sp)
    202c:	dec00704 	addi	sp,sp,28
    2030:	f800283a 	ret

00002034 <camera_set_front_buffer>:
static volatile int *config = (int*) CAMERA_CONFIG_BASE;


void camera_set_front_buffer (int *buff)
{
  *back_buff_reg = buff;
    2034:	d0a00317 	ldw	r2,-32756(gp)
    2038:	11000015 	stw	r4,0(r2)
  *front_buff_reg = 1;
    203c:	00c00044 	movi	r3,1
    2040:	d0a00117 	ldw	r2,-32764(gp)
    2044:	10c00015 	stw	r3,0(r2)
}
    2048:	f800283a 	ret

0000204c <camera_set_back_buffer>:

void camera_set_back_buffer (int *buff)
{
  *back_buff_reg = buff;
    204c:	d0a00317 	ldw	r2,-32756(gp)
    2050:	11000015 	stw	r4,0(r2)
}
    2054:	f800283a 	ret

00002058 <camera_enable_dma>:

void camera_enable_dma (bool enable)
{
  if (enable)
    2058:	21003fcc 	andi	r4,r4,255
    205c:	20000526 	beq	r4,zero,2074 <camera_enable_dma+0x1c>
    *status_reg |= DMA_STATUS_ENABLE_MASK; 
    2060:	d0e00217 	ldw	r3,-32760(gp)
    2064:	18800017 	ldw	r2,0(r3)
    2068:	10800114 	ori	r2,r2,4
    206c:	18800015 	stw	r2,0(r3)
    2070:	f800283a 	ret
  else
    *status_reg &= ~DMA_STATUS_ENABLE_MASK; 
    2074:	d0a00217 	ldw	r2,-32760(gp)
    2078:	10c00017 	ldw	r3,0(r2)
    207c:	013ffec4 	movi	r4,-5
    2080:	1906703a 	and	r3,r3,r4
    2084:	10c00015 	stw	r3,0(r2)
    2088:	f800283a 	ret

0000208c <camera_swap_buffers>:
}

void camera_swap_buffers(void)
{
	// Request a buffer swap
	*front_buff_reg = 1;
    208c:	00c00044 	movi	r3,1
    2090:	d0a00117 	ldw	r2,-32764(gp)
    2094:	10c00015 	stw	r3,0(r2)
	
	// Wait for vertical synchronization.
	while ((*status_reg & 0x01) != 0);
    2098:	d1200217 	ldw	r4,-32760(gp)
    209c:	20800017 	ldw	r2,0(r4)
    20a0:	10c4703a 	and	r2,r2,r3
    20a4:	103ffd1e 	bne	r2,zero,209c <camera_swap_buffers+0x10>
    20a8:	f800283a 	ret

000020ac <char_lcd_move_cursor>:
void char_lcd_move_cursor (int x, int y)
{
  char address = 0;
  
  address |= (x < LCD_X_MAX) ? x : LCD_X_MAX;
  address |= (y == 0) ? LCD_TOP_ROW : LCD_BOTTOM_ROW;  
    20ac:	280ac03a 	cmpne	r5,r5,zero
    20b0:	280a91ba 	slli	r5,r5,6
  
  // write to the LCD instruction register
  *(instruction_ptr) = LCD_SET_CURSOR | address;		
    20b4:	d0e00417 	ldw	r3,-32752(gp)
    20b8:	008009c4 	movi	r2,39
    20bc:	1100010e 	bge	r2,r4,20c4 <char_lcd_move_cursor+0x18>
    20c0:	1009883a 	mov	r4,r2
    20c4:	00bfe004 	movi	r2,-128
    20c8:	2084b03a 	or	r2,r4,r2
    20cc:	1144b03a 	or	r2,r2,r5
    20d0:	18800005 	stb	r2,0(r3)
}
    20d4:	f800283a 	ret

000020d8 <char_lcd_write>:
/******************************************************************************
 * Subroutine to send a string of text to the LCD 
******************************************************************************/
void char_lcd_write (char *text)
{
	while (*(text))
    20d8:	20800007 	ldb	r2,0(r4)
    20dc:	10000726 	beq	r2,zero,20fc <char_lcd_write+0x24>
    20e0:	01400044 	movi	r5,1
	{
		*(data_ptr) = *(text);	// write to the LCD data register
    20e4:	20800003 	ldbu	r2,0(r4)
    20e8:	d0e00517 	ldw	r3,-32748(gp)
    20ec:	18800005 	stb	r2,0(r3)
	  text++;
    20f0:	2149883a 	add	r4,r4,r5
/******************************************************************************
 * Subroutine to send a string of text to the LCD 
******************************************************************************/
void char_lcd_write (char *text)
{
	while (*(text))
    20f4:	20800007 	ldb	r2,0(r4)
    20f8:	103ffa1e 	bne	r2,zero,20e4 <char_lcd_write+0xc>
    20fc:	f800283a 	ret

00002100 <char_lcd_cursor_off>:
/******************************************************************************
 * Subroutine to turn off the LCD cursor
******************************************************************************/
void char_lcd_cursor_off (void)
{
	*(instruction_ptr) = LCD_CURSOR_OFF;	 // turn off the LCD cursor
    2100:	00c00304 	movi	r3,12
    2104:	d0a00417 	ldw	r2,-32752(gp)
    2108:	10c00005 	stb	r3,0(r2)
}
    210c:	f800283a 	ret

00002110 <char_lcd_shift_left>:
/******************************************************************************
 * Subroutine to shift the LCD cursor one pixel to the left.
******************************************************************************/
void char_lcd_shift_left (void)
{
	*(instruction_ptr) = LCD_SHIFT_LEFT;	 // shift display to the left
    2110:	00c00604 	movi	r3,24
    2114:	d0a00417 	ldw	r2,-32752(gp)
    2118:	10c00005 	stb	r3,0(r2)
}
    211c:	f800283a 	ret

00002120 <char_lcd_shift_right>:
/******************************************************************************
 * Subroutine to shift the LCD cursor one pixel to the right.
******************************************************************************/
void char_lcd_shift_right (void)
{
	*(instruction_ptr) = LCD_SHIFT_RIGHT;	 // shift display to the right
    2120:	00c00704 	movi	r3,28
    2124:	d0a00417 	ldw	r2,-32752(gp)
    2128:	10c00005 	stb	r3,0(r2)
}
    212c:	f800283a 	ret

00002130 <lcd_enable_dma>:
/*****************************************************************************
 * Enables DMA transfer of video data from memory to LCD.                    *
******************************************************************************/
void lcd_enable_dma (bool enable)
{
  if (enable)
    2130:	21003fcc 	andi	r4,r4,255
    2134:	20000526 	beq	r4,zero,214c <lcd_enable_dma+0x1c>
    *status_reg |= DMA_STATUS_ENABLE_MASK; 
    2138:	d0e00817 	ldw	r3,-32736(gp)
    213c:	18800017 	ldw	r2,0(r3)
    2140:	10800114 	ori	r2,r2,4
    2144:	18800015 	stw	r2,0(r3)
    2148:	f800283a 	ret
  else
    *status_reg &= ~DMA_STATUS_ENABLE_MASK; 
    214c:	d0a00817 	ldw	r2,-32736(gp)
    2150:	10c00017 	ldw	r3,0(r2)
    2154:	013ffec4 	movi	r4,-5
    2158:	1906703a 	and	r3,r3,r4
    215c:	10c00015 	stw	r3,0(r2)
    2160:	f800283a 	ret

00002164 <lcd_set_front_buffer>:
/*****************************************************************************
 * Sets the front buffer base address.                                       *
******************************************************************************/
void lcd_set_front_buffer (int *buff)
{
  *back_buff_reg = buff;
    2164:	d0a00917 	ldw	r2,-32732(gp)
    2168:	11000015 	stw	r4,0(r2)
  *front_buff_reg = 1;
    216c:	00c00044 	movi	r3,1
    2170:	d0a00617 	ldw	r2,-32744(gp)
    2174:	10c00015 	stw	r3,0(r2)
}
    2178:	f800283a 	ret

0000217c <lcd_set_back_buffer>:
/*****************************************************************************
 * Sets the back buffer base address.                                        *
******************************************************************************/
void lcd_set_back_buffer (int *buff)
{
  *back_buff_reg = buff;
    217c:	d0a00917 	ldw	r2,-32732(gp)
    2180:	11000015 	stw	r4,0(r2)
}
    2184:	f800283a 	ret

00002188 <lcd_swap_buffers>:
 * Swaps the front and back buffer base addresses.                           *                     
******************************************************************************/
void lcd_swap_buffers(void)
{
	/* Request a buffer swap */
	*front_buff_reg = 1;
    2188:	00c00044 	movi	r3,1
    218c:	d0a00617 	ldw	r2,-32744(gp)
    2190:	10c00015 	stw	r3,0(r2)
	
	/* Wait for vertical synchronization */
	while ((*status_reg & 0x01) != 0);
    2194:	d1200817 	ldw	r4,-32736(gp)
    2198:	20800017 	ldw	r2,0(r4)
    219c:	10c4703a 	and	r2,r2,r3
    21a0:	103ffd1e 	bne	r2,zero,2198 <lcd_swap_buffers+0x10>
}
    21a4:	f800283a 	ret

000021a8 <lcd_write>:
  int char_x = x * 8;
  int char_y = y * 8;
  
  /* assume that the text string fits on one line */
  offset = (y << 6) + x;
  while ( *(text) )
    21a8:	30800007 	ldb	r2,0(r6)
    21ac:	10000b26 	beq	r2,zero,21dc <lcd_write+0x34>
    21b0:	280491ba 	slli	r2,r5,6
    21b4:	2085883a 	add	r2,r4,r2
    21b8:	d0e00717 	ldw	r3,-32740(gp)
    21bc:	10c9883a 	add	r4,r2,r3
    21c0:	00c00044 	movi	r3,1
  {
    *(char_buff_base + offset) = *(text);  // write to the character buffer
    21c4:	30800003 	ldbu	r2,0(r6)
    21c8:	20800005 	stb	r2,0(r4)
    text++;
    21cc:	30cd883a 	add	r6,r6,r3
  int char_x = x * 8;
  int char_y = y * 8;
  
  /* assume that the text string fits on one line */
  offset = (y << 6) + x;
  while ( *(text) )
    21d0:	20c9883a 	add	r4,r4,r3
    21d4:	30800007 	ldb	r2,0(r6)
    21d8:	103ffa1e 	bne	r2,zero,21c4 <lcd_write+0x1c>
    21dc:	f800283a 	ret

000021e0 <lcd_draw_rectangle>:

/*****************************************************************************
 * Draws a filled rectangle on the LCD.                                      *
******************************************************************************/
void lcd_draw_rectangle(int x, int y, int width, int height, short color)
{
    21e0:	da80000b 	ldhu	r10,0(sp)
  int i, j, offset;
  volatile short *pixel_buffer = (short *) (*front_buff_reg);
    21e4:	d0a00617 	ldw	r2,-32744(gp)
    21e8:	12400017 	ldw	r9,0(r2)
  
  for(i = x; i <= (x + width - 1); i++)
    21ec:	218d883a 	add	r6,r4,r6
    21f0:	31bfffc4 	addi	r6,r6,-1
    21f4:	31001116 	blt	r6,r4,223c <lcd_draw_rectangle+0x5c>
    21f8:	29c5883a 	add	r2,r5,r7
    21fc:	11ffffc4 	addi	r7,r2,-1
    2200:	02c00044 	movi	r11,1
    2204:	00000b06 	br	2234 <lcd_draw_rectangle+0x54>
    2208:	2807883a 	mov	r3,r5
    220c:	02000044 	movi	r8,1
  {
    for(j = y; j <= (y + height -1); j++)
    {
      offset = (j << 9) + i;    
      *(pixel_buffer + offset) = color;   
    2210:	1804927a 	slli	r2,r3,9
    2214:	1105883a 	add	r2,r2,r4
    2218:	1085883a 	add	r2,r2,r2
    221c:	4885883a 	add	r2,r9,r2
    2220:	1280000d 	sth	r10,0(r2)
  int i, j, offset;
  volatile short *pixel_buffer = (short *) (*front_buff_reg);
  
  for(i = x; i <= (x + width - 1); i++)
  {
    for(j = y; j <= (y + height -1); j++)
    2224:	1a07883a 	add	r3,r3,r8
    2228:	38fff90e 	bge	r7,r3,2210 <lcd_draw_rectangle+0x30>
void lcd_draw_rectangle(int x, int y, int width, int height, short color)
{
  int i, j, offset;
  volatile short *pixel_buffer = (short *) (*front_buff_reg);
  
  for(i = x; i <= (x + width - 1); i++)
    222c:	22c9883a 	add	r4,r4,r11
    2230:	31000216 	blt	r6,r4,223c <lcd_draw_rectangle+0x5c>
  {
    for(j = y; j <= (y + height -1); j++)
    2234:	397ff40e 	bge	r7,r5,2208 <lcd_draw_rectangle+0x28>
    2238:	003ffc06 	br	222c <lcd_draw_rectangle+0x4c>
    223c:	f800283a 	ret

00002240 <pushbuttons_get_data>:
  alt_irq_register (PUSHBUTTONS_IRQ, NULL, isr);
}

uint32_t pushbuttons_get_data (void)
{
  return *data_reg;
    2240:	d0a00c17 	ldw	r2,-32720(gp)
    2244:	10800017 	ldw	r2,0(r2)
}
    2248:	f800283a 	ret

0000224c <pushbuttons_set_interrupt_mask>:

void pushbuttons_set_interrupt_mask (uint32_t mask)
{
  *interrupt_mask_reg = mask;
    224c:	d0a00b17 	ldw	r2,-32724(gp)
    2250:	11000015 	stw	r4,0(r2)
}
    2254:	f800283a 	ret

00002258 <pushbuttons_get_interrupt_mask>:

uint32_t pushbuttons_get_interrupt_mask (void)
{
  return *interrupt_mask_reg;
    2258:	d0a00b17 	ldw	r2,-32724(gp)
    225c:	10800017 	ldw	r2,0(r2)
}
    2260:	f800283a 	ret

00002264 <pushbuttons_get_edge_capture>:

uint32_t pushbuttons_get_edge_capture (void)
{
  return *edge_capture_reg;
    2264:	d0a00a17 	ldw	r2,-32728(gp)
    2268:	10800017 	ldw	r2,0(r2)
}
    226c:	f800283a 	ret

00002270 <pushbuttons_clear_edge_capture>:

void pushbuttons_clear_edge_capture (void)
{
  *edge_capture_reg = 1;
    2270:	00c00044 	movi	r3,1
    2274:	d0a00a17 	ldw	r2,-32728(gp)
    2278:	10c00015 	stw	r3,0(r2)
}
    227c:	f800283a 	ret

00002280 <pushbuttons_enable_interrupts>:
static volatile int *interrupt_mask_reg = (int*) (PUSHBUTTONS_BASE +  8);
static volatile int *edge_capture_reg   = (int*) (PUSHBUTTONS_BASE + 12);


void pushbuttons_enable_interrupts (void *isr)
{
    2280:	defffe04 	addi	sp,sp,-8
    2284:	dfc00115 	stw	ra,4(sp)
    2288:	dc000015 	stw	r16,0(sp)
    228c:	2021883a 	mov	r16,r4
  pushbuttons_set_interrupt_mask (DEFAULT_INTERRUPT_MASK);
    2290:	01000384 	movi	r4,14
    2294:	000224c0 	call	224c <pushbuttons_set_interrupt_mask>
  alt_irq_register (PUSHBUTTONS_IRQ, NULL, isr);
    2298:	01000044 	movi	r4,1
    229c:	000b883a 	mov	r5,zero
    22a0:	800d883a 	mov	r6,r16
    22a4:	000d4440 	call	d444 <alt_irq_register>
}
    22a8:	dfc00117 	ldw	ra,4(sp)
    22ac:	dc000017 	ldw	r16,0(sp)
    22b0:	dec00204 	addi	sp,sp,8
    22b4:	f800283a 	ret

000022b8 <vga_enable_dma>:
static volatile char *char_buff_base = (char*) VGA_CHAR_BUFFER_AVALON_CHAR_BUFFER_SLAVE_BASE;


void vga_enable_dma (bool enable)
{
  if (enable)
    22b8:	21003fcc 	andi	r4,r4,255
    22bc:	20000526 	beq	r4,zero,22d4 <vga_enable_dma+0x1c>
    *status_reg |= DMA_STATUS_ENABLE_MASK; 
    22c0:	d0e00f17 	ldw	r3,-32708(gp)
    22c4:	18800017 	ldw	r2,0(r3)
    22c8:	10800114 	ori	r2,r2,4
    22cc:	18800015 	stw	r2,0(r3)
    22d0:	f800283a 	ret
  else
    *status_reg &= ~DMA_STATUS_ENABLE_MASK; 
    22d4:	d0a00f17 	ldw	r2,-32708(gp)
    22d8:	10c00017 	ldw	r3,0(r2)
    22dc:	013ffec4 	movi	r4,-5
    22e0:	1906703a 	and	r3,r3,r4
    22e4:	10c00015 	stw	r3,0(r2)
    22e8:	f800283a 	ret

000022ec <vga_set_front_buffer>:
/******************************************************************************
 * Subroutine to set the back buffer base address.
******************************************************************************/
void vga_set_front_buffer (int *buff)
{
  *back_buff_reg = buff;
    22ec:	d0a01017 	ldw	r2,-32704(gp)
    22f0:	11000015 	stw	r4,0(r2)
  *front_buff_reg = 1;
    22f4:	00c00044 	movi	r3,1
    22f8:	d0a00d17 	ldw	r2,-32716(gp)
    22fc:	10c00015 	stw	r3,0(r2)
}
    2300:	f800283a 	ret

00002304 <vga_set_back_buffer>:

void vga_set_back_buffer (int *buff)
{
  *back_buff_reg = buff;
    2304:	d0a01017 	ldw	r2,-32704(gp)
    2308:	11000015 	stw	r4,0(r2)
}
    230c:	f800283a 	ret

00002310 <vga_swap_buffers>:

void vga_swap_buffers(void)
{
	// Request a buffer swap
	*front_buff_reg = 1;
    2310:	00c00044 	movi	r3,1
    2314:	d0a00d17 	ldw	r2,-32716(gp)
    2318:	10c00015 	stw	r3,0(r2)
	
	// Wait for vertical synchronization.
	while ((*status_reg & 0x01) != 0);
    231c:	d1200f17 	ldw	r4,-32708(gp)
    2320:	20800017 	ldw	r2,0(r4)
    2324:	10c4703a 	and	r2,r2,r3
    2328:	103ffd1e 	bne	r2,zero,2320 <vga_swap_buffers+0x10>
}
    232c:	f800283a 	ret

00002330 <vga_write>:
  int char_x = x * 4;
  int char_y = y * 4;

  /* assume that the text string fits on one line */
  offset = (y << 7) + x;
  while ( *(text) )
    2330:	30800007 	ldb	r2,0(r6)
    2334:	10000b26 	beq	r2,zero,2364 <vga_write+0x34>
    2338:	280491fa 	slli	r2,r5,7
    233c:	2085883a 	add	r2,r4,r2
    2340:	d0e00e17 	ldw	r3,-32712(gp)
    2344:	10c9883a 	add	r4,r2,r3
    2348:	00c00044 	movi	r3,1
  {
    *(char_buff_base + offset) = *(text);  // write to the character buffer
    234c:	30800003 	ldbu	r2,0(r6)
    2350:	20800005 	stb	r2,0(r4)
    text++;
    2354:	30cd883a 	add	r6,r6,r3
  int char_x = x * 4;
  int char_y = y * 4;

  /* assume that the text string fits on one line */
  offset = (y << 7) + x;
  while ( *(text) )
    2358:	20c9883a 	add	r4,r4,r3
    235c:	30800007 	ldb	r2,0(r6)
    2360:	103ffa1e 	bne	r2,zero,234c <vga_write+0x1c>
    2364:	f800283a 	ret

00002368 <vga_draw_rectangle>:

/*****************************************************************************
 * Draw a filled rectangle on the VGA.
******************************************************************************/
void vga_draw_rectangle(int x, int y, int width, int height, short color)
{
    2368:	da80000b 	ldhu	r10,0(sp)
  int i, j, offset;
  volatile short *pixel_buffer = (short *) (*front_buff_reg);
    236c:	d0a00d17 	ldw	r2,-32716(gp)
    2370:	12400017 	ldw	r9,0(r2)
  
  for(i = x; i <= (x + width - 1); i++)
    2374:	218d883a 	add	r6,r4,r6
    2378:	31bfffc4 	addi	r6,r6,-1
    237c:	31001116 	blt	r6,r4,23c4 <vga_draw_rectangle+0x5c>
    2380:	29c5883a 	add	r2,r5,r7
    2384:	11ffffc4 	addi	r7,r2,-1
    2388:	02c00044 	movi	r11,1
    238c:	00000b06 	br	23bc <vga_draw_rectangle+0x54>
    2390:	2807883a 	mov	r3,r5
    2394:	02000044 	movi	r8,1
  {
    for(j = y; j <= (y + height -1); j++)
    {
      offset = (j << 9) + i;    
      *(pixel_buffer + offset) = color;   
    2398:	1804927a 	slli	r2,r3,9
    239c:	1105883a 	add	r2,r2,r4
    23a0:	1085883a 	add	r2,r2,r2
    23a4:	4885883a 	add	r2,r9,r2
    23a8:	1280000d 	sth	r10,0(r2)
  int i, j, offset;
  volatile short *pixel_buffer = (short *) (*front_buff_reg);
  
  for(i = x; i <= (x + width - 1); i++)
  {
    for(j = y; j <= (y + height -1); j++)
    23ac:	1a07883a 	add	r3,r3,r8
    23b0:	38fff90e 	bge	r7,r3,2398 <vga_draw_rectangle+0x30>
void vga_draw_rectangle(int x, int y, int width, int height, short color)
{
  int i, j, offset;
  volatile short *pixel_buffer = (short *) (*front_buff_reg);
  
  for(i = x; i <= (x + width - 1); i++)
    23b4:	22c9883a 	add	r4,r4,r11
    23b8:	31000216 	blt	r6,r4,23c4 <vga_draw_rectangle+0x5c>
  {
    for(j = y; j <= (y + height -1); j++)
    23bc:	397ff40e 	bge	r7,r5,2390 <vga_draw_rectangle+0x28>
    23c0:	003ffc06 	br	23b4 <vga_draw_rectangle+0x4c>
    23c4:	f800283a 	ret

000023c8 <sqrt>:
    23c8:	defff104 	addi	sp,sp,-60
    23cc:	dd000d15 	stw	r20,52(sp)
    23d0:	05000074 	movhi	r20,1
    23d4:	a5090704 	addi	r20,r20,9244
    23d8:	dcc00c15 	stw	r19,48(sp)
    23dc:	dc800b15 	stw	r18,44(sp)
    23e0:	dc400a15 	stw	r17,40(sp)
    23e4:	dc000915 	stw	r16,36(sp)
    23e8:	2025883a 	mov	r18,r4
    23ec:	dfc00e15 	stw	ra,56(sp)
    23f0:	2827883a 	mov	r19,r5
    23f4:	00024f80 	call	24f8 <__ieee754_sqrt>
    23f8:	a1000017 	ldw	r4,0(r20)
    23fc:	1021883a 	mov	r16,r2
    2400:	00bfffc4 	movi	r2,-1
    2404:	1823883a 	mov	r17,r3
    2408:	20800a26 	beq	r4,r2,2434 <sqrt+0x6c>
    240c:	9009883a 	mov	r4,r18
    2410:	980b883a 	mov	r5,r19
    2414:	00027c00 	call	27c0 <__isnand>
    2418:	1000061e 	bne	r2,zero,2434 <sqrt+0x6c>
    241c:	000d883a 	mov	r6,zero
    2420:	000f883a 	mov	r7,zero
    2424:	9009883a 	mov	r4,r18
    2428:	980b883a 	mov	r5,r19
    242c:	00034b00 	call	34b0 <__ltdf2>
    2430:	10000a16 	blt	r2,zero,245c <sqrt+0x94>
    2434:	8005883a 	mov	r2,r16
    2438:	8807883a 	mov	r3,r17
    243c:	dfc00e17 	ldw	ra,56(sp)
    2440:	dd000d17 	ldw	r20,52(sp)
    2444:	dcc00c17 	ldw	r19,48(sp)
    2448:	dc800b17 	ldw	r18,44(sp)
    244c:	dc400a17 	ldw	r17,40(sp)
    2450:	dc000917 	ldw	r16,36(sp)
    2454:	dec00f04 	addi	sp,sp,60
    2458:	f800283a 	ret
    245c:	a4000017 	ldw	r16,0(r20)
    2460:	00800044 	movi	r2,1
    2464:	00c00074 	movhi	r3,1
    2468:	18c01704 	addi	r3,r3,92
    246c:	d8800015 	stw	r2,0(sp)
    2470:	d8c00115 	stw	r3,4(sp)
    2474:	dcc00315 	stw	r19,12(sp)
    2478:	d8000815 	stw	zero,32(sp)
    247c:	dc800415 	stw	r18,16(sp)
    2480:	dcc00515 	stw	r19,20(sp)
    2484:	dc800215 	stw	r18,8(sp)
    2488:	80000a1e 	bne	r16,zero,24b4 <sqrt+0xec>
    248c:	d8000615 	stw	zero,24(sp)
    2490:	d8000715 	stw	zero,28(sp)
    2494:	d809883a 	mov	r4,sp
    2498:	00027f00 	call	27f0 <matherr>
    249c:	10000e26 	beq	r2,zero,24d8 <sqrt+0x110>
    24a0:	d8800817 	ldw	r2,32(sp)
    24a4:	1000101e 	bne	r2,zero,24e8 <sqrt+0x120>
    24a8:	dc000617 	ldw	r16,24(sp)
    24ac:	dc400717 	ldw	r17,28(sp)
    24b0:	003fe006 	br	2434 <sqrt+0x6c>
    24b4:	0009883a 	mov	r4,zero
    24b8:	000d883a 	mov	r6,zero
    24bc:	000b883a 	mov	r5,zero
    24c0:	000f883a 	mov	r7,zero
    24c4:	00031d00 	call	31d0 <__divdf3>
    24c8:	d8800615 	stw	r2,24(sp)
    24cc:	00800084 	movi	r2,2
    24d0:	d8c00715 	stw	r3,28(sp)
    24d4:	80bfef1e 	bne	r16,r2,2494 <sqrt+0xcc>
    24d8:	00040200 	call	4020 <__errno>
    24dc:	00c00844 	movi	r3,33
    24e0:	10c00015 	stw	r3,0(r2)
    24e4:	003fee06 	br	24a0 <sqrt+0xd8>
    24e8:	00040200 	call	4020 <__errno>
    24ec:	d8c00817 	ldw	r3,32(sp)
    24f0:	10c00015 	stw	r3,0(r2)
    24f4:	003fec06 	br	24a8 <sqrt+0xe0>

000024f8 <__ieee754_sqrt>:
    24f8:	defffd04 	addi	sp,sp,-12
    24fc:	dc000015 	stw	r16,0(sp)
    2500:	009ffc34 	movhi	r2,32752
    2504:	2021883a 	mov	r16,r4
    2508:	291ffc2c 	andhi	r4,r5,32752
    250c:	dc400115 	stw	r17,4(sp)
    2510:	dfc00215 	stw	ra,8(sp)
    2514:	2823883a 	mov	r17,r5
    2518:	280f883a 	mov	r7,r5
    251c:	2807883a 	mov	r3,r5
    2520:	8011883a 	mov	r8,r16
    2524:	20807d26 	beq	r4,r2,271c <__ieee754_sqrt+0x224>
    2528:	01408d0e 	bge	zero,r5,2760 <__ieee754_sqrt+0x268>
    252c:	380dd53a 	srai	r6,r7,20
    2530:	3000131e 	bne	r6,zero,2580 <__ieee754_sqrt+0x88>
    2534:	1800041e 	bne	r3,zero,2548 <__ieee754_sqrt+0x50>
    2538:	400ed2fa 	srli	r7,r8,11
    253c:	31bffac4 	addi	r6,r6,-21
    2540:	4010957a 	slli	r8,r8,21
    2544:	383ffc26 	beq	r7,zero,2538 <__ieee754_sqrt+0x40>
    2548:	3880042c 	andhi	r2,r7,16
    254c:	1000991e 	bne	r2,zero,27b4 <__ieee754_sqrt+0x2bc>
    2550:	0009883a 	mov	r4,zero
    2554:	39cf883a 	add	r7,r7,r7
    2558:	3880042c 	andhi	r2,r7,16
    255c:	21000044 	addi	r4,r4,1
    2560:	103ffc26 	beq	r2,zero,2554 <__ieee754_sqrt+0x5c>
    2564:	00800804 	movi	r2,32
    2568:	1105c83a 	sub	r2,r2,r4
    256c:	4086d83a 	srl	r3,r8,r2
    2570:	4110983a 	sll	r8,r8,r4
    2574:	3105c83a 	sub	r2,r6,r4
    2578:	38ceb03a 	or	r7,r7,r3
    257c:	11800044 	addi	r6,r2,1
    2580:	31bf0044 	addi	r6,r6,-1023
    2584:	30c0004c 	andi	r3,r6,1
    2588:	00800434 	movhi	r2,16
    258c:	10bfffc4 	addi	r2,r2,-1
    2590:	3884703a 	and	r2,r7,r2
    2594:	1807003a 	cmpeq	r3,r3,zero
    2598:	11000434 	orhi	r4,r2,16
    259c:	18005426 	beq	r3,zero,26f0 <__ieee754_sqrt+0x1f8>
    25a0:	4004d7fa 	srli	r2,r8,31
    25a4:	4207883a 	add	r3,r8,r8
    25a8:	02800834 	movhi	r10,32
    25ac:	1105883a 	add	r2,r2,r4
    25b0:	2089883a 	add	r4,r4,r2
    25b4:	0011883a 	mov	r8,zero
    25b8:	000b883a 	mov	r5,zero
    25bc:	0013883a 	mov	r9,zero
    25c0:	02c00584 	movi	r11,22
    25c4:	520f883a 	add	r7,r10,r8
    25c8:	1804d7fa 	srli	r2,r3,31
    25cc:	4a400044 	addi	r9,r9,1
    25d0:	18c7883a 	add	r3,r3,r3
    25d4:	21c00316 	blt	r4,r7,25e4 <__ieee754_sqrt+0xec>
    25d8:	21c9c83a 	sub	r4,r4,r7
    25dc:	2a8b883a 	add	r5,r5,r10
    25e0:	51d1883a 	add	r8,r10,r7
    25e4:	1105883a 	add	r2,r2,r4
    25e8:	5014d07a 	srli	r10,r10,1
    25ec:	2089883a 	add	r4,r4,r2
    25f0:	4afff41e 	bne	r9,r11,25c4 <__ieee754_sqrt+0xcc>
    25f4:	02600034 	movhi	r9,32768
    25f8:	0017883a 	mov	r11,zero
    25fc:	0019883a 	mov	r12,zero
    2600:	0015883a 	mov	r10,zero
    2604:	4821883a 	mov	r16,r9
    2608:	03c00804 	movi	r15,32
    260c:	00000806 	br	2630 <__ieee754_sqrt+0x138>
    2610:	22003426 	beq	r4,r8,26e4 <__ieee754_sqrt+0x1ec>
    2614:	1804d7fa 	srli	r2,r3,31
    2618:	52800044 	addi	r10,r10,1
    261c:	18c7883a 	add	r3,r3,r3
    2620:	1105883a 	add	r2,r2,r4
    2624:	2089883a 	add	r4,r4,r2
    2628:	4812d07a 	srli	r9,r9,1
    262c:	53c01326 	beq	r10,r15,267c <__ieee754_sqrt+0x184>
    2630:	4acf883a 	add	r7,r9,r11
    2634:	413ff60e 	bge	r8,r4,2610 <__ieee754_sqrt+0x118>
    2638:	38a0002c 	andhi	r2,r7,32768
    263c:	3a57883a 	add	r11,r7,r9
    2640:	14002426 	beq	r2,r16,26d4 <__ieee754_sqrt+0x1dc>
    2644:	4005883a 	mov	r2,r8
    2648:	2209c83a 	sub	r4,r4,r8
    264c:	19c0012e 	bgeu	r3,r7,2654 <__ieee754_sqrt+0x15c>
    2650:	213fffc4 	addi	r4,r4,-1
    2654:	19c7c83a 	sub	r3,r3,r7
    2658:	1011883a 	mov	r8,r2
    265c:	1804d7fa 	srli	r2,r3,31
    2660:	52800044 	addi	r10,r10,1
    2664:	6259883a 	add	r12,r12,r9
    2668:	1105883a 	add	r2,r2,r4
    266c:	18c7883a 	add	r3,r3,r3
    2670:	2089883a 	add	r4,r4,r2
    2674:	4812d07a 	srli	r9,r9,1
    2678:	53ffed1e 	bne	r10,r15,2630 <__ieee754_sqrt+0x138>
    267c:	20c4b03a 	or	r2,r4,r3
    2680:	1000201e 	bne	r2,zero,2704 <__ieee754_sqrt+0x20c>
    2684:	600ed07a 	srli	r7,r12,1
    2688:	2880004c 	andi	r2,r5,1
    268c:	1005003a 	cmpeq	r2,r2,zero
    2690:	1000011e 	bne	r2,zero,2698 <__ieee754_sqrt+0x1a0>
    2694:	39e00034 	orhi	r7,r7,32768
    2698:	300dd07a 	srai	r6,r6,1
    269c:	280bd07a 	srai	r5,r5,1
    26a0:	010ff834 	movhi	r4,16352
    26a4:	300c953a 	slli	r6,r6,20
    26a8:	290b883a 	add	r5,r5,r4
    26ac:	3821883a 	mov	r16,r7
    26b0:	299d883a 	add	r14,r5,r6
    26b4:	7023883a 	mov	r17,r14
    26b8:	8005883a 	mov	r2,r16
    26bc:	8807883a 	mov	r3,r17
    26c0:	dfc00217 	ldw	ra,8(sp)
    26c4:	dc400117 	ldw	r17,4(sp)
    26c8:	dc000017 	ldw	r16,0(sp)
    26cc:	dec00304 	addi	sp,sp,12
    26d0:	f800283a 	ret
    26d4:	5884703a 	and	r2,r11,r2
    26d8:	103fda1e 	bne	r2,zero,2644 <__ieee754_sqrt+0x14c>
    26dc:	40800044 	addi	r2,r8,1
    26e0:	003fd906 	br	2648 <__ieee754_sqrt+0x150>
    26e4:	19ffd42e 	bgeu	r3,r7,2638 <__ieee754_sqrt+0x140>
    26e8:	2011883a 	mov	r8,r4
    26ec:	003fc906 	br	2614 <__ieee754_sqrt+0x11c>
    26f0:	4004d7fa 	srli	r2,r8,31
    26f4:	4211883a 	add	r8,r8,r8
    26f8:	1105883a 	add	r2,r2,r4
    26fc:	2089883a 	add	r4,r4,r2
    2700:	003fa706 	br	25a0 <__ieee754_sqrt+0xa8>
    2704:	00bfffc4 	movi	r2,-1
    2708:	60802726 	beq	r12,r2,27a8 <__ieee754_sqrt+0x2b0>
    270c:	6080004c 	andi	r2,r12,1
    2710:	6085883a 	add	r2,r12,r2
    2714:	100ed07a 	srli	r7,r2,1
    2718:	003fdb06 	br	2688 <__ieee754_sqrt+0x190>
    271c:	8009883a 	mov	r4,r16
    2720:	800d883a 	mov	r6,r16
    2724:	0002e0c0 	call	2e0c <__muldf3>
    2728:	180f883a 	mov	r7,r3
    272c:	880b883a 	mov	r5,r17
    2730:	8009883a 	mov	r4,r16
    2734:	100d883a 	mov	r6,r2
    2738:	0002d980 	call	2d98 <__adddf3>
    273c:	1021883a 	mov	r16,r2
    2740:	1823883a 	mov	r17,r3
    2744:	8005883a 	mov	r2,r16
    2748:	8807883a 	mov	r3,r17
    274c:	dfc00217 	ldw	ra,8(sp)
    2750:	dc400117 	ldw	r17,4(sp)
    2754:	dc000017 	ldw	r16,0(sp)
    2758:	dec00304 	addi	sp,sp,12
    275c:	f800283a 	ret
    2760:	00a00034 	movhi	r2,32768
    2764:	10bfffc4 	addi	r2,r2,-1
    2768:	2884703a 	and	r2,r5,r2
    276c:	8084b03a 	or	r2,r16,r2
    2770:	103fd126 	beq	r2,zero,26b8 <__ieee754_sqrt+0x1c0>
    2774:	283f6d26 	beq	r5,zero,252c <__ieee754_sqrt+0x34>
    2778:	280f883a 	mov	r7,r5
    277c:	8009883a 	mov	r4,r16
    2780:	800d883a 	mov	r6,r16
    2784:	0002d180 	call	2d18 <__subdf3>
    2788:	1009883a 	mov	r4,r2
    278c:	180b883a 	mov	r5,r3
    2790:	100d883a 	mov	r6,r2
    2794:	180f883a 	mov	r7,r3
    2798:	00031d00 	call	31d0 <__divdf3>
    279c:	1021883a 	mov	r16,r2
    27a0:	1823883a 	mov	r17,r3
    27a4:	003fc406 	br	26b8 <__ieee754_sqrt+0x1c0>
    27a8:	29400044 	addi	r5,r5,1
    27ac:	000f883a 	mov	r7,zero
    27b0:	003fb506 	br	2688 <__ieee754_sqrt+0x190>
    27b4:	0009883a 	mov	r4,zero
    27b8:	00800804 	movi	r2,32
    27bc:	003f6b06 	br	256c <__ieee754_sqrt+0x74>

000027c0 <__isnand>:
    27c0:	200d883a 	mov	r6,r4
    27c4:	0109c83a 	sub	r4,zero,r4
    27c8:	2188b03a 	or	r4,r4,r6
    27cc:	2008d7fa 	srli	r4,r4,31
    27d0:	00a00034 	movhi	r2,32768
    27d4:	10bfffc4 	addi	r2,r2,-1
    27d8:	1144703a 	and	r2,r2,r5
    27dc:	2088b03a 	or	r4,r4,r2
    27e0:	009ffc34 	movhi	r2,32752
    27e4:	1105c83a 	sub	r2,r2,r4
    27e8:	1004d7fa 	srli	r2,r2,31
    27ec:	f800283a 	ret

000027f0 <matherr>:
    27f0:	0005883a 	mov	r2,zero
    27f4:	f800283a 	ret

000027f8 <__gtsf2>:
    27f8:	defff304 	addi	sp,sp,-52
    27fc:	dc400b15 	stw	r17,44(sp)
    2800:	dc400204 	addi	r17,sp,8
    2804:	dc000a15 	stw	r16,40(sp)
    2808:	d9000015 	stw	r4,0(sp)
    280c:	d9400115 	stw	r5,4(sp)
    2810:	d809883a 	mov	r4,sp
    2814:	880b883a 	mov	r5,r17
    2818:	dc000604 	addi	r16,sp,24
    281c:	dfc00c15 	stw	ra,48(sp)
    2820:	00039800 	call	3980 <__unpack_f>
    2824:	d9000104 	addi	r4,sp,4
    2828:	800b883a 	mov	r5,r16
    282c:	00039800 	call	3980 <__unpack_f>
    2830:	d8800217 	ldw	r2,8(sp)
    2834:	00c00044 	movi	r3,1
    2838:	01bfffc4 	movi	r6,-1
    283c:	1880062e 	bgeu	r3,r2,2858 <__gtsf2+0x60>
    2840:	d8800617 	ldw	r2,24(sp)
    2844:	8809883a 	mov	r4,r17
    2848:	800b883a 	mov	r5,r16
    284c:	1880022e 	bgeu	r3,r2,2858 <__gtsf2+0x60>
    2850:	0003a480 	call	3a48 <__fpcmp_parts_f>
    2854:	100d883a 	mov	r6,r2
    2858:	3005883a 	mov	r2,r6
    285c:	dfc00c17 	ldw	ra,48(sp)
    2860:	dc400b17 	ldw	r17,44(sp)
    2864:	dc000a17 	ldw	r16,40(sp)
    2868:	dec00d04 	addi	sp,sp,52
    286c:	f800283a 	ret

00002870 <__floatsisf>:
    2870:	2006d7fa 	srli	r3,r4,31
    2874:	defffa04 	addi	sp,sp,-24
    2878:	008000c4 	movi	r2,3
    287c:	dfc00515 	stw	ra,20(sp)
    2880:	dc000415 	stw	r16,16(sp)
    2884:	d8800015 	stw	r2,0(sp)
    2888:	d8c00115 	stw	r3,4(sp)
    288c:	2000081e 	bne	r4,zero,28b0 <__floatsisf+0x40>
    2890:	00800084 	movi	r2,2
    2894:	d8800015 	stw	r2,0(sp)
    2898:	d809883a 	mov	r4,sp
    289c:	00038200 	call	3820 <__pack_f>
    28a0:	dfc00517 	ldw	ra,20(sp)
    28a4:	dc000417 	ldw	r16,16(sp)
    28a8:	dec00604 	addi	sp,sp,24
    28ac:	f800283a 	ret
    28b0:	00800784 	movi	r2,30
    28b4:	1807003a 	cmpeq	r3,r3,zero
    28b8:	d8800215 	stw	r2,8(sp)
    28bc:	18000e1e 	bne	r3,zero,28f8 <__floatsisf+0x88>
    28c0:	00a00034 	movhi	r2,32768
    28c4:	20800e26 	beq	r4,r2,2900 <__floatsisf+0x90>
    28c8:	0121c83a 	sub	r16,zero,r4
    28cc:	8009883a 	mov	r4,r16
    28d0:	dc000315 	stw	r16,12(sp)
    28d4:	00037a00 	call	37a0 <__clzsi2>
    28d8:	117fffc4 	addi	r5,r2,-1
    28dc:	017fee0e 	bge	zero,r5,2898 <__floatsisf+0x28>
    28e0:	d8800217 	ldw	r2,8(sp)
    28e4:	8146983a 	sll	r3,r16,r5
    28e8:	1145c83a 	sub	r2,r2,r5
    28ec:	d8c00315 	stw	r3,12(sp)
    28f0:	d8800215 	stw	r2,8(sp)
    28f4:	003fe806 	br	2898 <__floatsisf+0x28>
    28f8:	2021883a 	mov	r16,r4
    28fc:	003ff306 	br	28cc <__floatsisf+0x5c>
    2900:	00b3c034 	movhi	r2,52992
    2904:	003fe606 	br	28a0 <__floatsisf+0x30>

00002908 <_fpadd_parts>:
    2908:	defff804 	addi	sp,sp,-32
    290c:	dcc00315 	stw	r19,12(sp)
    2910:	2027883a 	mov	r19,r4
    2914:	21000017 	ldw	r4,0(r4)
    2918:	00c00044 	movi	r3,1
    291c:	dd400515 	stw	r21,20(sp)
    2920:	dd000415 	stw	r20,16(sp)
    2924:	ddc00715 	stw	r23,28(sp)
    2928:	dd800615 	stw	r22,24(sp)
    292c:	dc800215 	stw	r18,8(sp)
    2930:	dc400115 	stw	r17,4(sp)
    2934:	dc000015 	stw	r16,0(sp)
    2938:	282b883a 	mov	r21,r5
    293c:	3029883a 	mov	r20,r6
    2940:	1900632e 	bgeu	r3,r4,2ad0 <_fpadd_parts+0x1c8>
    2944:	28800017 	ldw	r2,0(r5)
    2948:	1880812e 	bgeu	r3,r2,2b50 <_fpadd_parts+0x248>
    294c:	00c00104 	movi	r3,4
    2950:	20c0dc26 	beq	r4,r3,2cc4 <_fpadd_parts+0x3bc>
    2954:	10c07e26 	beq	r2,r3,2b50 <_fpadd_parts+0x248>
    2958:	00c00084 	movi	r3,2
    295c:	10c06726 	beq	r2,r3,2afc <_fpadd_parts+0x1f4>
    2960:	20c07b26 	beq	r4,r3,2b50 <_fpadd_parts+0x248>
    2964:	9dc00217 	ldw	r23,8(r19)
    2968:	28c00217 	ldw	r3,8(r5)
    296c:	9c400317 	ldw	r17,12(r19)
    2970:	2bc00317 	ldw	r15,12(r5)
    2974:	b8cdc83a 	sub	r6,r23,r3
    2978:	9c800417 	ldw	r18,16(r19)
    297c:	2c000417 	ldw	r16,16(r5)
    2980:	3009883a 	mov	r4,r6
    2984:	30009716 	blt	r6,zero,2be4 <_fpadd_parts+0x2dc>
    2988:	00800fc4 	movi	r2,63
    298c:	11806b16 	blt	r2,r6,2b3c <_fpadd_parts+0x234>
    2990:	0100a40e 	bge	zero,r4,2c24 <_fpadd_parts+0x31c>
    2994:	35bff804 	addi	r22,r6,-32
    2998:	b000bc16 	blt	r22,zero,2c8c <_fpadd_parts+0x384>
    299c:	8596d83a 	srl	r11,r16,r22
    29a0:	0019883a 	mov	r12,zero
    29a4:	0013883a 	mov	r9,zero
    29a8:	01000044 	movi	r4,1
    29ac:	0015883a 	mov	r10,zero
    29b0:	b000be16 	blt	r22,zero,2cac <_fpadd_parts+0x3a4>
    29b4:	2590983a 	sll	r8,r4,r22
    29b8:	000f883a 	mov	r7,zero
    29bc:	00bfffc4 	movi	r2,-1
    29c0:	3889883a 	add	r4,r7,r2
    29c4:	408b883a 	add	r5,r8,r2
    29c8:	21cd803a 	cmpltu	r6,r4,r7
    29cc:	314b883a 	add	r5,r6,r5
    29d0:	7904703a 	and	r2,r15,r4
    29d4:	8146703a 	and	r3,r16,r5
    29d8:	10c4b03a 	or	r2,r2,r3
    29dc:	10000226 	beq	r2,zero,29e8 <_fpadd_parts+0xe0>
    29e0:	02400044 	movi	r9,1
    29e4:	0015883a 	mov	r10,zero
    29e8:	5a5eb03a 	or	r15,r11,r9
    29ec:	62a0b03a 	or	r16,r12,r10
    29f0:	99400117 	ldw	r5,4(r19)
    29f4:	a8800117 	ldw	r2,4(r21)
    29f8:	28806e26 	beq	r5,r2,2bb4 <_fpadd_parts+0x2ac>
    29fc:	28006626 	beq	r5,zero,2b98 <_fpadd_parts+0x290>
    2a00:	7c45c83a 	sub	r2,r15,r17
    2a04:	7889803a 	cmpltu	r4,r15,r2
    2a08:	8487c83a 	sub	r3,r16,r18
    2a0c:	1909c83a 	sub	r4,r3,r4
    2a10:	100d883a 	mov	r6,r2
    2a14:	200f883a 	mov	r7,r4
    2a18:	38007716 	blt	r7,zero,2bf8 <_fpadd_parts+0x2f0>
    2a1c:	a5c00215 	stw	r23,8(r20)
    2a20:	a1c00415 	stw	r7,16(r20)
    2a24:	a0000115 	stw	zero,4(r20)
    2a28:	a1800315 	stw	r6,12(r20)
    2a2c:	a2000317 	ldw	r8,12(r20)
    2a30:	a2400417 	ldw	r9,16(r20)
    2a34:	00bfffc4 	movi	r2,-1
    2a38:	408b883a 	add	r5,r8,r2
    2a3c:	2a09803a 	cmpltu	r4,r5,r8
    2a40:	488d883a 	add	r6,r9,r2
    2a44:	01c40034 	movhi	r7,4096
    2a48:	39ffffc4 	addi	r7,r7,-1
    2a4c:	218d883a 	add	r6,r4,r6
    2a50:	39801736 	bltu	r7,r6,2ab0 <_fpadd_parts+0x1a8>
    2a54:	31c06526 	beq	r6,r7,2bec <_fpadd_parts+0x2e4>
    2a58:	a3000217 	ldw	r12,8(r20)
    2a5c:	4209883a 	add	r4,r8,r8
    2a60:	00bfffc4 	movi	r2,-1
    2a64:	220f803a 	cmpltu	r7,r4,r8
    2a68:	4a4b883a 	add	r5,r9,r9
    2a6c:	394f883a 	add	r7,r7,r5
    2a70:	2095883a 	add	r10,r4,r2
    2a74:	3897883a 	add	r11,r7,r2
    2a78:	510d803a 	cmpltu	r6,r10,r4
    2a7c:	6099883a 	add	r12,r12,r2
    2a80:	32d7883a 	add	r11,r6,r11
    2a84:	00840034 	movhi	r2,4096
    2a88:	10bfffc4 	addi	r2,r2,-1
    2a8c:	2011883a 	mov	r8,r4
    2a90:	3813883a 	mov	r9,r7
    2a94:	a1000315 	stw	r4,12(r20)
    2a98:	a1c00415 	stw	r7,16(r20)
    2a9c:	a3000215 	stw	r12,8(r20)
    2aa0:	12c00336 	bltu	r2,r11,2ab0 <_fpadd_parts+0x1a8>
    2aa4:	58bfed1e 	bne	r11,r2,2a5c <_fpadd_parts+0x154>
    2aa8:	00bfff84 	movi	r2,-2
    2aac:	12bfeb2e 	bgeu	r2,r10,2a5c <_fpadd_parts+0x154>
    2ab0:	a2800417 	ldw	r10,16(r20)
    2ab4:	008000c4 	movi	r2,3
    2ab8:	00c80034 	movhi	r3,8192
    2abc:	18ffffc4 	addi	r3,r3,-1
    2ac0:	a2400317 	ldw	r9,12(r20)
    2ac4:	a0800015 	stw	r2,0(r20)
    2ac8:	1a802336 	bltu	r3,r10,2b58 <_fpadd_parts+0x250>
    2acc:	a027883a 	mov	r19,r20
    2ad0:	9805883a 	mov	r2,r19
    2ad4:	ddc00717 	ldw	r23,28(sp)
    2ad8:	dd800617 	ldw	r22,24(sp)
    2adc:	dd400517 	ldw	r21,20(sp)
    2ae0:	dd000417 	ldw	r20,16(sp)
    2ae4:	dcc00317 	ldw	r19,12(sp)
    2ae8:	dc800217 	ldw	r18,8(sp)
    2aec:	dc400117 	ldw	r17,4(sp)
    2af0:	dc000017 	ldw	r16,0(sp)
    2af4:	dec00804 	addi	sp,sp,32
    2af8:	f800283a 	ret
    2afc:	20fff41e 	bne	r4,r3,2ad0 <_fpadd_parts+0x1c8>
    2b00:	31000015 	stw	r4,0(r6)
    2b04:	98800117 	ldw	r2,4(r19)
    2b08:	30800115 	stw	r2,4(r6)
    2b0c:	98c00217 	ldw	r3,8(r19)
    2b10:	30c00215 	stw	r3,8(r6)
    2b14:	98800317 	ldw	r2,12(r19)
    2b18:	30800315 	stw	r2,12(r6)
    2b1c:	98c00417 	ldw	r3,16(r19)
    2b20:	30c00415 	stw	r3,16(r6)
    2b24:	98800117 	ldw	r2,4(r19)
    2b28:	28c00117 	ldw	r3,4(r5)
    2b2c:	3027883a 	mov	r19,r6
    2b30:	10c4703a 	and	r2,r2,r3
    2b34:	30800115 	stw	r2,4(r6)
    2b38:	003fe506 	br	2ad0 <_fpadd_parts+0x1c8>
    2b3c:	1dc02616 	blt	r3,r23,2bd8 <_fpadd_parts+0x2d0>
    2b40:	0023883a 	mov	r17,zero
    2b44:	182f883a 	mov	r23,r3
    2b48:	0025883a 	mov	r18,zero
    2b4c:	003fa806 	br	29f0 <_fpadd_parts+0xe8>
    2b50:	a827883a 	mov	r19,r21
    2b54:	003fde06 	br	2ad0 <_fpadd_parts+0x1c8>
    2b58:	01800044 	movi	r6,1
    2b5c:	500497fa 	slli	r2,r10,31
    2b60:	4808d07a 	srli	r4,r9,1
    2b64:	518ad83a 	srl	r5,r10,r6
    2b68:	a2000217 	ldw	r8,8(r20)
    2b6c:	1108b03a 	or	r4,r2,r4
    2b70:	0007883a 	mov	r3,zero
    2b74:	4984703a 	and	r2,r9,r6
    2b78:	208cb03a 	or	r6,r4,r2
    2b7c:	28ceb03a 	or	r7,r5,r3
    2b80:	42000044 	addi	r8,r8,1
    2b84:	a027883a 	mov	r19,r20
    2b88:	a1c00415 	stw	r7,16(r20)
    2b8c:	a2000215 	stw	r8,8(r20)
    2b90:	a1800315 	stw	r6,12(r20)
    2b94:	003fce06 	br	2ad0 <_fpadd_parts+0x1c8>
    2b98:	8bc5c83a 	sub	r2,r17,r15
    2b9c:	8889803a 	cmpltu	r4,r17,r2
    2ba0:	9407c83a 	sub	r3,r18,r16
    2ba4:	1909c83a 	sub	r4,r3,r4
    2ba8:	100d883a 	mov	r6,r2
    2bac:	200f883a 	mov	r7,r4
    2bb0:	003f9906 	br	2a18 <_fpadd_parts+0x110>
    2bb4:	7c45883a 	add	r2,r15,r17
    2bb8:	13c9803a 	cmpltu	r4,r2,r15
    2bbc:	8487883a 	add	r3,r16,r18
    2bc0:	20c9883a 	add	r4,r4,r3
    2bc4:	a1400115 	stw	r5,4(r20)
    2bc8:	a5c00215 	stw	r23,8(r20)
    2bcc:	a0800315 	stw	r2,12(r20)
    2bd0:	a1000415 	stw	r4,16(r20)
    2bd4:	003fb606 	br	2ab0 <_fpadd_parts+0x1a8>
    2bd8:	001f883a 	mov	r15,zero
    2bdc:	0021883a 	mov	r16,zero
    2be0:	003f8306 	br	29f0 <_fpadd_parts+0xe8>
    2be4:	018dc83a 	sub	r6,zero,r6
    2be8:	003f6706 	br	2988 <_fpadd_parts+0x80>
    2bec:	00bfff84 	movi	r2,-2
    2bf0:	117faf36 	bltu	r2,r5,2ab0 <_fpadd_parts+0x1a8>
    2bf4:	003f9806 	br	2a58 <_fpadd_parts+0x150>
    2bf8:	0005883a 	mov	r2,zero
    2bfc:	1189c83a 	sub	r4,r2,r6
    2c00:	1105803a 	cmpltu	r2,r2,r4
    2c04:	01cbc83a 	sub	r5,zero,r7
    2c08:	2885c83a 	sub	r2,r5,r2
    2c0c:	01800044 	movi	r6,1
    2c10:	a1800115 	stw	r6,4(r20)
    2c14:	a5c00215 	stw	r23,8(r20)
    2c18:	a1000315 	stw	r4,12(r20)
    2c1c:	a0800415 	stw	r2,16(r20)
    2c20:	003f8206 	br	2a2c <_fpadd_parts+0x124>
    2c24:	203f7226 	beq	r4,zero,29f0 <_fpadd_parts+0xe8>
    2c28:	35bff804 	addi	r22,r6,-32
    2c2c:	b9af883a 	add	r23,r23,r6
    2c30:	b0003116 	blt	r22,zero,2cf8 <_fpadd_parts+0x3f0>
    2c34:	959ad83a 	srl	r13,r18,r22
    2c38:	001d883a 	mov	r14,zero
    2c3c:	000f883a 	mov	r7,zero
    2c40:	01000044 	movi	r4,1
    2c44:	0011883a 	mov	r8,zero
    2c48:	b0002516 	blt	r22,zero,2ce0 <_fpadd_parts+0x3d8>
    2c4c:	2594983a 	sll	r10,r4,r22
    2c50:	0013883a 	mov	r9,zero
    2c54:	00bfffc4 	movi	r2,-1
    2c58:	4889883a 	add	r4,r9,r2
    2c5c:	508b883a 	add	r5,r10,r2
    2c60:	224d803a 	cmpltu	r6,r4,r9
    2c64:	314b883a 	add	r5,r6,r5
    2c68:	8904703a 	and	r2,r17,r4
    2c6c:	9146703a 	and	r3,r18,r5
    2c70:	10c4b03a 	or	r2,r2,r3
    2c74:	10000226 	beq	r2,zero,2c80 <_fpadd_parts+0x378>
    2c78:	01c00044 	movi	r7,1
    2c7c:	0011883a 	mov	r8,zero
    2c80:	69e2b03a 	or	r17,r13,r7
    2c84:	7224b03a 	or	r18,r14,r8
    2c88:	003f5906 	br	29f0 <_fpadd_parts+0xe8>
    2c8c:	8407883a 	add	r3,r16,r16
    2c90:	008007c4 	movi	r2,31
    2c94:	1185c83a 	sub	r2,r2,r6
    2c98:	1886983a 	sll	r3,r3,r2
    2c9c:	7996d83a 	srl	r11,r15,r6
    2ca0:	8198d83a 	srl	r12,r16,r6
    2ca4:	1ad6b03a 	or	r11,r3,r11
    2ca8:	003f3e06 	br	29a4 <_fpadd_parts+0x9c>
    2cac:	2006d07a 	srli	r3,r4,1
    2cb0:	008007c4 	movi	r2,31
    2cb4:	1185c83a 	sub	r2,r2,r6
    2cb8:	1890d83a 	srl	r8,r3,r2
    2cbc:	218e983a 	sll	r7,r4,r6
    2cc0:	003f3e06 	br	29bc <_fpadd_parts+0xb4>
    2cc4:	113f821e 	bne	r2,r4,2ad0 <_fpadd_parts+0x1c8>
    2cc8:	28c00117 	ldw	r3,4(r5)
    2ccc:	98800117 	ldw	r2,4(r19)
    2cd0:	10ff7f26 	beq	r2,r3,2ad0 <_fpadd_parts+0x1c8>
    2cd4:	04c00074 	movhi	r19,1
    2cd8:	9cc01904 	addi	r19,r19,100
    2cdc:	003f7c06 	br	2ad0 <_fpadd_parts+0x1c8>
    2ce0:	2006d07a 	srli	r3,r4,1
    2ce4:	008007c4 	movi	r2,31
    2ce8:	1185c83a 	sub	r2,r2,r6
    2cec:	1894d83a 	srl	r10,r3,r2
    2cf0:	2192983a 	sll	r9,r4,r6
    2cf4:	003fd706 	br	2c54 <_fpadd_parts+0x34c>
    2cf8:	9487883a 	add	r3,r18,r18
    2cfc:	008007c4 	movi	r2,31
    2d00:	1185c83a 	sub	r2,r2,r6
    2d04:	1886983a 	sll	r3,r3,r2
    2d08:	899ad83a 	srl	r13,r17,r6
    2d0c:	919cd83a 	srl	r14,r18,r6
    2d10:	1b5ab03a 	or	r13,r3,r13
    2d14:	003fc906 	br	2c3c <_fpadd_parts+0x334>

00002d18 <__subdf3>:
    2d18:	deffea04 	addi	sp,sp,-88
    2d1c:	dcc01415 	stw	r19,80(sp)
    2d20:	dcc00404 	addi	r19,sp,16
    2d24:	2011883a 	mov	r8,r4
    2d28:	2813883a 	mov	r9,r5
    2d2c:	dc401315 	stw	r17,76(sp)
    2d30:	d809883a 	mov	r4,sp
    2d34:	980b883a 	mov	r5,r19
    2d38:	dc400904 	addi	r17,sp,36
    2d3c:	dfc01515 	stw	ra,84(sp)
    2d40:	da400115 	stw	r9,4(sp)
    2d44:	d9c00315 	stw	r7,12(sp)
    2d48:	da000015 	stw	r8,0(sp)
    2d4c:	d9800215 	stw	r6,8(sp)
    2d50:	0003e040 	call	3e04 <__unpack_d>
    2d54:	d9000204 	addi	r4,sp,8
    2d58:	880b883a 	mov	r5,r17
    2d5c:	0003e040 	call	3e04 <__unpack_d>
    2d60:	d8800a17 	ldw	r2,40(sp)
    2d64:	880b883a 	mov	r5,r17
    2d68:	9809883a 	mov	r4,r19
    2d6c:	d9800e04 	addi	r6,sp,56
    2d70:	1080005c 	xori	r2,r2,1
    2d74:	d8800a15 	stw	r2,40(sp)
    2d78:	00029080 	call	2908 <_fpadd_parts>
    2d7c:	1009883a 	mov	r4,r2
    2d80:	0003af00 	call	3af0 <__pack_d>
    2d84:	dfc01517 	ldw	ra,84(sp)
    2d88:	dcc01417 	ldw	r19,80(sp)
    2d8c:	dc401317 	ldw	r17,76(sp)
    2d90:	dec01604 	addi	sp,sp,88
    2d94:	f800283a 	ret

00002d98 <__adddf3>:
    2d98:	deffea04 	addi	sp,sp,-88
    2d9c:	dcc01415 	stw	r19,80(sp)
    2da0:	dcc00404 	addi	r19,sp,16
    2da4:	2011883a 	mov	r8,r4
    2da8:	2813883a 	mov	r9,r5
    2dac:	dc401315 	stw	r17,76(sp)
    2db0:	d809883a 	mov	r4,sp
    2db4:	980b883a 	mov	r5,r19
    2db8:	dc400904 	addi	r17,sp,36
    2dbc:	dfc01515 	stw	ra,84(sp)
    2dc0:	da400115 	stw	r9,4(sp)
    2dc4:	d9c00315 	stw	r7,12(sp)
    2dc8:	da000015 	stw	r8,0(sp)
    2dcc:	d9800215 	stw	r6,8(sp)
    2dd0:	0003e040 	call	3e04 <__unpack_d>
    2dd4:	d9000204 	addi	r4,sp,8
    2dd8:	880b883a 	mov	r5,r17
    2ddc:	0003e040 	call	3e04 <__unpack_d>
    2de0:	d9800e04 	addi	r6,sp,56
    2de4:	9809883a 	mov	r4,r19
    2de8:	880b883a 	mov	r5,r17
    2dec:	00029080 	call	2908 <_fpadd_parts>
    2df0:	1009883a 	mov	r4,r2
    2df4:	0003af00 	call	3af0 <__pack_d>
    2df8:	dfc01517 	ldw	ra,84(sp)
    2dfc:	dcc01417 	ldw	r19,80(sp)
    2e00:	dc401317 	ldw	r17,76(sp)
    2e04:	dec01604 	addi	sp,sp,88
    2e08:	f800283a 	ret

00002e0c <__muldf3>:
    2e0c:	deffe004 	addi	sp,sp,-128
    2e10:	dc401815 	stw	r17,96(sp)
    2e14:	dc400404 	addi	r17,sp,16
    2e18:	2011883a 	mov	r8,r4
    2e1c:	2813883a 	mov	r9,r5
    2e20:	dc001715 	stw	r16,92(sp)
    2e24:	d809883a 	mov	r4,sp
    2e28:	880b883a 	mov	r5,r17
    2e2c:	dc000904 	addi	r16,sp,36
    2e30:	dfc01f15 	stw	ra,124(sp)
    2e34:	da400115 	stw	r9,4(sp)
    2e38:	d9c00315 	stw	r7,12(sp)
    2e3c:	da000015 	stw	r8,0(sp)
    2e40:	d9800215 	stw	r6,8(sp)
    2e44:	ddc01e15 	stw	r23,120(sp)
    2e48:	dd801d15 	stw	r22,116(sp)
    2e4c:	dd401c15 	stw	r21,112(sp)
    2e50:	dd001b15 	stw	r20,108(sp)
    2e54:	dcc01a15 	stw	r19,104(sp)
    2e58:	dc801915 	stw	r18,100(sp)
    2e5c:	0003e040 	call	3e04 <__unpack_d>
    2e60:	d9000204 	addi	r4,sp,8
    2e64:	800b883a 	mov	r5,r16
    2e68:	0003e040 	call	3e04 <__unpack_d>
    2e6c:	d9000417 	ldw	r4,16(sp)
    2e70:	00800044 	movi	r2,1
    2e74:	1100102e 	bgeu	r2,r4,2eb8 <__muldf3+0xac>
    2e78:	d8c00917 	ldw	r3,36(sp)
    2e7c:	10c0062e 	bgeu	r2,r3,2e98 <__muldf3+0x8c>
    2e80:	00800104 	movi	r2,4
    2e84:	20800a26 	beq	r4,r2,2eb0 <__muldf3+0xa4>
    2e88:	1880cc26 	beq	r3,r2,31bc <__muldf3+0x3b0>
    2e8c:	00800084 	movi	r2,2
    2e90:	20800926 	beq	r4,r2,2eb8 <__muldf3+0xac>
    2e94:	1880191e 	bne	r3,r2,2efc <__muldf3+0xf0>
    2e98:	d8c00a17 	ldw	r3,40(sp)
    2e9c:	d8800517 	ldw	r2,20(sp)
    2ea0:	8009883a 	mov	r4,r16
    2ea4:	10c4c03a 	cmpne	r2,r2,r3
    2ea8:	d8800a15 	stw	r2,40(sp)
    2eac:	00000706 	br	2ecc <__muldf3+0xc0>
    2eb0:	00800084 	movi	r2,2
    2eb4:	1880c326 	beq	r3,r2,31c4 <__muldf3+0x3b8>
    2eb8:	d8800517 	ldw	r2,20(sp)
    2ebc:	d8c00a17 	ldw	r3,40(sp)
    2ec0:	8809883a 	mov	r4,r17
    2ec4:	10c4c03a 	cmpne	r2,r2,r3
    2ec8:	d8800515 	stw	r2,20(sp)
    2ecc:	0003af00 	call	3af0 <__pack_d>
    2ed0:	dfc01f17 	ldw	ra,124(sp)
    2ed4:	ddc01e17 	ldw	r23,120(sp)
    2ed8:	dd801d17 	ldw	r22,116(sp)
    2edc:	dd401c17 	ldw	r21,112(sp)
    2ee0:	dd001b17 	ldw	r20,108(sp)
    2ee4:	dcc01a17 	ldw	r19,104(sp)
    2ee8:	dc801917 	ldw	r18,100(sp)
    2eec:	dc401817 	ldw	r17,96(sp)
    2ef0:	dc001717 	ldw	r16,92(sp)
    2ef4:	dec02004 	addi	sp,sp,128
    2ef8:	f800283a 	ret
    2efc:	dd800717 	ldw	r22,28(sp)
    2f00:	dc800c17 	ldw	r18,48(sp)
    2f04:	002b883a 	mov	r21,zero
    2f08:	0023883a 	mov	r17,zero
    2f0c:	a80b883a 	mov	r5,r21
    2f10:	b00d883a 	mov	r6,r22
    2f14:	880f883a 	mov	r7,r17
    2f18:	ddc00817 	ldw	r23,32(sp)
    2f1c:	dcc00d17 	ldw	r19,52(sp)
    2f20:	9009883a 	mov	r4,r18
    2f24:	00037080 	call	3708 <__muldi3>
    2f28:	001b883a 	mov	r13,zero
    2f2c:	680f883a 	mov	r7,r13
    2f30:	b009883a 	mov	r4,r22
    2f34:	000b883a 	mov	r5,zero
    2f38:	980d883a 	mov	r6,r19
    2f3c:	b82d883a 	mov	r22,r23
    2f40:	002f883a 	mov	r23,zero
    2f44:	db401615 	stw	r13,88(sp)
    2f48:	d8801315 	stw	r2,76(sp)
    2f4c:	d8c01415 	stw	r3,80(sp)
    2f50:	dcc01515 	stw	r19,84(sp)
    2f54:	00037080 	call	3708 <__muldi3>
    2f58:	b00d883a 	mov	r6,r22
    2f5c:	000b883a 	mov	r5,zero
    2f60:	9009883a 	mov	r4,r18
    2f64:	b80f883a 	mov	r7,r23
    2f68:	1021883a 	mov	r16,r2
    2f6c:	1823883a 	mov	r17,r3
    2f70:	00037080 	call	3708 <__muldi3>
    2f74:	8085883a 	add	r2,r16,r2
    2f78:	140d803a 	cmpltu	r6,r2,r16
    2f7c:	88c7883a 	add	r3,r17,r3
    2f80:	30cd883a 	add	r6,r6,r3
    2f84:	1029883a 	mov	r20,r2
    2f88:	302b883a 	mov	r21,r6
    2f8c:	da801317 	ldw	r10,76(sp)
    2f90:	dac01417 	ldw	r11,80(sp)
    2f94:	db001517 	ldw	r12,84(sp)
    2f98:	db401617 	ldw	r13,88(sp)
    2f9c:	3440612e 	bgeu	r6,r17,3124 <__muldf3+0x318>
    2fa0:	0009883a 	mov	r4,zero
    2fa4:	5105883a 	add	r2,r10,r4
    2fa8:	128d803a 	cmpltu	r6,r2,r10
    2fac:	5d07883a 	add	r3,r11,r20
    2fb0:	30cd883a 	add	r6,r6,r3
    2fb4:	0021883a 	mov	r16,zero
    2fb8:	04400044 	movi	r17,1
    2fbc:	1025883a 	mov	r18,r2
    2fc0:	3027883a 	mov	r19,r6
    2fc4:	32c06236 	bltu	r6,r11,3150 <__muldf3+0x344>
    2fc8:	59807a26 	beq	r11,r6,31b4 <__muldf3+0x3a8>
    2fcc:	680b883a 	mov	r5,r13
    2fd0:	b80f883a 	mov	r7,r23
    2fd4:	6009883a 	mov	r4,r12
    2fd8:	b00d883a 	mov	r6,r22
    2fdc:	00037080 	call	3708 <__muldi3>
    2fe0:	1009883a 	mov	r4,r2
    2fe4:	000f883a 	mov	r7,zero
    2fe8:	1545883a 	add	r2,r2,r21
    2fec:	1111803a 	cmpltu	r8,r2,r4
    2ff0:	19c7883a 	add	r3,r3,r7
    2ff4:	40c7883a 	add	r3,r8,r3
    2ff8:	88cb883a 	add	r5,r17,r3
    2ffc:	d8c00617 	ldw	r3,24(sp)
    3000:	8089883a 	add	r4,r16,r2
    3004:	d8800b17 	ldw	r2,44(sp)
    3008:	18c00104 	addi	r3,r3,4
    300c:	240d803a 	cmpltu	r6,r4,r16
    3010:	10c7883a 	add	r3,r2,r3
    3014:	2013883a 	mov	r9,r4
    3018:	d8800a17 	ldw	r2,40(sp)
    301c:	d9000517 	ldw	r4,20(sp)
    3020:	314d883a 	add	r6,r6,r5
    3024:	3015883a 	mov	r10,r6
    3028:	2088c03a 	cmpne	r4,r4,r2
    302c:	00880034 	movhi	r2,8192
    3030:	10bfffc4 	addi	r2,r2,-1
    3034:	d9000f15 	stw	r4,60(sp)
    3038:	d8c01015 	stw	r3,64(sp)
    303c:	1180162e 	bgeu	r2,r6,3098 <__muldf3+0x28c>
    3040:	1811883a 	mov	r8,r3
    3044:	101f883a 	mov	r15,r2
    3048:	980497fa 	slli	r2,r19,31
    304c:	9016d07a 	srli	r11,r18,1
    3050:	500697fa 	slli	r3,r10,31
    3054:	480cd07a 	srli	r6,r9,1
    3058:	500ed07a 	srli	r7,r10,1
    305c:	12d6b03a 	or	r11,r2,r11
    3060:	00800044 	movi	r2,1
    3064:	198cb03a 	or	r6,r3,r6
    3068:	4888703a 	and	r4,r9,r2
    306c:	9818d07a 	srli	r12,r19,1
    3070:	001b883a 	mov	r13,zero
    3074:	03a00034 	movhi	r14,32768
    3078:	3013883a 	mov	r9,r6
    307c:	3815883a 	mov	r10,r7
    3080:	4091883a 	add	r8,r8,r2
    3084:	20000226 	beq	r4,zero,3090 <__muldf3+0x284>
    3088:	5b64b03a 	or	r18,r11,r13
    308c:	63a6b03a 	or	r19,r12,r14
    3090:	7abfed36 	bltu	r15,r10,3048 <__muldf3+0x23c>
    3094:	da001015 	stw	r8,64(sp)
    3098:	00840034 	movhi	r2,4096
    309c:	10bfffc4 	addi	r2,r2,-1
    30a0:	12801436 	bltu	r2,r10,30f4 <__muldf3+0x2e8>
    30a4:	da001017 	ldw	r8,64(sp)
    30a8:	101f883a 	mov	r15,r2
    30ac:	4a45883a 	add	r2,r9,r9
    30b0:	124d803a 	cmpltu	r6,r2,r9
    30b4:	5287883a 	add	r3,r10,r10
    30b8:	9497883a 	add	r11,r18,r18
    30bc:	5c8f803a 	cmpltu	r7,r11,r18
    30c0:	9cd9883a 	add	r12,r19,r19
    30c4:	01000044 	movi	r4,1
    30c8:	30cd883a 	add	r6,r6,r3
    30cc:	3b0f883a 	add	r7,r7,r12
    30d0:	423fffc4 	addi	r8,r8,-1
    30d4:	1013883a 	mov	r9,r2
    30d8:	3015883a 	mov	r10,r6
    30dc:	111ab03a 	or	r13,r2,r4
    30e0:	98003016 	blt	r19,zero,31a4 <__muldf3+0x398>
    30e4:	5825883a 	mov	r18,r11
    30e8:	3827883a 	mov	r19,r7
    30ec:	7abfef2e 	bgeu	r15,r10,30ac <__muldf3+0x2a0>
    30f0:	da001015 	stw	r8,64(sp)
    30f4:	00803fc4 	movi	r2,255
    30f8:	488e703a 	and	r7,r9,r2
    30fc:	00802004 	movi	r2,128
    3100:	0007883a 	mov	r3,zero
    3104:	0011883a 	mov	r8,zero
    3108:	38801826 	beq	r7,r2,316c <__muldf3+0x360>
    310c:	008000c4 	movi	r2,3
    3110:	d9000e04 	addi	r4,sp,56
    3114:	da801215 	stw	r10,72(sp)
    3118:	d8800e15 	stw	r2,56(sp)
    311c:	da401115 	stw	r9,68(sp)
    3120:	003f6a06 	br	2ecc <__muldf3+0xc0>
    3124:	89802126 	beq	r17,r6,31ac <__muldf3+0x3a0>
    3128:	0009883a 	mov	r4,zero
    312c:	5105883a 	add	r2,r10,r4
    3130:	128d803a 	cmpltu	r6,r2,r10
    3134:	5d07883a 	add	r3,r11,r20
    3138:	30cd883a 	add	r6,r6,r3
    313c:	0021883a 	mov	r16,zero
    3140:	0023883a 	mov	r17,zero
    3144:	1025883a 	mov	r18,r2
    3148:	3027883a 	mov	r19,r6
    314c:	32ff9e2e 	bgeu	r6,r11,2fc8 <__muldf3+0x1bc>
    3150:	00800044 	movi	r2,1
    3154:	8089883a 	add	r4,r16,r2
    3158:	240d803a 	cmpltu	r6,r4,r16
    315c:	344d883a 	add	r6,r6,r17
    3160:	2021883a 	mov	r16,r4
    3164:	3023883a 	mov	r17,r6
    3168:	003f9806 	br	2fcc <__muldf3+0x1c0>
    316c:	403fe71e 	bne	r8,zero,310c <__muldf3+0x300>
    3170:	01004004 	movi	r4,256
    3174:	4904703a 	and	r2,r9,r4
    3178:	10c4b03a 	or	r2,r2,r3
    317c:	103fe31e 	bne	r2,zero,310c <__muldf3+0x300>
    3180:	94c4b03a 	or	r2,r18,r19
    3184:	103fe126 	beq	r2,zero,310c <__muldf3+0x300>
    3188:	49c5883a 	add	r2,r9,r7
    318c:	1251803a 	cmpltu	r8,r2,r9
    3190:	4291883a 	add	r8,r8,r10
    3194:	013fc004 	movi	r4,-256
    3198:	1112703a 	and	r9,r2,r4
    319c:	4015883a 	mov	r10,r8
    31a0:	003fda06 	br	310c <__muldf3+0x300>
    31a4:	6813883a 	mov	r9,r13
    31a8:	003fce06 	br	30e4 <__muldf3+0x2d8>
    31ac:	143f7c36 	bltu	r2,r16,2fa0 <__muldf3+0x194>
    31b0:	003fdd06 	br	3128 <__muldf3+0x31c>
    31b4:	12bf852e 	bgeu	r2,r10,2fcc <__muldf3+0x1c0>
    31b8:	003fe506 	br	3150 <__muldf3+0x344>
    31bc:	00800084 	movi	r2,2
    31c0:	20bf351e 	bne	r4,r2,2e98 <__muldf3+0x8c>
    31c4:	01000074 	movhi	r4,1
    31c8:	21001904 	addi	r4,r4,100
    31cc:	003f3f06 	br	2ecc <__muldf3+0xc0>

000031d0 <__divdf3>:
    31d0:	deffed04 	addi	sp,sp,-76
    31d4:	dcc01115 	stw	r19,68(sp)
    31d8:	dcc00404 	addi	r19,sp,16
    31dc:	2011883a 	mov	r8,r4
    31e0:	2813883a 	mov	r9,r5
    31e4:	dc000e15 	stw	r16,56(sp)
    31e8:	d809883a 	mov	r4,sp
    31ec:	980b883a 	mov	r5,r19
    31f0:	dc000904 	addi	r16,sp,36
    31f4:	dfc01215 	stw	ra,72(sp)
    31f8:	da400115 	stw	r9,4(sp)
    31fc:	d9c00315 	stw	r7,12(sp)
    3200:	da000015 	stw	r8,0(sp)
    3204:	d9800215 	stw	r6,8(sp)
    3208:	dc801015 	stw	r18,64(sp)
    320c:	dc400f15 	stw	r17,60(sp)
    3210:	0003e040 	call	3e04 <__unpack_d>
    3214:	d9000204 	addi	r4,sp,8
    3218:	800b883a 	mov	r5,r16
    321c:	0003e040 	call	3e04 <__unpack_d>
    3220:	d9000417 	ldw	r4,16(sp)
    3224:	00800044 	movi	r2,1
    3228:	11000b2e 	bgeu	r2,r4,3258 <__divdf3+0x88>
    322c:	d9400917 	ldw	r5,36(sp)
    3230:	1140762e 	bgeu	r2,r5,340c <__divdf3+0x23c>
    3234:	d8800517 	ldw	r2,20(sp)
    3238:	d8c00a17 	ldw	r3,40(sp)
    323c:	01800104 	movi	r6,4
    3240:	10c4f03a 	xor	r2,r2,r3
    3244:	d8800515 	stw	r2,20(sp)
    3248:	21800226 	beq	r4,r6,3254 <__divdf3+0x84>
    324c:	00800084 	movi	r2,2
    3250:	2080141e 	bne	r4,r2,32a4 <__divdf3+0xd4>
    3254:	29000926 	beq	r5,r4,327c <__divdf3+0xac>
    3258:	9809883a 	mov	r4,r19
    325c:	0003af00 	call	3af0 <__pack_d>
    3260:	dfc01217 	ldw	ra,72(sp)
    3264:	dcc01117 	ldw	r19,68(sp)
    3268:	dc801017 	ldw	r18,64(sp)
    326c:	dc400f17 	ldw	r17,60(sp)
    3270:	dc000e17 	ldw	r16,56(sp)
    3274:	dec01304 	addi	sp,sp,76
    3278:	f800283a 	ret
    327c:	01000074 	movhi	r4,1
    3280:	21001904 	addi	r4,r4,100
    3284:	0003af00 	call	3af0 <__pack_d>
    3288:	dfc01217 	ldw	ra,72(sp)
    328c:	dcc01117 	ldw	r19,68(sp)
    3290:	dc801017 	ldw	r18,64(sp)
    3294:	dc400f17 	ldw	r17,60(sp)
    3298:	dc000e17 	ldw	r16,56(sp)
    329c:	dec01304 	addi	sp,sp,76
    32a0:	f800283a 	ret
    32a4:	29805b26 	beq	r5,r6,3414 <__divdf3+0x244>
    32a8:	28802d26 	beq	r5,r2,3360 <__divdf3+0x190>
    32ac:	d8c00617 	ldw	r3,24(sp)
    32b0:	d8800b17 	ldw	r2,44(sp)
    32b4:	d9c00817 	ldw	r7,32(sp)
    32b8:	dc400d17 	ldw	r17,52(sp)
    32bc:	188bc83a 	sub	r5,r3,r2
    32c0:	d9800717 	ldw	r6,28(sp)
    32c4:	dc000c17 	ldw	r16,48(sp)
    32c8:	d9400615 	stw	r5,24(sp)
    32cc:	3c403836 	bltu	r7,r17,33b0 <__divdf3+0x1e0>
    32d0:	89c03626 	beq	r17,r7,33ac <__divdf3+0x1dc>
    32d4:	0015883a 	mov	r10,zero
    32d8:	001d883a 	mov	r14,zero
    32dc:	02c40034 	movhi	r11,4096
    32e0:	001f883a 	mov	r15,zero
    32e4:	003f883a 	mov	ra,zero
    32e8:	04800f44 	movi	r18,61
    32ec:	00000f06 	br	332c <__divdf3+0x15c>
    32f0:	601d883a 	mov	r14,r12
    32f4:	681f883a 	mov	r15,r13
    32f8:	400d883a 	mov	r6,r8
    32fc:	100f883a 	mov	r7,r2
    3300:	3191883a 	add	r8,r6,r6
    3304:	5808d07a 	srli	r4,r11,1
    3308:	4185803a 	cmpltu	r2,r8,r6
    330c:	39d3883a 	add	r9,r7,r7
    3310:	28c6b03a 	or	r3,r5,r3
    3314:	1245883a 	add	r2,r2,r9
    3318:	1815883a 	mov	r10,r3
    331c:	2017883a 	mov	r11,r4
    3320:	400d883a 	mov	r6,r8
    3324:	100f883a 	mov	r7,r2
    3328:	fc801726 	beq	ra,r18,3388 <__divdf3+0x1b8>
    332c:	580a97fa 	slli	r5,r11,31
    3330:	5006d07a 	srli	r3,r10,1
    3334:	ffc00044 	addi	ra,ra,1
    3338:	3c7ff136 	bltu	r7,r17,3300 <__divdf3+0x130>
    333c:	3411c83a 	sub	r8,r6,r16
    3340:	3205803a 	cmpltu	r2,r6,r8
    3344:	3c53c83a 	sub	r9,r7,r17
    3348:	7298b03a 	or	r12,r14,r10
    334c:	7adab03a 	or	r13,r15,r11
    3350:	4885c83a 	sub	r2,r9,r2
    3354:	89ffe61e 	bne	r17,r7,32f0 <__divdf3+0x120>
    3358:	343fe936 	bltu	r6,r16,3300 <__divdf3+0x130>
    335c:	003fe406 	br	32f0 <__divdf3+0x120>
    3360:	9809883a 	mov	r4,r19
    3364:	d9800415 	stw	r6,16(sp)
    3368:	0003af00 	call	3af0 <__pack_d>
    336c:	dfc01217 	ldw	ra,72(sp)
    3370:	dcc01117 	ldw	r19,68(sp)
    3374:	dc801017 	ldw	r18,64(sp)
    3378:	dc400f17 	ldw	r17,60(sp)
    337c:	dc000e17 	ldw	r16,56(sp)
    3380:	dec01304 	addi	sp,sp,76
    3384:	f800283a 	ret
    3388:	00803fc4 	movi	r2,255
    338c:	7090703a 	and	r8,r14,r2
    3390:	00802004 	movi	r2,128
    3394:	0007883a 	mov	r3,zero
    3398:	0013883a 	mov	r9,zero
    339c:	40800d26 	beq	r8,r2,33d4 <__divdf3+0x204>
    33a0:	dbc00815 	stw	r15,32(sp)
    33a4:	db800715 	stw	r14,28(sp)
    33a8:	003fab06 	br	3258 <__divdf3+0x88>
    33ac:	343fc92e 	bgeu	r6,r16,32d4 <__divdf3+0x104>
    33b0:	3185883a 	add	r2,r6,r6
    33b4:	1189803a 	cmpltu	r4,r2,r6
    33b8:	39c7883a 	add	r3,r7,r7
    33bc:	20c9883a 	add	r4,r4,r3
    33c0:	297fffc4 	addi	r5,r5,-1
    33c4:	100d883a 	mov	r6,r2
    33c8:	200f883a 	mov	r7,r4
    33cc:	d9400615 	stw	r5,24(sp)
    33d0:	003fc006 	br	32d4 <__divdf3+0x104>
    33d4:	483ff21e 	bne	r9,zero,33a0 <__divdf3+0x1d0>
    33d8:	01004004 	movi	r4,256
    33dc:	7104703a 	and	r2,r14,r4
    33e0:	10c4b03a 	or	r2,r2,r3
    33e4:	103fee1e 	bne	r2,zero,33a0 <__divdf3+0x1d0>
    33e8:	31c4b03a 	or	r2,r6,r7
    33ec:	103fec26 	beq	r2,zero,33a0 <__divdf3+0x1d0>
    33f0:	7205883a 	add	r2,r14,r8
    33f4:	1391803a 	cmpltu	r8,r2,r14
    33f8:	43d1883a 	add	r8,r8,r15
    33fc:	013fc004 	movi	r4,-256
    3400:	111c703a 	and	r14,r2,r4
    3404:	401f883a 	mov	r15,r8
    3408:	003fe506 	br	33a0 <__divdf3+0x1d0>
    340c:	8009883a 	mov	r4,r16
    3410:	003f9206 	br	325c <__divdf3+0x8c>
    3414:	9809883a 	mov	r4,r19
    3418:	d8000715 	stw	zero,28(sp)
    341c:	d8000815 	stw	zero,32(sp)
    3420:	d8000615 	stw	zero,24(sp)
    3424:	003f8d06 	br	325c <__divdf3+0x8c>

00003428 <__gtdf2>:
    3428:	deffef04 	addi	sp,sp,-68
    342c:	dc400f15 	stw	r17,60(sp)
    3430:	dc400404 	addi	r17,sp,16
    3434:	2005883a 	mov	r2,r4
    3438:	2807883a 	mov	r3,r5
    343c:	dc000e15 	stw	r16,56(sp)
    3440:	d809883a 	mov	r4,sp
    3444:	880b883a 	mov	r5,r17
    3448:	dc000904 	addi	r16,sp,36
    344c:	d8c00115 	stw	r3,4(sp)
    3450:	d8800015 	stw	r2,0(sp)
    3454:	d9800215 	stw	r6,8(sp)
    3458:	dfc01015 	stw	ra,64(sp)
    345c:	d9c00315 	stw	r7,12(sp)
    3460:	0003e040 	call	3e04 <__unpack_d>
    3464:	d9000204 	addi	r4,sp,8
    3468:	800b883a 	mov	r5,r16
    346c:	0003e040 	call	3e04 <__unpack_d>
    3470:	d8800417 	ldw	r2,16(sp)
    3474:	00c00044 	movi	r3,1
    3478:	01bfffc4 	movi	r6,-1
    347c:	1880062e 	bgeu	r3,r2,3498 <__gtdf2+0x70>
    3480:	d8800917 	ldw	r2,36(sp)
    3484:	8809883a 	mov	r4,r17
    3488:	800b883a 	mov	r5,r16
    348c:	1880022e 	bgeu	r3,r2,3498 <__gtdf2+0x70>
    3490:	0003f3c0 	call	3f3c <__fpcmp_parts_d>
    3494:	100d883a 	mov	r6,r2
    3498:	3005883a 	mov	r2,r6
    349c:	dfc01017 	ldw	ra,64(sp)
    34a0:	dc400f17 	ldw	r17,60(sp)
    34a4:	dc000e17 	ldw	r16,56(sp)
    34a8:	dec01104 	addi	sp,sp,68
    34ac:	f800283a 	ret

000034b0 <__ltdf2>:
    34b0:	deffef04 	addi	sp,sp,-68
    34b4:	dc400f15 	stw	r17,60(sp)
    34b8:	dc400404 	addi	r17,sp,16
    34bc:	2005883a 	mov	r2,r4
    34c0:	2807883a 	mov	r3,r5
    34c4:	dc000e15 	stw	r16,56(sp)
    34c8:	d809883a 	mov	r4,sp
    34cc:	880b883a 	mov	r5,r17
    34d0:	dc000904 	addi	r16,sp,36
    34d4:	d8c00115 	stw	r3,4(sp)
    34d8:	d8800015 	stw	r2,0(sp)
    34dc:	d9800215 	stw	r6,8(sp)
    34e0:	dfc01015 	stw	ra,64(sp)
    34e4:	d9c00315 	stw	r7,12(sp)
    34e8:	0003e040 	call	3e04 <__unpack_d>
    34ec:	d9000204 	addi	r4,sp,8
    34f0:	800b883a 	mov	r5,r16
    34f4:	0003e040 	call	3e04 <__unpack_d>
    34f8:	d8800417 	ldw	r2,16(sp)
    34fc:	00c00044 	movi	r3,1
    3500:	180d883a 	mov	r6,r3
    3504:	1880062e 	bgeu	r3,r2,3520 <__ltdf2+0x70>
    3508:	d8800917 	ldw	r2,36(sp)
    350c:	8809883a 	mov	r4,r17
    3510:	800b883a 	mov	r5,r16
    3514:	1880022e 	bgeu	r3,r2,3520 <__ltdf2+0x70>
    3518:	0003f3c0 	call	3f3c <__fpcmp_parts_d>
    351c:	100d883a 	mov	r6,r2
    3520:	3005883a 	mov	r2,r6
    3524:	dfc01017 	ldw	ra,64(sp)
    3528:	dc400f17 	ldw	r17,60(sp)
    352c:	dc000e17 	ldw	r16,56(sp)
    3530:	dec01104 	addi	sp,sp,68
    3534:	f800283a 	ret

00003538 <__floatsidf>:
    3538:	2006d7fa 	srli	r3,r4,31
    353c:	defff604 	addi	sp,sp,-40
    3540:	008000c4 	movi	r2,3
    3544:	dfc00915 	stw	ra,36(sp)
    3548:	dcc00815 	stw	r19,32(sp)
    354c:	dc800715 	stw	r18,28(sp)
    3550:	dc400615 	stw	r17,24(sp)
    3554:	dc000515 	stw	r16,20(sp)
    3558:	d8800015 	stw	r2,0(sp)
    355c:	d8c00115 	stw	r3,4(sp)
    3560:	20000f1e 	bne	r4,zero,35a0 <__floatsidf+0x68>
    3564:	00800084 	movi	r2,2
    3568:	d8800015 	stw	r2,0(sp)
    356c:	d809883a 	mov	r4,sp
    3570:	0003af00 	call	3af0 <__pack_d>
    3574:	1009883a 	mov	r4,r2
    3578:	180b883a 	mov	r5,r3
    357c:	2005883a 	mov	r2,r4
    3580:	2807883a 	mov	r3,r5
    3584:	dfc00917 	ldw	ra,36(sp)
    3588:	dcc00817 	ldw	r19,32(sp)
    358c:	dc800717 	ldw	r18,28(sp)
    3590:	dc400617 	ldw	r17,24(sp)
    3594:	dc000517 	ldw	r16,20(sp)
    3598:	dec00a04 	addi	sp,sp,40
    359c:	f800283a 	ret
    35a0:	00800f04 	movi	r2,60
    35a4:	1807003a 	cmpeq	r3,r3,zero
    35a8:	d8800215 	stw	r2,8(sp)
    35ac:	18001126 	beq	r3,zero,35f4 <__floatsidf+0xbc>
    35b0:	0027883a 	mov	r19,zero
    35b4:	2025883a 	mov	r18,r4
    35b8:	d9000315 	stw	r4,12(sp)
    35bc:	dcc00415 	stw	r19,16(sp)
    35c0:	00037a00 	call	37a0 <__clzsi2>
    35c4:	11000744 	addi	r4,r2,29
    35c8:	013fe80e 	bge	zero,r4,356c <__floatsidf+0x34>
    35cc:	10bfff44 	addi	r2,r2,-3
    35d0:	10000c16 	blt	r2,zero,3604 <__floatsidf+0xcc>
    35d4:	90a2983a 	sll	r17,r18,r2
    35d8:	0021883a 	mov	r16,zero
    35dc:	d8800217 	ldw	r2,8(sp)
    35e0:	dc400415 	stw	r17,16(sp)
    35e4:	dc000315 	stw	r16,12(sp)
    35e8:	1105c83a 	sub	r2,r2,r4
    35ec:	d8800215 	stw	r2,8(sp)
    35f0:	003fde06 	br	356c <__floatsidf+0x34>
    35f4:	00a00034 	movhi	r2,32768
    35f8:	20800a26 	beq	r4,r2,3624 <__floatsidf+0xec>
    35fc:	0109c83a 	sub	r4,zero,r4
    3600:	003feb06 	br	35b0 <__floatsidf+0x78>
    3604:	9006d07a 	srli	r3,r18,1
    3608:	008007c4 	movi	r2,31
    360c:	1105c83a 	sub	r2,r2,r4
    3610:	1886d83a 	srl	r3,r3,r2
    3614:	9922983a 	sll	r17,r19,r4
    3618:	9120983a 	sll	r16,r18,r4
    361c:	1c62b03a 	or	r17,r3,r17
    3620:	003fee06 	br	35dc <__floatsidf+0xa4>
    3624:	0009883a 	mov	r4,zero
    3628:	01707834 	movhi	r5,49632
    362c:	003fd306 	br	357c <__floatsidf+0x44>

00003630 <__fixdfsi>:
    3630:	defff804 	addi	sp,sp,-32
    3634:	2005883a 	mov	r2,r4
    3638:	2807883a 	mov	r3,r5
    363c:	d809883a 	mov	r4,sp
    3640:	d9400204 	addi	r5,sp,8
    3644:	d8c00115 	stw	r3,4(sp)
    3648:	d8800015 	stw	r2,0(sp)
    364c:	dfc00715 	stw	ra,28(sp)
    3650:	0003e040 	call	3e04 <__unpack_d>
    3654:	d8c00217 	ldw	r3,8(sp)
    3658:	00800084 	movi	r2,2
    365c:	1880051e 	bne	r3,r2,3674 <__fixdfsi+0x44>
    3660:	0007883a 	mov	r3,zero
    3664:	1805883a 	mov	r2,r3
    3668:	dfc00717 	ldw	ra,28(sp)
    366c:	dec00804 	addi	sp,sp,32
    3670:	f800283a 	ret
    3674:	00800044 	movi	r2,1
    3678:	10fff92e 	bgeu	r2,r3,3660 <__fixdfsi+0x30>
    367c:	00800104 	movi	r2,4
    3680:	18800426 	beq	r3,r2,3694 <__fixdfsi+0x64>
    3684:	d8c00417 	ldw	r3,16(sp)
    3688:	183ff516 	blt	r3,zero,3660 <__fixdfsi+0x30>
    368c:	00800784 	movi	r2,30
    3690:	10c0080e 	bge	r2,r3,36b4 <__fixdfsi+0x84>
    3694:	d8800317 	ldw	r2,12(sp)
    3698:	1000121e 	bne	r2,zero,36e4 <__fixdfsi+0xb4>
    369c:	00e00034 	movhi	r3,32768
    36a0:	18ffffc4 	addi	r3,r3,-1
    36a4:	1805883a 	mov	r2,r3
    36a8:	dfc00717 	ldw	ra,28(sp)
    36ac:	dec00804 	addi	sp,sp,32
    36b0:	f800283a 	ret
    36b4:	00800f04 	movi	r2,60
    36b8:	10d1c83a 	sub	r8,r2,r3
    36bc:	40bff804 	addi	r2,r8,-32
    36c0:	d9800517 	ldw	r6,20(sp)
    36c4:	d9c00617 	ldw	r7,24(sp)
    36c8:	10000816 	blt	r2,zero,36ec <__fixdfsi+0xbc>
    36cc:	3888d83a 	srl	r4,r7,r2
    36d0:	d8800317 	ldw	r2,12(sp)
    36d4:	2007883a 	mov	r3,r4
    36d8:	103fe226 	beq	r2,zero,3664 <__fixdfsi+0x34>
    36dc:	0107c83a 	sub	r3,zero,r4
    36e0:	003fe006 	br	3664 <__fixdfsi+0x34>
    36e4:	00e00034 	movhi	r3,32768
    36e8:	003fde06 	br	3664 <__fixdfsi+0x34>
    36ec:	39c7883a 	add	r3,r7,r7
    36f0:	008007c4 	movi	r2,31
    36f4:	1205c83a 	sub	r2,r2,r8
    36f8:	1886983a 	sll	r3,r3,r2
    36fc:	3208d83a 	srl	r4,r6,r8
    3700:	1908b03a 	or	r4,r3,r4
    3704:	003ff206 	br	36d0 <__fixdfsi+0xa0>

00003708 <__muldi3>:
    3708:	2011883a 	mov	r8,r4
    370c:	427fffcc 	andi	r9,r8,65535
    3710:	4018d43a 	srli	r12,r8,16
    3714:	32bfffcc 	andi	r10,r6,65535
    3718:	3016d43a 	srli	r11,r6,16
    371c:	4a85383a 	mul	r2,r9,r10
    3720:	6295383a 	mul	r10,r12,r10
    3724:	4ad3383a 	mul	r9,r9,r11
    3728:	113fffcc 	andi	r4,r2,65535
    372c:	1004d43a 	srli	r2,r2,16
    3730:	4a93883a 	add	r9,r9,r10
    3734:	3807883a 	mov	r3,r7
    3738:	1245883a 	add	r2,r2,r9
    373c:	280f883a 	mov	r7,r5
    3740:	180b883a 	mov	r5,r3
    3744:	1006943a 	slli	r3,r2,16
    3748:	defffd04 	addi	sp,sp,-12
    374c:	dc800215 	stw	r18,8(sp)
    3750:	1907883a 	add	r3,r3,r4
    3754:	dc400115 	stw	r17,4(sp)
    3758:	dc000015 	stw	r16,0(sp)
    375c:	4165383a 	mul	r18,r8,r5
    3760:	31e3383a 	mul	r17,r6,r7
    3764:	1012d43a 	srli	r9,r2,16
    3768:	62d9383a 	mul	r12,r12,r11
    376c:	181f883a 	mov	r15,r3
    3770:	1280022e 	bgeu	r2,r10,377c <__muldi3+0x74>
    3774:	00800074 	movhi	r2,1
    3778:	6099883a 	add	r12,r12,r2
    377c:	624d883a 	add	r6,r12,r9
    3780:	9187883a 	add	r3,r18,r6
    3784:	88c7883a 	add	r3,r17,r3
    3788:	7805883a 	mov	r2,r15
    378c:	dc800217 	ldw	r18,8(sp)
    3790:	dc400117 	ldw	r17,4(sp)
    3794:	dc000017 	ldw	r16,0(sp)
    3798:	dec00304 	addi	sp,sp,12
    379c:	f800283a 	ret

000037a0 <__clzsi2>:
    37a0:	00bfffd4 	movui	r2,65535
    37a4:	11000e36 	bltu	r2,r4,37e0 <__clzsi2+0x40>
    37a8:	00803fc4 	movi	r2,255
    37ac:	01400204 	movi	r5,8
    37b0:	0007883a 	mov	r3,zero
    37b4:	11001036 	bltu	r2,r4,37f8 <__clzsi2+0x58>
    37b8:	000b883a 	mov	r5,zero
    37bc:	20c6d83a 	srl	r3,r4,r3
    37c0:	00800074 	movhi	r2,1
    37c4:	10801e04 	addi	r2,r2,120
    37c8:	1887883a 	add	r3,r3,r2
    37cc:	18800003 	ldbu	r2,0(r3)
    37d0:	00c00804 	movi	r3,32
    37d4:	2885883a 	add	r2,r5,r2
    37d8:	1885c83a 	sub	r2,r3,r2
    37dc:	f800283a 	ret
    37e0:	01400404 	movi	r5,16
    37e4:	00804034 	movhi	r2,256
    37e8:	10bfffc4 	addi	r2,r2,-1
    37ec:	2807883a 	mov	r3,r5
    37f0:	113ff22e 	bgeu	r2,r4,37bc <__clzsi2+0x1c>
    37f4:	01400604 	movi	r5,24
    37f8:	2807883a 	mov	r3,r5
    37fc:	20c6d83a 	srl	r3,r4,r3
    3800:	00800074 	movhi	r2,1
    3804:	10801e04 	addi	r2,r2,120
    3808:	1887883a 	add	r3,r3,r2
    380c:	18800003 	ldbu	r2,0(r3)
    3810:	00c00804 	movi	r3,32
    3814:	2885883a 	add	r2,r5,r2
    3818:	1885c83a 	sub	r2,r3,r2
    381c:	f800283a 	ret

00003820 <__pack_f>:
    3820:	20c00017 	ldw	r3,0(r4)
    3824:	01c00044 	movi	r7,1
    3828:	21800317 	ldw	r6,12(r4)
    382c:	21400117 	ldw	r5,4(r4)
    3830:	38c02d2e 	bgeu	r7,r3,38e8 <__pack_f+0xc8>
    3834:	00800104 	movi	r2,4
    3838:	18802826 	beq	r3,r2,38dc <__pack_f+0xbc>
    383c:	00800084 	movi	r2,2
    3840:	18800126 	beq	r3,r2,3848 <__pack_f+0x28>
    3844:	3000101e 	bne	r6,zero,3888 <__pack_f+0x68>
    3848:	000d883a 	mov	r6,zero
    384c:	0007883a 	mov	r3,zero
    3850:	19003fcc 	andi	r4,r3,255
    3854:	200895fa 	slli	r4,r4,23
    3858:	00c02034 	movhi	r3,128
    385c:	18ffffc4 	addi	r3,r3,-1
    3860:	30c6703a 	and	r3,r6,r3
    3864:	10a0002c 	andhi	r2,r2,32768
    3868:	10c4b03a 	or	r2,r2,r3
    386c:	280a97fa 	slli	r5,r5,31
    3870:	1104b03a 	or	r2,r2,r4
    3874:	00e00034 	movhi	r3,32768
    3878:	18ffffc4 	addi	r3,r3,-1
    387c:	10c4703a 	and	r2,r2,r3
    3880:	1144b03a 	or	r2,r2,r5
    3884:	f800283a 	ret
    3888:	21000217 	ldw	r4,8(r4)
    388c:	00bfe084 	movi	r2,-126
    3890:	20801b16 	blt	r4,r2,3900 <__pack_f+0xe0>
    3894:	00801fc4 	movi	r2,127
    3898:	11001016 	blt	r2,r4,38dc <__pack_f+0xbc>
    389c:	308e703a 	and	r7,r6,r2
    38a0:	2087883a 	add	r3,r4,r2
    38a4:	00801004 	movi	r2,64
    38a8:	38800526 	beq	r7,r2,38c0 <__pack_f+0xa0>
    38ac:	31800fc4 	addi	r6,r6,63
    38b0:	30000716 	blt	r6,zero,38d0 <__pack_f+0xb0>
    38b4:	300490ba 	slli	r2,r6,2
    38b8:	100cd27a 	srli	r6,r2,9
    38bc:	003fe406 	br	3850 <__pack_f+0x30>
    38c0:	3080200c 	andi	r2,r6,128
    38c4:	103ffa26 	beq	r2,zero,38b0 <__pack_f+0x90>
    38c8:	31cd883a 	add	r6,r6,r7
    38cc:	003ff806 	br	38b0 <__pack_f+0x90>
    38d0:	300cd07a 	srli	r6,r6,1
    38d4:	18c00044 	addi	r3,r3,1
    38d8:	003ff606 	br	38b4 <__pack_f+0x94>
    38dc:	000d883a 	mov	r6,zero
    38e0:	00ffffc4 	movi	r3,-1
    38e4:	003fda06 	br	3850 <__pack_f+0x30>
    38e8:	31800434 	orhi	r6,r6,16
    38ec:	00802034 	movhi	r2,128
    38f0:	10bfffc4 	addi	r2,r2,-1
    38f4:	308c703a 	and	r6,r6,r2
    38f8:	00ffffc4 	movi	r3,-1
    38fc:	003fd406 	br	3850 <__pack_f+0x30>
    3900:	1109c83a 	sub	r4,r2,r4
    3904:	00800644 	movi	r2,25
    3908:	11001216 	blt	r2,r4,3954 <__pack_f+0x134>
    390c:	3904983a 	sll	r2,r7,r4
    3910:	3106d83a 	srl	r3,r6,r4
    3914:	10bfffc4 	addi	r2,r2,-1
    3918:	3084703a 	and	r2,r6,r2
    391c:	1004c03a 	cmpne	r2,r2,zero
    3920:	1886b03a 	or	r3,r3,r2
    3924:	19001fcc 	andi	r4,r3,127
    3928:	00801004 	movi	r2,64
    392c:	20800c26 	beq	r4,r2,3960 <__pack_f+0x140>
    3930:	18c00fc4 	addi	r3,r3,63
    3934:	00900034 	movhi	r2,16384
    3938:	10bfffc4 	addi	r2,r2,-1
    393c:	180cd1fa 	srli	r6,r3,7
    3940:	10c7803a 	cmpltu	r3,r2,r3
    3944:	00802034 	movhi	r2,128
    3948:	10bfffc4 	addi	r2,r2,-1
    394c:	308c703a 	and	r6,r6,r2
    3950:	003fbf06 	br	3850 <__pack_f+0x30>
    3954:	0007883a 	mov	r3,zero
    3958:	000d883a 	mov	r6,zero
    395c:	003ff906 	br	3944 <__pack_f+0x124>
    3960:	1880200c 	andi	r2,r3,128
    3964:	10000126 	beq	r2,zero,396c <__pack_f+0x14c>
    3968:	1907883a 	add	r3,r3,r4
    396c:	180cd1fa 	srli	r6,r3,7
    3970:	00900034 	movhi	r2,16384
    3974:	10bfffc4 	addi	r2,r2,-1
    3978:	10c7803a 	cmpltu	r3,r2,r3
    397c:	003ff106 	br	3944 <__pack_f+0x124>

00003980 <__unpack_f>:
    3980:	21800017 	ldw	r6,0(r4)
    3984:	00c02034 	movhi	r3,128
    3988:	18ffffc4 	addi	r3,r3,-1
    398c:	3004d5fa 	srli	r2,r6,23
    3990:	3008d7fa 	srli	r4,r6,31
    3994:	30ce703a 	and	r7,r6,r3
    3998:	10c03fcc 	andi	r3,r2,255
    399c:	29000115 	stw	r4,4(r5)
    39a0:	1800131e 	bne	r3,zero,39f0 <__unpack_f+0x70>
    39a4:	38000f26 	beq	r7,zero,39e4 <__unpack_f+0x64>
    39a8:	380691fa 	slli	r3,r7,7
    39ac:	01bfe084 	movi	r6,-126
    39b0:	008000c4 	movi	r2,3
    39b4:	01100034 	movhi	r4,16384
    39b8:	213fffc4 	addi	r4,r4,-1
    39bc:	28800015 	stw	r2,0(r5)
    39c0:	29800215 	stw	r6,8(r5)
    39c4:	20c00536 	bltu	r4,r3,39dc <__unpack_f+0x5c>
    39c8:	3005883a 	mov	r2,r6
    39cc:	18c7883a 	add	r3,r3,r3
    39d0:	10bfffc4 	addi	r2,r2,-1
    39d4:	20fffd2e 	bgeu	r4,r3,39cc <__unpack_f+0x4c>
    39d8:	28800215 	stw	r2,8(r5)
    39dc:	28c00315 	stw	r3,12(r5)
    39e0:	f800283a 	ret
    39e4:	00800084 	movi	r2,2
    39e8:	28800015 	stw	r2,0(r5)
    39ec:	f800283a 	ret
    39f0:	00803fc4 	movi	r2,255
    39f4:	18800826 	beq	r3,r2,3a18 <__unpack_f+0x98>
    39f8:	380491fa 	slli	r2,r7,7
    39fc:	18ffe044 	addi	r3,r3,-127
    3a00:	28c00215 	stw	r3,8(r5)
    3a04:	10900034 	orhi	r2,r2,16384
    3a08:	28800315 	stw	r2,12(r5)
    3a0c:	008000c4 	movi	r2,3
    3a10:	28800015 	stw	r2,0(r5)
    3a14:	f800283a 	ret
    3a18:	3800031e 	bne	r7,zero,3a28 <__unpack_f+0xa8>
    3a1c:	00800104 	movi	r2,4
    3a20:	28800015 	stw	r2,0(r5)
    3a24:	f800283a 	ret
    3a28:	3080042c 	andhi	r2,r6,16
    3a2c:	10000426 	beq	r2,zero,3a40 <__unpack_f+0xc0>
    3a30:	00800044 	movi	r2,1
    3a34:	28800015 	stw	r2,0(r5)
    3a38:	29c00315 	stw	r7,12(r5)
    3a3c:	f800283a 	ret
    3a40:	28000015 	stw	zero,0(r5)
    3a44:	003ffc06 	br	3a38 <__unpack_f+0xb8>

00003a48 <__fpcmp_parts_f>:
    3a48:	21800017 	ldw	r6,0(r4)
    3a4c:	00c00044 	movi	r3,1
    3a50:	19800a2e 	bgeu	r3,r6,3a7c <__fpcmp_parts_f+0x34>
    3a54:	28800017 	ldw	r2,0(r5)
    3a58:	1880082e 	bgeu	r3,r2,3a7c <__fpcmp_parts_f+0x34>
    3a5c:	00c00104 	movi	r3,4
    3a60:	30c01e26 	beq	r6,r3,3adc <__fpcmp_parts_f+0x94>
    3a64:	10c01a26 	beq	r2,r3,3ad0 <__fpcmp_parts_f+0x88>
    3a68:	00c00084 	movi	r3,2
    3a6c:	30c00526 	beq	r6,r3,3a84 <__fpcmp_parts_f+0x3c>
    3a70:	10c0071e 	bne	r2,r3,3a90 <__fpcmp_parts_f+0x48>
    3a74:	20800117 	ldw	r2,4(r4)
    3a78:	1000091e 	bne	r2,zero,3aa0 <__fpcmp_parts_f+0x58>
    3a7c:	00800044 	movi	r2,1
    3a80:	f800283a 	ret
    3a84:	10c0121e 	bne	r2,r3,3ad0 <__fpcmp_parts_f+0x88>
    3a88:	0005883a 	mov	r2,zero
    3a8c:	f800283a 	ret
    3a90:	20c00117 	ldw	r3,4(r4)
    3a94:	28800117 	ldw	r2,4(r5)
    3a98:	18800326 	beq	r3,r2,3aa8 <__fpcmp_parts_f+0x60>
    3a9c:	183ff726 	beq	r3,zero,3a7c <__fpcmp_parts_f+0x34>
    3aa0:	00bfffc4 	movi	r2,-1
    3aa4:	f800283a 	ret
    3aa8:	21800217 	ldw	r6,8(r4)
    3aac:	28800217 	ldw	r2,8(r5)
    3ab0:	11bffa16 	blt	r2,r6,3a9c <__fpcmp_parts_f+0x54>
    3ab4:	30800416 	blt	r6,r2,3ac8 <__fpcmp_parts_f+0x80>
    3ab8:	21000317 	ldw	r4,12(r4)
    3abc:	29400317 	ldw	r5,12(r5)
    3ac0:	293ff636 	bltu	r5,r4,3a9c <__fpcmp_parts_f+0x54>
    3ac4:	217ff02e 	bgeu	r4,r5,3a88 <__fpcmp_parts_f+0x40>
    3ac8:	183fec1e 	bne	r3,zero,3a7c <__fpcmp_parts_f+0x34>
    3acc:	003ff406 	br	3aa0 <__fpcmp_parts_f+0x58>
    3ad0:	28800117 	ldw	r2,4(r5)
    3ad4:	103fe91e 	bne	r2,zero,3a7c <__fpcmp_parts_f+0x34>
    3ad8:	003ff106 	br	3aa0 <__fpcmp_parts_f+0x58>
    3adc:	11bfe51e 	bne	r2,r6,3a74 <__fpcmp_parts_f+0x2c>
    3ae0:	28c00117 	ldw	r3,4(r5)
    3ae4:	20800117 	ldw	r2,4(r4)
    3ae8:	1885c83a 	sub	r2,r3,r2
    3aec:	f800283a 	ret

00003af0 <__pack_d>:
    3af0:	20c00017 	ldw	r3,0(r4)
    3af4:	defffd04 	addi	sp,sp,-12
    3af8:	dc000015 	stw	r16,0(sp)
    3afc:	dc800215 	stw	r18,8(sp)
    3b00:	dc400115 	stw	r17,4(sp)
    3b04:	00800044 	movi	r2,1
    3b08:	22000317 	ldw	r8,12(r4)
    3b0c:	001f883a 	mov	r15,zero
    3b10:	22400417 	ldw	r9,16(r4)
    3b14:	24000117 	ldw	r16,4(r4)
    3b18:	10c0552e 	bgeu	r2,r3,3c70 <__pack_d+0x180>
    3b1c:	00800104 	movi	r2,4
    3b20:	18804f26 	beq	r3,r2,3c60 <__pack_d+0x170>
    3b24:	00800084 	movi	r2,2
    3b28:	18800226 	beq	r3,r2,3b34 <__pack_d+0x44>
    3b2c:	4244b03a 	or	r2,r8,r9
    3b30:	10001a1e 	bne	r2,zero,3b9c <__pack_d+0xac>
    3b34:	000d883a 	mov	r6,zero
    3b38:	000f883a 	mov	r7,zero
    3b3c:	0011883a 	mov	r8,zero
    3b40:	00800434 	movhi	r2,16
    3b44:	10bfffc4 	addi	r2,r2,-1
    3b48:	301d883a 	mov	r14,r6
    3b4c:	3884703a 	and	r2,r7,r2
    3b50:	400a953a 	slli	r5,r8,20
    3b54:	79bffc2c 	andhi	r6,r15,65520
    3b58:	308cb03a 	or	r6,r6,r2
    3b5c:	00e00434 	movhi	r3,32784
    3b60:	18ffffc4 	addi	r3,r3,-1
    3b64:	800497fa 	slli	r2,r16,31
    3b68:	30c6703a 	and	r3,r6,r3
    3b6c:	1946b03a 	or	r3,r3,r5
    3b70:	01600034 	movhi	r5,32768
    3b74:	297fffc4 	addi	r5,r5,-1
    3b78:	194a703a 	and	r5,r3,r5
    3b7c:	288ab03a 	or	r5,r5,r2
    3b80:	2807883a 	mov	r3,r5
    3b84:	7005883a 	mov	r2,r14
    3b88:	dc800217 	ldw	r18,8(sp)
    3b8c:	dc400117 	ldw	r17,4(sp)
    3b90:	dc000017 	ldw	r16,0(sp)
    3b94:	dec00304 	addi	sp,sp,12
    3b98:	f800283a 	ret
    3b9c:	21000217 	ldw	r4,8(r4)
    3ba0:	00bf0084 	movi	r2,-1022
    3ba4:	20803f16 	blt	r4,r2,3ca4 <__pack_d+0x1b4>
    3ba8:	0080ffc4 	movi	r2,1023
    3bac:	11002c16 	blt	r2,r4,3c60 <__pack_d+0x170>
    3bb0:	00803fc4 	movi	r2,255
    3bb4:	408c703a 	and	r6,r8,r2
    3bb8:	00802004 	movi	r2,128
    3bbc:	0007883a 	mov	r3,zero
    3bc0:	000f883a 	mov	r7,zero
    3bc4:	2280ffc4 	addi	r10,r4,1023
    3bc8:	30801e26 	beq	r6,r2,3c44 <__pack_d+0x154>
    3bcc:	00801fc4 	movi	r2,127
    3bd0:	4089883a 	add	r4,r8,r2
    3bd4:	220d803a 	cmpltu	r6,r4,r8
    3bd8:	324d883a 	add	r6,r6,r9
    3bdc:	2011883a 	mov	r8,r4
    3be0:	3013883a 	mov	r9,r6
    3be4:	00880034 	movhi	r2,8192
    3be8:	10bfffc4 	addi	r2,r2,-1
    3bec:	12400d36 	bltu	r2,r9,3c24 <__pack_d+0x134>
    3bf0:	4804963a 	slli	r2,r9,24
    3bf4:	400cd23a 	srli	r6,r8,8
    3bf8:	480ed23a 	srli	r7,r9,8
    3bfc:	013fffc4 	movi	r4,-1
    3c00:	118cb03a 	or	r6,r2,r6
    3c04:	01400434 	movhi	r5,16
    3c08:	297fffc4 	addi	r5,r5,-1
    3c0c:	3104703a 	and	r2,r6,r4
    3c10:	3946703a 	and	r3,r7,r5
    3c14:	5201ffcc 	andi	r8,r10,2047
    3c18:	100d883a 	mov	r6,r2
    3c1c:	180f883a 	mov	r7,r3
    3c20:	003fc706 	br	3b40 <__pack_d+0x50>
    3c24:	480897fa 	slli	r4,r9,31
    3c28:	4004d07a 	srli	r2,r8,1
    3c2c:	4806d07a 	srli	r3,r9,1
    3c30:	52800044 	addi	r10,r10,1
    3c34:	2084b03a 	or	r2,r4,r2
    3c38:	1011883a 	mov	r8,r2
    3c3c:	1813883a 	mov	r9,r3
    3c40:	003feb06 	br	3bf0 <__pack_d+0x100>
    3c44:	383fe11e 	bne	r7,zero,3bcc <__pack_d+0xdc>
    3c48:	01004004 	movi	r4,256
    3c4c:	4104703a 	and	r2,r8,r4
    3c50:	10c4b03a 	or	r2,r2,r3
    3c54:	103fe326 	beq	r2,zero,3be4 <__pack_d+0xf4>
    3c58:	3005883a 	mov	r2,r6
    3c5c:	003fdc06 	br	3bd0 <__pack_d+0xe0>
    3c60:	000d883a 	mov	r6,zero
    3c64:	000f883a 	mov	r7,zero
    3c68:	0201ffc4 	movi	r8,2047
    3c6c:	003fb406 	br	3b40 <__pack_d+0x50>
    3c70:	0005883a 	mov	r2,zero
    3c74:	00c00234 	movhi	r3,8
    3c78:	408cb03a 	or	r6,r8,r2
    3c7c:	48ceb03a 	or	r7,r9,r3
    3c80:	013fffc4 	movi	r4,-1
    3c84:	01400434 	movhi	r5,16
    3c88:	297fffc4 	addi	r5,r5,-1
    3c8c:	3104703a 	and	r2,r6,r4
    3c90:	3946703a 	and	r3,r7,r5
    3c94:	100d883a 	mov	r6,r2
    3c98:	180f883a 	mov	r7,r3
    3c9c:	0201ffc4 	movi	r8,2047
    3ca0:	003fa706 	br	3b40 <__pack_d+0x50>
    3ca4:	1109c83a 	sub	r4,r2,r4
    3ca8:	00800e04 	movi	r2,56
    3cac:	11004316 	blt	r2,r4,3dbc <__pack_d+0x2cc>
    3cb0:	21fff804 	addi	r7,r4,-32
    3cb4:	38004516 	blt	r7,zero,3dcc <__pack_d+0x2dc>
    3cb8:	49d8d83a 	srl	r12,r9,r7
    3cbc:	001b883a 	mov	r13,zero
    3cc0:	0023883a 	mov	r17,zero
    3cc4:	01400044 	movi	r5,1
    3cc8:	0025883a 	mov	r18,zero
    3ccc:	38004716 	blt	r7,zero,3dec <__pack_d+0x2fc>
    3cd0:	29d6983a 	sll	r11,r5,r7
    3cd4:	0015883a 	mov	r10,zero
    3cd8:	00bfffc4 	movi	r2,-1
    3cdc:	5089883a 	add	r4,r10,r2
    3ce0:	588b883a 	add	r5,r11,r2
    3ce4:	228d803a 	cmpltu	r6,r4,r10
    3ce8:	314b883a 	add	r5,r6,r5
    3cec:	4104703a 	and	r2,r8,r4
    3cf0:	4946703a 	and	r3,r9,r5
    3cf4:	10c4b03a 	or	r2,r2,r3
    3cf8:	10000226 	beq	r2,zero,3d04 <__pack_d+0x214>
    3cfc:	04400044 	movi	r17,1
    3d00:	0025883a 	mov	r18,zero
    3d04:	00803fc4 	movi	r2,255
    3d08:	644eb03a 	or	r7,r12,r17
    3d0c:	3892703a 	and	r9,r7,r2
    3d10:	00802004 	movi	r2,128
    3d14:	6c90b03a 	or	r8,r13,r18
    3d18:	0015883a 	mov	r10,zero
    3d1c:	48801626 	beq	r9,r2,3d78 <__pack_d+0x288>
    3d20:	01001fc4 	movi	r4,127
    3d24:	3905883a 	add	r2,r7,r4
    3d28:	11cd803a 	cmpltu	r6,r2,r7
    3d2c:	320d883a 	add	r6,r6,r8
    3d30:	100f883a 	mov	r7,r2
    3d34:	00840034 	movhi	r2,4096
    3d38:	10bfffc4 	addi	r2,r2,-1
    3d3c:	3011883a 	mov	r8,r6
    3d40:	0007883a 	mov	r3,zero
    3d44:	11801b36 	bltu	r2,r6,3db4 <__pack_d+0x2c4>
    3d48:	4004963a 	slli	r2,r8,24
    3d4c:	3808d23a 	srli	r4,r7,8
    3d50:	400ad23a 	srli	r5,r8,8
    3d54:	1813883a 	mov	r9,r3
    3d58:	1108b03a 	or	r4,r2,r4
    3d5c:	00bfffc4 	movi	r2,-1
    3d60:	00c00434 	movhi	r3,16
    3d64:	18ffffc4 	addi	r3,r3,-1
    3d68:	208c703a 	and	r6,r4,r2
    3d6c:	28ce703a 	and	r7,r5,r3
    3d70:	4a01ffcc 	andi	r8,r9,2047
    3d74:	003f7206 	br	3b40 <__pack_d+0x50>
    3d78:	503fe91e 	bne	r10,zero,3d20 <__pack_d+0x230>
    3d7c:	01004004 	movi	r4,256
    3d80:	3904703a 	and	r2,r7,r4
    3d84:	0007883a 	mov	r3,zero
    3d88:	10c4b03a 	or	r2,r2,r3
    3d8c:	10000626 	beq	r2,zero,3da8 <__pack_d+0x2b8>
    3d90:	3a45883a 	add	r2,r7,r9
    3d94:	11cd803a 	cmpltu	r6,r2,r7
    3d98:	320d883a 	add	r6,r6,r8
    3d9c:	100f883a 	mov	r7,r2
    3da0:	3011883a 	mov	r8,r6
    3da4:	0007883a 	mov	r3,zero
    3da8:	00840034 	movhi	r2,4096
    3dac:	10bfffc4 	addi	r2,r2,-1
    3db0:	123fe52e 	bgeu	r2,r8,3d48 <__pack_d+0x258>
    3db4:	00c00044 	movi	r3,1
    3db8:	003fe306 	br	3d48 <__pack_d+0x258>
    3dbc:	0009883a 	mov	r4,zero
    3dc0:	0013883a 	mov	r9,zero
    3dc4:	000b883a 	mov	r5,zero
    3dc8:	003fe406 	br	3d5c <__pack_d+0x26c>
    3dcc:	4a47883a 	add	r3,r9,r9
    3dd0:	008007c4 	movi	r2,31
    3dd4:	1105c83a 	sub	r2,r2,r4
    3dd8:	1886983a 	sll	r3,r3,r2
    3ddc:	4118d83a 	srl	r12,r8,r4
    3de0:	491ad83a 	srl	r13,r9,r4
    3de4:	1b18b03a 	or	r12,r3,r12
    3de8:	003fb506 	br	3cc0 <__pack_d+0x1d0>
    3dec:	2806d07a 	srli	r3,r5,1
    3df0:	008007c4 	movi	r2,31
    3df4:	1105c83a 	sub	r2,r2,r4
    3df8:	1896d83a 	srl	r11,r3,r2
    3dfc:	2914983a 	sll	r10,r5,r4
    3e00:	003fb506 	br	3cd8 <__pack_d+0x1e8>

00003e04 <__unpack_d>:
    3e04:	20c00117 	ldw	r3,4(r4)
    3e08:	22400017 	ldw	r9,0(r4)
    3e0c:	00800434 	movhi	r2,16
    3e10:	10bfffc4 	addi	r2,r2,-1
    3e14:	1808d53a 	srli	r4,r3,20
    3e18:	180cd7fa 	srli	r6,r3,31
    3e1c:	1894703a 	and	r10,r3,r2
    3e20:	2201ffcc 	andi	r8,r4,2047
    3e24:	281b883a 	mov	r13,r5
    3e28:	4817883a 	mov	r11,r9
    3e2c:	29800115 	stw	r6,4(r5)
    3e30:	5019883a 	mov	r12,r10
    3e34:	40001e1e 	bne	r8,zero,3eb0 <__unpack_d+0xac>
    3e38:	4a84b03a 	or	r2,r9,r10
    3e3c:	10001926 	beq	r2,zero,3ea4 <__unpack_d+0xa0>
    3e40:	4804d63a 	srli	r2,r9,24
    3e44:	500c923a 	slli	r6,r10,8
    3e48:	013f0084 	movi	r4,-1022
    3e4c:	00c40034 	movhi	r3,4096
    3e50:	18ffffc4 	addi	r3,r3,-1
    3e54:	118cb03a 	or	r6,r2,r6
    3e58:	008000c4 	movi	r2,3
    3e5c:	480a923a 	slli	r5,r9,8
    3e60:	68800015 	stw	r2,0(r13)
    3e64:	69000215 	stw	r4,8(r13)
    3e68:	19800b36 	bltu	r3,r6,3e98 <__unpack_d+0x94>
    3e6c:	200f883a 	mov	r7,r4
    3e70:	1811883a 	mov	r8,r3
    3e74:	2945883a 	add	r2,r5,r5
    3e78:	1149803a 	cmpltu	r4,r2,r5
    3e7c:	3187883a 	add	r3,r6,r6
    3e80:	20c9883a 	add	r4,r4,r3
    3e84:	100b883a 	mov	r5,r2
    3e88:	200d883a 	mov	r6,r4
    3e8c:	39ffffc4 	addi	r7,r7,-1
    3e90:	413ff82e 	bgeu	r8,r4,3e74 <__unpack_d+0x70>
    3e94:	69c00215 	stw	r7,8(r13)
    3e98:	69800415 	stw	r6,16(r13)
    3e9c:	69400315 	stw	r5,12(r13)
    3ea0:	f800283a 	ret
    3ea4:	00800084 	movi	r2,2
    3ea8:	28800015 	stw	r2,0(r5)
    3eac:	f800283a 	ret
    3eb0:	0081ffc4 	movi	r2,2047
    3eb4:	40800f26 	beq	r8,r2,3ef4 <__unpack_d+0xf0>
    3eb8:	480cd63a 	srli	r6,r9,24
    3ebc:	5006923a 	slli	r3,r10,8
    3ec0:	4804923a 	slli	r2,r9,8
    3ec4:	0009883a 	mov	r4,zero
    3ec8:	30c6b03a 	or	r3,r6,r3
    3ecc:	01440034 	movhi	r5,4096
    3ed0:	110cb03a 	or	r6,r2,r4
    3ed4:	423f0044 	addi	r8,r8,-1023
    3ed8:	194eb03a 	or	r7,r3,r5
    3edc:	008000c4 	movi	r2,3
    3ee0:	69c00415 	stw	r7,16(r13)
    3ee4:	6a000215 	stw	r8,8(r13)
    3ee8:	68800015 	stw	r2,0(r13)
    3eec:	69800315 	stw	r6,12(r13)
    3ef0:	f800283a 	ret
    3ef4:	4a84b03a 	or	r2,r9,r10
    3ef8:	1000031e 	bne	r2,zero,3f08 <__unpack_d+0x104>
    3efc:	00800104 	movi	r2,4
    3f00:	28800015 	stw	r2,0(r5)
    3f04:	f800283a 	ret
    3f08:	0009883a 	mov	r4,zero
    3f0c:	01400234 	movhi	r5,8
    3f10:	4904703a 	and	r2,r9,r4
    3f14:	5146703a 	and	r3,r10,r5
    3f18:	10c4b03a 	or	r2,r2,r3
    3f1c:	10000526 	beq	r2,zero,3f34 <__unpack_d+0x130>
    3f20:	00800044 	movi	r2,1
    3f24:	68800015 	stw	r2,0(r13)
    3f28:	6b000415 	stw	r12,16(r13)
    3f2c:	6ac00315 	stw	r11,12(r13)
    3f30:	f800283a 	ret
    3f34:	68000015 	stw	zero,0(r13)
    3f38:	003ffb06 	br	3f28 <__unpack_d+0x124>

00003f3c <__fpcmp_parts_d>:
    3f3c:	21800017 	ldw	r6,0(r4)
    3f40:	00c00044 	movi	r3,1
    3f44:	19800a2e 	bgeu	r3,r6,3f70 <__fpcmp_parts_d+0x34>
    3f48:	28800017 	ldw	r2,0(r5)
    3f4c:	1880082e 	bgeu	r3,r2,3f70 <__fpcmp_parts_d+0x34>
    3f50:	00c00104 	movi	r3,4
    3f54:	30c02626 	beq	r6,r3,3ff0 <__fpcmp_parts_d+0xb4>
    3f58:	10c02226 	beq	r2,r3,3fe4 <__fpcmp_parts_d+0xa8>
    3f5c:	00c00084 	movi	r3,2
    3f60:	30c00526 	beq	r6,r3,3f78 <__fpcmp_parts_d+0x3c>
    3f64:	10c0071e 	bne	r2,r3,3f84 <__fpcmp_parts_d+0x48>
    3f68:	20800117 	ldw	r2,4(r4)
    3f6c:	1000091e 	bne	r2,zero,3f94 <__fpcmp_parts_d+0x58>
    3f70:	00800044 	movi	r2,1
    3f74:	f800283a 	ret
    3f78:	10c01a1e 	bne	r2,r3,3fe4 <__fpcmp_parts_d+0xa8>
    3f7c:	0005883a 	mov	r2,zero
    3f80:	f800283a 	ret
    3f84:	22000117 	ldw	r8,4(r4)
    3f88:	28800117 	ldw	r2,4(r5)
    3f8c:	40800326 	beq	r8,r2,3f9c <__fpcmp_parts_d+0x60>
    3f90:	403ff726 	beq	r8,zero,3f70 <__fpcmp_parts_d+0x34>
    3f94:	00bfffc4 	movi	r2,-1
    3f98:	f800283a 	ret
    3f9c:	20c00217 	ldw	r3,8(r4)
    3fa0:	28800217 	ldw	r2,8(r5)
    3fa4:	10fffa16 	blt	r2,r3,3f90 <__fpcmp_parts_d+0x54>
    3fa8:	18800916 	blt	r3,r2,3fd0 <__fpcmp_parts_d+0x94>
    3fac:	21c00417 	ldw	r7,16(r4)
    3fb0:	28c00417 	ldw	r3,16(r5)
    3fb4:	21800317 	ldw	r6,12(r4)
    3fb8:	28800317 	ldw	r2,12(r5)
    3fbc:	19fff436 	bltu	r3,r7,3f90 <__fpcmp_parts_d+0x54>
    3fc0:	38c00526 	beq	r7,r3,3fd8 <__fpcmp_parts_d+0x9c>
    3fc4:	38c00236 	bltu	r7,r3,3fd0 <__fpcmp_parts_d+0x94>
    3fc8:	19ffec1e 	bne	r3,r7,3f7c <__fpcmp_parts_d+0x40>
    3fcc:	30bfeb2e 	bgeu	r6,r2,3f7c <__fpcmp_parts_d+0x40>
    3fd0:	403fe71e 	bne	r8,zero,3f70 <__fpcmp_parts_d+0x34>
    3fd4:	003fef06 	br	3f94 <__fpcmp_parts_d+0x58>
    3fd8:	11bffa2e 	bgeu	r2,r6,3fc4 <__fpcmp_parts_d+0x88>
    3fdc:	403fe426 	beq	r8,zero,3f70 <__fpcmp_parts_d+0x34>
    3fe0:	003fec06 	br	3f94 <__fpcmp_parts_d+0x58>
    3fe4:	28800117 	ldw	r2,4(r5)
    3fe8:	103fe11e 	bne	r2,zero,3f70 <__fpcmp_parts_d+0x34>
    3fec:	003fe906 	br	3f94 <__fpcmp_parts_d+0x58>
    3ff0:	11bfdd1e 	bne	r2,r6,3f68 <__fpcmp_parts_d+0x2c>
    3ff4:	28c00117 	ldw	r3,4(r5)
    3ff8:	20800117 	ldw	r2,4(r4)
    3ffc:	1885c83a 	sub	r2,r3,r2
    4000:	f800283a 	ret

00004004 <difftime>:
    4004:	deffff04 	addi	sp,sp,-4
    4008:	2149c83a 	sub	r4,r4,r5
    400c:	dfc00015 	stw	ra,0(sp)
    4010:	00035380 	call	3538 <__floatsidf>
    4014:	dfc00017 	ldw	ra,0(sp)
    4018:	dec00104 	addi	sp,sp,4
    401c:	f800283a 	ret

00004020 <__errno>:
    4020:	00c00074 	movhi	r3,1
    4024:	18c90804 	addi	r3,r3,9248
    4028:	18800017 	ldw	r2,0(r3)
    402c:	f800283a 	ret

00004030 <_fclose_r>:
    4030:	defffc04 	addi	sp,sp,-16
    4034:	dc400115 	stw	r17,4(sp)
    4038:	dc000015 	stw	r16,0(sp)
    403c:	dfc00315 	stw	ra,12(sp)
    4040:	dc800215 	stw	r18,8(sp)
    4044:	2821883a 	mov	r16,r5
    4048:	2023883a 	mov	r17,r4
    404c:	28002926 	beq	r5,zero,40f4 <_fclose_r+0xc4>
    4050:	00043dc0 	call	43dc <__sfp_lock_acquire>
    4054:	88000226 	beq	r17,zero,4060 <_fclose_r+0x30>
    4058:	88800e17 	ldw	r2,56(r17)
    405c:	10002d26 	beq	r2,zero,4114 <_fclose_r+0xe4>
    4060:	8080030f 	ldh	r2,12(r16)
    4064:	10002226 	beq	r2,zero,40f0 <_fclose_r+0xc0>
    4068:	8809883a 	mov	r4,r17
    406c:	800b883a 	mov	r5,r16
    4070:	00041540 	call	4154 <_fflush_r>
    4074:	1025883a 	mov	r18,r2
    4078:	80800b17 	ldw	r2,44(r16)
    407c:	10000426 	beq	r2,zero,4090 <_fclose_r+0x60>
    4080:	81400717 	ldw	r5,28(r16)
    4084:	8809883a 	mov	r4,r17
    4088:	103ee83a 	callr	r2
    408c:	10002a16 	blt	r2,zero,4138 <_fclose_r+0x108>
    4090:	8080030b 	ldhu	r2,12(r16)
    4094:	1080200c 	andi	r2,r2,128
    4098:	1000231e 	bne	r2,zero,4128 <_fclose_r+0xf8>
    409c:	81400c17 	ldw	r5,48(r16)
    40a0:	28000526 	beq	r5,zero,40b8 <_fclose_r+0x88>
    40a4:	80801004 	addi	r2,r16,64
    40a8:	28800226 	beq	r5,r2,40b4 <_fclose_r+0x84>
    40ac:	8809883a 	mov	r4,r17
    40b0:	000499c0 	call	499c <_free_r>
    40b4:	80000c15 	stw	zero,48(r16)
    40b8:	81401117 	ldw	r5,68(r16)
    40bc:	28000326 	beq	r5,zero,40cc <_fclose_r+0x9c>
    40c0:	8809883a 	mov	r4,r17
    40c4:	000499c0 	call	499c <_free_r>
    40c8:	80001115 	stw	zero,68(r16)
    40cc:	8000030d 	sth	zero,12(r16)
    40d0:	00043e00 	call	43e0 <__sfp_lock_release>
    40d4:	9005883a 	mov	r2,r18
    40d8:	dfc00317 	ldw	ra,12(sp)
    40dc:	dc800217 	ldw	r18,8(sp)
    40e0:	dc400117 	ldw	r17,4(sp)
    40e4:	dc000017 	ldw	r16,0(sp)
    40e8:	dec00404 	addi	sp,sp,16
    40ec:	f800283a 	ret
    40f0:	00043e00 	call	43e0 <__sfp_lock_release>
    40f4:	0025883a 	mov	r18,zero
    40f8:	9005883a 	mov	r2,r18
    40fc:	dfc00317 	ldw	ra,12(sp)
    4100:	dc800217 	ldw	r18,8(sp)
    4104:	dc400117 	ldw	r17,4(sp)
    4108:	dc000017 	ldw	r16,0(sp)
    410c:	dec00404 	addi	sp,sp,16
    4110:	f800283a 	ret
    4114:	8809883a 	mov	r4,r17
    4118:	00043ec0 	call	43ec <__sinit>
    411c:	8080030f 	ldh	r2,12(r16)
    4120:	103fd11e 	bne	r2,zero,4068 <_fclose_r+0x38>
    4124:	003ff206 	br	40f0 <_fclose_r+0xc0>
    4128:	81400417 	ldw	r5,16(r16)
    412c:	8809883a 	mov	r4,r17
    4130:	000499c0 	call	499c <_free_r>
    4134:	003fd906 	br	409c <_fclose_r+0x6c>
    4138:	04bfffc4 	movi	r18,-1
    413c:	003fd406 	br	4090 <_fclose_r+0x60>

00004140 <fclose>:
    4140:	00800074 	movhi	r2,1
    4144:	10890804 	addi	r2,r2,9248
    4148:	200b883a 	mov	r5,r4
    414c:	11000017 	ldw	r4,0(r2)
    4150:	00040301 	jmpi	4030 <_fclose_r>

00004154 <_fflush_r>:
    4154:	defffb04 	addi	sp,sp,-20
    4158:	dcc00315 	stw	r19,12(sp)
    415c:	dc800215 	stw	r18,8(sp)
    4160:	dfc00415 	stw	ra,16(sp)
    4164:	dc400115 	stw	r17,4(sp)
    4168:	dc000015 	stw	r16,0(sp)
    416c:	2027883a 	mov	r19,r4
    4170:	2825883a 	mov	r18,r5
    4174:	20000226 	beq	r4,zero,4180 <_fflush_r+0x2c>
    4178:	20800e17 	ldw	r2,56(r4)
    417c:	10005626 	beq	r2,zero,42d8 <_fflush_r+0x184>
    4180:	9100030b 	ldhu	r4,12(r18)
    4184:	20ffffcc 	andi	r3,r4,65535
    4188:	18e0001c 	xori	r3,r3,32768
    418c:	18e00004 	addi	r3,r3,-32768
    4190:	1880020c 	andi	r2,r3,8
    4194:	1000261e 	bne	r2,zero,4230 <_fflush_r+0xdc>
    4198:	90c00117 	ldw	r3,4(r18)
    419c:	20820014 	ori	r2,r4,2048
    41a0:	9080030d 	sth	r2,12(r18)
    41a4:	1009883a 	mov	r4,r2
    41a8:	00c0400e 	bge	zero,r3,42ac <_fflush_r+0x158>
    41ac:	92000a17 	ldw	r8,40(r18)
    41b0:	40004026 	beq	r8,zero,42b4 <_fflush_r+0x160>
    41b4:	2084000c 	andi	r2,r4,4096
    41b8:	10005326 	beq	r2,zero,4308 <_fflush_r+0x1b4>
    41bc:	94001417 	ldw	r16,80(r18)
    41c0:	9080030b 	ldhu	r2,12(r18)
    41c4:	1080010c 	andi	r2,r2,4
    41c8:	1000481e 	bne	r2,zero,42ec <_fflush_r+0x198>
    41cc:	91400717 	ldw	r5,28(r18)
    41d0:	9809883a 	mov	r4,r19
    41d4:	800d883a 	mov	r6,r16
    41d8:	000f883a 	mov	r7,zero
    41dc:	403ee83a 	callr	r8
    41e0:	8080261e 	bne	r16,r2,427c <_fflush_r+0x128>
    41e4:	9080030b 	ldhu	r2,12(r18)
    41e8:	91000417 	ldw	r4,16(r18)
    41ec:	90000115 	stw	zero,4(r18)
    41f0:	10bdffcc 	andi	r2,r2,63487
    41f4:	10ffffcc 	andi	r3,r2,65535
    41f8:	18c4000c 	andi	r3,r3,4096
    41fc:	9080030d 	sth	r2,12(r18)
    4200:	91000015 	stw	r4,0(r18)
    4204:	18002b26 	beq	r3,zero,42b4 <_fflush_r+0x160>
    4208:	0007883a 	mov	r3,zero
    420c:	1805883a 	mov	r2,r3
    4210:	94001415 	stw	r16,80(r18)
    4214:	dfc00417 	ldw	ra,16(sp)
    4218:	dcc00317 	ldw	r19,12(sp)
    421c:	dc800217 	ldw	r18,8(sp)
    4220:	dc400117 	ldw	r17,4(sp)
    4224:	dc000017 	ldw	r16,0(sp)
    4228:	dec00504 	addi	sp,sp,20
    422c:	f800283a 	ret
    4230:	94400417 	ldw	r17,16(r18)
    4234:	88001f26 	beq	r17,zero,42b4 <_fflush_r+0x160>
    4238:	90800017 	ldw	r2,0(r18)
    423c:	18c000cc 	andi	r3,r3,3
    4240:	94400015 	stw	r17,0(r18)
    4244:	1461c83a 	sub	r16,r2,r17
    4248:	18002526 	beq	r3,zero,42e0 <_fflush_r+0x18c>
    424c:	0005883a 	mov	r2,zero
    4250:	90800215 	stw	r2,8(r18)
    4254:	0400170e 	bge	zero,r16,42b4 <_fflush_r+0x160>
    4258:	90c00917 	ldw	r3,36(r18)
    425c:	91400717 	ldw	r5,28(r18)
    4260:	880d883a 	mov	r6,r17
    4264:	800f883a 	mov	r7,r16
    4268:	9809883a 	mov	r4,r19
    426c:	183ee83a 	callr	r3
    4270:	88a3883a 	add	r17,r17,r2
    4274:	80a1c83a 	sub	r16,r16,r2
    4278:	00bff616 	blt	zero,r2,4254 <_fflush_r+0x100>
    427c:	9080030b 	ldhu	r2,12(r18)
    4280:	00ffffc4 	movi	r3,-1
    4284:	10801014 	ori	r2,r2,64
    4288:	9080030d 	sth	r2,12(r18)
    428c:	1805883a 	mov	r2,r3
    4290:	dfc00417 	ldw	ra,16(sp)
    4294:	dcc00317 	ldw	r19,12(sp)
    4298:	dc800217 	ldw	r18,8(sp)
    429c:	dc400117 	ldw	r17,4(sp)
    42a0:	dc000017 	ldw	r16,0(sp)
    42a4:	dec00504 	addi	sp,sp,20
    42a8:	f800283a 	ret
    42ac:	90800f17 	ldw	r2,60(r18)
    42b0:	00bfbe16 	blt	zero,r2,41ac <_fflush_r+0x58>
    42b4:	0007883a 	mov	r3,zero
    42b8:	1805883a 	mov	r2,r3
    42bc:	dfc00417 	ldw	ra,16(sp)
    42c0:	dcc00317 	ldw	r19,12(sp)
    42c4:	dc800217 	ldw	r18,8(sp)
    42c8:	dc400117 	ldw	r17,4(sp)
    42cc:	dc000017 	ldw	r16,0(sp)
    42d0:	dec00504 	addi	sp,sp,20
    42d4:	f800283a 	ret
    42d8:	00043ec0 	call	43ec <__sinit>
    42dc:	003fa806 	br	4180 <_fflush_r+0x2c>
    42e0:	90800517 	ldw	r2,20(r18)
    42e4:	90800215 	stw	r2,8(r18)
    42e8:	003fda06 	br	4254 <_fflush_r+0x100>
    42ec:	90800117 	ldw	r2,4(r18)
    42f0:	90c00c17 	ldw	r3,48(r18)
    42f4:	80a1c83a 	sub	r16,r16,r2
    42f8:	183fb426 	beq	r3,zero,41cc <_fflush_r+0x78>
    42fc:	90800f17 	ldw	r2,60(r18)
    4300:	80a1c83a 	sub	r16,r16,r2
    4304:	003fb106 	br	41cc <_fflush_r+0x78>
    4308:	91400717 	ldw	r5,28(r18)
    430c:	9809883a 	mov	r4,r19
    4310:	000d883a 	mov	r6,zero
    4314:	01c00044 	movi	r7,1
    4318:	403ee83a 	callr	r8
    431c:	1021883a 	mov	r16,r2
    4320:	00bfffc4 	movi	r2,-1
    4324:	80800226 	beq	r16,r2,4330 <_fflush_r+0x1dc>
    4328:	92000a17 	ldw	r8,40(r18)
    432c:	003fa406 	br	41c0 <_fflush_r+0x6c>
    4330:	98c00017 	ldw	r3,0(r19)
    4334:	00800744 	movi	r2,29
    4338:	18bfde26 	beq	r3,r2,42b4 <_fflush_r+0x160>
    433c:	9080030b 	ldhu	r2,12(r18)
    4340:	8007883a 	mov	r3,r16
    4344:	10801014 	ori	r2,r2,64
    4348:	9080030d 	sth	r2,12(r18)
    434c:	003fcf06 	br	428c <_fflush_r+0x138>

00004350 <fflush>:
    4350:	01400034 	movhi	r5,0
    4354:	29505504 	addi	r5,r5,16724
    4358:	2007883a 	mov	r3,r4
    435c:	20000526 	beq	r4,zero,4374 <fflush+0x24>
    4360:	00800074 	movhi	r2,1
    4364:	10890804 	addi	r2,r2,9248
    4368:	11000017 	ldw	r4,0(r2)
    436c:	180b883a 	mov	r5,r3
    4370:	00041541 	jmpi	4154 <_fflush_r>
    4374:	00800074 	movhi	r2,1
    4378:	10890904 	addi	r2,r2,9252
    437c:	11000017 	ldw	r4,0(r2)
    4380:	00051841 	jmpi	5184 <_fwalk_reent>

00004384 <std>:
    4384:	00800034 	movhi	r2,0
    4388:	1098f304 	addi	r2,r2,25548
    438c:	20800b15 	stw	r2,44(r4)
    4390:	00800034 	movhi	r2,0
    4394:	10992e04 	addi	r2,r2,25784
    4398:	20800815 	stw	r2,32(r4)
    439c:	00c00034 	movhi	r3,0
    43a0:	18d90f04 	addi	r3,r3,25660
    43a4:	00800034 	movhi	r2,0
    43a8:	1098f504 	addi	r2,r2,25556
    43ac:	2140030d 	sth	r5,12(r4)
    43b0:	2180038d 	sth	r6,14(r4)
    43b4:	20c00915 	stw	r3,36(r4)
    43b8:	20800a15 	stw	r2,40(r4)
    43bc:	20000015 	stw	zero,0(r4)
    43c0:	20000115 	stw	zero,4(r4)
    43c4:	20000215 	stw	zero,8(r4)
    43c8:	20000415 	stw	zero,16(r4)
    43cc:	20000515 	stw	zero,20(r4)
    43d0:	20000615 	stw	zero,24(r4)
    43d4:	21000715 	stw	r4,28(r4)
    43d8:	f800283a 	ret

000043dc <__sfp_lock_acquire>:
    43dc:	f800283a 	ret

000043e0 <__sfp_lock_release>:
    43e0:	f800283a 	ret

000043e4 <__sinit_lock_acquire>:
    43e4:	f800283a 	ret

000043e8 <__sinit_lock_release>:
    43e8:	f800283a 	ret

000043ec <__sinit>:
    43ec:	20800e17 	ldw	r2,56(r4)
    43f0:	defffd04 	addi	sp,sp,-12
    43f4:	dc400115 	stw	r17,4(sp)
    43f8:	dc000015 	stw	r16,0(sp)
    43fc:	dfc00215 	stw	ra,8(sp)
    4400:	04400044 	movi	r17,1
    4404:	01400104 	movi	r5,4
    4408:	000d883a 	mov	r6,zero
    440c:	2021883a 	mov	r16,r4
    4410:	2200bb04 	addi	r8,r4,748
    4414:	200f883a 	mov	r7,r4
    4418:	10000526 	beq	r2,zero,4430 <__sinit+0x44>
    441c:	dfc00217 	ldw	ra,8(sp)
    4420:	dc400117 	ldw	r17,4(sp)
    4424:	dc000017 	ldw	r16,0(sp)
    4428:	dec00304 	addi	sp,sp,12
    442c:	f800283a 	ret
    4430:	21000117 	ldw	r4,4(r4)
    4434:	00800034 	movhi	r2,0
    4438:	10913404 	addi	r2,r2,17616
    443c:	00c000c4 	movi	r3,3
    4440:	80800f15 	stw	r2,60(r16)
    4444:	80c0b915 	stw	r3,740(r16)
    4448:	8200ba15 	stw	r8,744(r16)
    444c:	84400e15 	stw	r17,56(r16)
    4450:	8000b815 	stw	zero,736(r16)
    4454:	00043840 	call	4384 <std>
    4458:	81000217 	ldw	r4,8(r16)
    445c:	880d883a 	mov	r6,r17
    4460:	800f883a 	mov	r7,r16
    4464:	01400284 	movi	r5,10
    4468:	00043840 	call	4384 <std>
    446c:	81000317 	ldw	r4,12(r16)
    4470:	800f883a 	mov	r7,r16
    4474:	01400484 	movi	r5,18
    4478:	01800084 	movi	r6,2
    447c:	dfc00217 	ldw	ra,8(sp)
    4480:	dc400117 	ldw	r17,4(sp)
    4484:	dc000017 	ldw	r16,0(sp)
    4488:	dec00304 	addi	sp,sp,12
    448c:	00043841 	jmpi	4384 <std>

00004490 <__fp_lock>:
    4490:	0005883a 	mov	r2,zero
    4494:	f800283a 	ret

00004498 <__fp_unlock>:
    4498:	0005883a 	mov	r2,zero
    449c:	f800283a 	ret

000044a0 <__fp_unlock_all>:
    44a0:	00800074 	movhi	r2,1
    44a4:	10890804 	addi	r2,r2,9248
    44a8:	11000017 	ldw	r4,0(r2)
    44ac:	01400034 	movhi	r5,0
    44b0:	29512604 	addi	r5,r5,17560
    44b4:	000524c1 	jmpi	524c <_fwalk>

000044b8 <__fp_lock_all>:
    44b8:	00800074 	movhi	r2,1
    44bc:	10890804 	addi	r2,r2,9248
    44c0:	11000017 	ldw	r4,0(r2)
    44c4:	01400034 	movhi	r5,0
    44c8:	29512404 	addi	r5,r5,17552
    44cc:	000524c1 	jmpi	524c <_fwalk>

000044d0 <_cleanup_r>:
    44d0:	01400034 	movhi	r5,0
    44d4:	29505004 	addi	r5,r5,16704
    44d8:	000524c1 	jmpi	524c <_fwalk>

000044dc <_cleanup>:
    44dc:	00800074 	movhi	r2,1
    44e0:	10890904 	addi	r2,r2,9252
    44e4:	11000017 	ldw	r4,0(r2)
    44e8:	00044d01 	jmpi	44d0 <_cleanup_r>

000044ec <__sfmoreglue>:
    44ec:	defffc04 	addi	sp,sp,-16
    44f0:	dc400115 	stw	r17,4(sp)
    44f4:	2c401724 	muli	r17,r5,92
    44f8:	dc800215 	stw	r18,8(sp)
    44fc:	2825883a 	mov	r18,r5
    4500:	89400304 	addi	r5,r17,12
    4504:	dc000015 	stw	r16,0(sp)
    4508:	dfc00315 	stw	ra,12(sp)
    450c:	00055740 	call	5574 <_malloc_r>
    4510:	0021883a 	mov	r16,zero
    4514:	880d883a 	mov	r6,r17
    4518:	000b883a 	mov	r5,zero
    451c:	10000626 	beq	r2,zero,4538 <__sfmoreglue+0x4c>
    4520:	11000304 	addi	r4,r2,12
    4524:	14800115 	stw	r18,4(r2)
    4528:	10000015 	stw	zero,0(r2)
    452c:	11000215 	stw	r4,8(r2)
    4530:	1021883a 	mov	r16,r2
    4534:	0005d540 	call	5d54 <memset>
    4538:	8005883a 	mov	r2,r16
    453c:	dfc00317 	ldw	ra,12(sp)
    4540:	dc800217 	ldw	r18,8(sp)
    4544:	dc400117 	ldw	r17,4(sp)
    4548:	dc000017 	ldw	r16,0(sp)
    454c:	dec00404 	addi	sp,sp,16
    4550:	f800283a 	ret

00004554 <__sfp>:
    4554:	defffd04 	addi	sp,sp,-12
    4558:	00800074 	movhi	r2,1
    455c:	10890904 	addi	r2,r2,9252
    4560:	dc000015 	stw	r16,0(sp)
    4564:	14000017 	ldw	r16,0(r2)
    4568:	dc400115 	stw	r17,4(sp)
    456c:	dfc00215 	stw	ra,8(sp)
    4570:	80800e17 	ldw	r2,56(r16)
    4574:	2023883a 	mov	r17,r4
    4578:	10002626 	beq	r2,zero,4614 <__sfp+0xc0>
    457c:	8400b804 	addi	r16,r16,736
    4580:	80800117 	ldw	r2,4(r16)
    4584:	81000217 	ldw	r4,8(r16)
    4588:	10ffffc4 	addi	r3,r2,-1
    458c:	18000916 	blt	r3,zero,45b4 <__sfp+0x60>
    4590:	2080030f 	ldh	r2,12(r4)
    4594:	10000b26 	beq	r2,zero,45c4 <__sfp+0x70>
    4598:	017fffc4 	movi	r5,-1
    459c:	00000206 	br	45a8 <__sfp+0x54>
    45a0:	2080030f 	ldh	r2,12(r4)
    45a4:	10000726 	beq	r2,zero,45c4 <__sfp+0x70>
    45a8:	18ffffc4 	addi	r3,r3,-1
    45ac:	21001704 	addi	r4,r4,92
    45b0:	197ffb1e 	bne	r3,r5,45a0 <__sfp+0x4c>
    45b4:	80800017 	ldw	r2,0(r16)
    45b8:	10001926 	beq	r2,zero,4620 <__sfp+0xcc>
    45bc:	1021883a 	mov	r16,r2
    45c0:	003fef06 	br	4580 <__sfp+0x2c>
    45c4:	00bfffc4 	movi	r2,-1
    45c8:	00c00044 	movi	r3,1
    45cc:	2080038d 	sth	r2,14(r4)
    45d0:	20c0030d 	sth	r3,12(r4)
    45d4:	20000015 	stw	zero,0(r4)
    45d8:	20000215 	stw	zero,8(r4)
    45dc:	20000115 	stw	zero,4(r4)
    45e0:	20000415 	stw	zero,16(r4)
    45e4:	20000515 	stw	zero,20(r4)
    45e8:	20000615 	stw	zero,24(r4)
    45ec:	20000c15 	stw	zero,48(r4)
    45f0:	20000d15 	stw	zero,52(r4)
    45f4:	20001115 	stw	zero,68(r4)
    45f8:	20001215 	stw	zero,72(r4)
    45fc:	2005883a 	mov	r2,r4
    4600:	dfc00217 	ldw	ra,8(sp)
    4604:	dc400117 	ldw	r17,4(sp)
    4608:	dc000017 	ldw	r16,0(sp)
    460c:	dec00304 	addi	sp,sp,12
    4610:	f800283a 	ret
    4614:	8009883a 	mov	r4,r16
    4618:	00043ec0 	call	43ec <__sinit>
    461c:	003fd706 	br	457c <__sfp+0x28>
    4620:	8809883a 	mov	r4,r17
    4624:	01400104 	movi	r5,4
    4628:	00044ec0 	call	44ec <__sfmoreglue>
    462c:	80800015 	stw	r2,0(r16)
    4630:	103fe21e 	bne	r2,zero,45bc <__sfp+0x68>
    4634:	00800304 	movi	r2,12
    4638:	0009883a 	mov	r4,zero
    463c:	88800015 	stw	r2,0(r17)
    4640:	003fee06 	br	45fc <__sfp+0xa8>

00004644 <_fopen_r>:
    4644:	defffa04 	addi	sp,sp,-24
    4648:	dcc00415 	stw	r19,16(sp)
    464c:	2827883a 	mov	r19,r5
    4650:	300b883a 	mov	r5,r6
    4654:	d80d883a 	mov	r6,sp
    4658:	dc800315 	stw	r18,12(sp)
    465c:	dc400215 	stw	r17,8(sp)
    4660:	dc000115 	stw	r16,4(sp)
    4664:	dfc00515 	stw	ra,20(sp)
    4668:	2021883a 	mov	r16,r4
    466c:	000a04c0 	call	a04c <__sflags>
    4670:	1025883a 	mov	r18,r2
    4674:	8009883a 	mov	r4,r16
    4678:	0023883a 	mov	r17,zero
    467c:	1000081e 	bne	r2,zero,46a0 <_fopen_r+0x5c>
    4680:	8805883a 	mov	r2,r17
    4684:	dfc00517 	ldw	ra,20(sp)
    4688:	dcc00417 	ldw	r19,16(sp)
    468c:	dc800317 	ldw	r18,12(sp)
    4690:	dc400217 	ldw	r17,8(sp)
    4694:	dc000117 	ldw	r16,4(sp)
    4698:	dec00604 	addi	sp,sp,24
    469c:	f800283a 	ret
    46a0:	00045540 	call	4554 <__sfp>
    46a4:	1023883a 	mov	r17,r2
    46a8:	980b883a 	mov	r5,r19
    46ac:	8009883a 	mov	r4,r16
    46b0:	01c06d84 	movi	r7,438
    46b4:	103ff226 	beq	r2,zero,4680 <_fopen_r+0x3c>
    46b8:	d9800017 	ldw	r6,0(sp)
    46bc:	0005dec0 	call	5dec <_open_r>
    46c0:	10001816 	blt	r2,zero,4724 <_fopen_r+0xe0>
    46c4:	00c00034 	movhi	r3,0
    46c8:	18d90f04 	addi	r3,r3,25660
    46cc:	923fffcc 	andi	r8,r18,65535
    46d0:	8880038d 	sth	r2,14(r17)
    46d4:	00800034 	movhi	r2,0
    46d8:	10992e04 	addi	r2,r2,25784
    46dc:	88800815 	stw	r2,32(r17)
    46e0:	88c00915 	stw	r3,36(r17)
    46e4:	00800034 	movhi	r2,0
    46e8:	1098f504 	addi	r2,r2,25556
    46ec:	00c00034 	movhi	r3,0
    46f0:	18d8f304 	addi	r3,r3,25548
    46f4:	4200400c 	andi	r8,r8,256
    46f8:	8c80030d 	sth	r18,12(r17)
    46fc:	8009883a 	mov	r4,r16
    4700:	880b883a 	mov	r5,r17
    4704:	000d883a 	mov	r6,zero
    4708:	01c00084 	movi	r7,2
    470c:	88800a15 	stw	r2,40(r17)
    4710:	88c00b15 	stw	r3,44(r17)
    4714:	8c400715 	stw	r17,28(r17)
    4718:	403fd926 	beq	r8,zero,4680 <_fopen_r+0x3c>
    471c:	0004cb00 	call	4cb0 <_fseek_r>
    4720:	003fd706 	br	4680 <_fopen_r+0x3c>
    4724:	00043dc0 	call	43dc <__sfp_lock_acquire>
    4728:	8800030d 	sth	zero,12(r17)
    472c:	00043e00 	call	43e0 <__sfp_lock_release>
    4730:	0023883a 	mov	r17,zero
    4734:	003fd206 	br	4680 <_fopen_r+0x3c>

00004738 <fopen>:
    4738:	01800074 	movhi	r6,1
    473c:	31890804 	addi	r6,r6,9248
    4740:	2007883a 	mov	r3,r4
    4744:	31000017 	ldw	r4,0(r6)
    4748:	280d883a 	mov	r6,r5
    474c:	180b883a 	mov	r5,r3
    4750:	00046441 	jmpi	4644 <_fopen_r>

00004754 <fprintf>:
    4754:	defffc04 	addi	sp,sp,-16
    4758:	dfc00115 	stw	ra,4(sp)
    475c:	d9800215 	stw	r6,8(sp)
    4760:	d9c00315 	stw	r7,12(sp)
    4764:	d8800204 	addi	r2,sp,8
    4768:	100d883a 	mov	r6,r2
    476c:	d8800015 	stw	r2,0(sp)
    4770:	00084ec0 	call	84ec <__vfprintf_internal>
    4774:	dfc00117 	ldw	ra,4(sp)
    4778:	dec00404 	addi	sp,sp,16
    477c:	f800283a 	ret

00004780 <_fprintf_r>:
    4780:	defffd04 	addi	sp,sp,-12
    4784:	2807883a 	mov	r3,r5
    4788:	dfc00115 	stw	ra,4(sp)
    478c:	d9c00215 	stw	r7,8(sp)
    4790:	d8800204 	addi	r2,sp,8
    4794:	300b883a 	mov	r5,r6
    4798:	1809883a 	mov	r4,r3
    479c:	100d883a 	mov	r6,r2
    47a0:	d8800015 	stw	r2,0(sp)
    47a4:	00084ec0 	call	84ec <__vfprintf_internal>
    47a8:	dfc00117 	ldw	ra,4(sp)
    47ac:	dec00304 	addi	sp,sp,12
    47b0:	f800283a 	ret

000047b4 <fputc>:
    47b4:	defffc04 	addi	sp,sp,-16
    47b8:	dc800215 	stw	r18,8(sp)
    47bc:	04800074 	movhi	r18,1
    47c0:	94890804 	addi	r18,r18,9248
    47c4:	90c00017 	ldw	r3,0(r18)
    47c8:	dc400115 	stw	r17,4(sp)
    47cc:	dc000015 	stw	r16,0(sp)
    47d0:	dfc00315 	stw	ra,12(sp)
    47d4:	2021883a 	mov	r16,r4
    47d8:	2823883a 	mov	r17,r5
    47dc:	18000326 	beq	r3,zero,47ec <fputc+0x38>
    47e0:	18800e17 	ldw	r2,56(r3)
    47e4:	1809883a 	mov	r4,r3
    47e8:	10000926 	beq	r2,zero,4810 <fputc+0x5c>
    47ec:	91000017 	ldw	r4,0(r18)
    47f0:	800b883a 	mov	r5,r16
    47f4:	880d883a 	mov	r6,r17
    47f8:	dfc00317 	ldw	ra,12(sp)
    47fc:	dc800217 	ldw	r18,8(sp)
    4800:	dc400117 	ldw	r17,4(sp)
    4804:	dc000017 	ldw	r16,0(sp)
    4808:	dec00404 	addi	sp,sp,16
    480c:	0005fe01 	jmpi	5fe0 <_putc_r>
    4810:	00043ec0 	call	43ec <__sinit>
    4814:	003ff506 	br	47ec <fputc+0x38>

00004818 <_fputc_r>:
    4818:	defffc04 	addi	sp,sp,-16
    481c:	dc800215 	stw	r18,8(sp)
    4820:	dc400115 	stw	r17,4(sp)
    4824:	dc000015 	stw	r16,0(sp)
    4828:	dfc00315 	stw	ra,12(sp)
    482c:	2021883a 	mov	r16,r4
    4830:	2823883a 	mov	r17,r5
    4834:	3025883a 	mov	r18,r6
    4838:	20000226 	beq	r4,zero,4844 <_fputc_r+0x2c>
    483c:	20800e17 	ldw	r2,56(r4)
    4840:	10000926 	beq	r2,zero,4868 <_fputc_r+0x50>
    4844:	8009883a 	mov	r4,r16
    4848:	880b883a 	mov	r5,r17
    484c:	900d883a 	mov	r6,r18
    4850:	dfc00317 	ldw	ra,12(sp)
    4854:	dc800217 	ldw	r18,8(sp)
    4858:	dc400117 	ldw	r17,4(sp)
    485c:	dc000017 	ldw	r16,0(sp)
    4860:	dec00404 	addi	sp,sp,16
    4864:	0005fe01 	jmpi	5fe0 <_putc_r>
    4868:	00043ec0 	call	43ec <__sinit>
    486c:	003ff506 	br	4844 <_fputc_r+0x2c>

00004870 <_malloc_trim_r>:
    4870:	defffb04 	addi	sp,sp,-20
    4874:	dcc00315 	stw	r19,12(sp)
    4878:	04c00074 	movhi	r19,1
    487c:	9cc26204 	addi	r19,r19,2440
    4880:	dc800215 	stw	r18,8(sp)
    4884:	dc400115 	stw	r17,4(sp)
    4888:	dc000015 	stw	r16,0(sp)
    488c:	2823883a 	mov	r17,r5
    4890:	2025883a 	mov	r18,r4
    4894:	dfc00415 	stw	ra,16(sp)
    4898:	000d7300 	call	d730 <__malloc_lock>
    489c:	98800217 	ldw	r2,8(r19)
    48a0:	9009883a 	mov	r4,r18
    48a4:	000b883a 	mov	r5,zero
    48a8:	10c00117 	ldw	r3,4(r2)
    48ac:	00bfff04 	movi	r2,-4
    48b0:	18a0703a 	and	r16,r3,r2
    48b4:	8463c83a 	sub	r17,r16,r17
    48b8:	8c43fbc4 	addi	r17,r17,4079
    48bc:	8822d33a 	srli	r17,r17,12
    48c0:	0083ffc4 	movi	r2,4095
    48c4:	8c7fffc4 	addi	r17,r17,-1
    48c8:	8822933a 	slli	r17,r17,12
    48cc:	1440060e 	bge	r2,r17,48e8 <_malloc_trim_r+0x78>
    48d0:	000635c0 	call	635c <_sbrk_r>
    48d4:	98c00217 	ldw	r3,8(r19)
    48d8:	9009883a 	mov	r4,r18
    48dc:	044bc83a 	sub	r5,zero,r17
    48e0:	80c7883a 	add	r3,r16,r3
    48e4:	10c00926 	beq	r2,r3,490c <_malloc_trim_r+0x9c>
    48e8:	000d7340 	call	d734 <__malloc_unlock>
    48ec:	0005883a 	mov	r2,zero
    48f0:	dfc00417 	ldw	ra,16(sp)
    48f4:	dcc00317 	ldw	r19,12(sp)
    48f8:	dc800217 	ldw	r18,8(sp)
    48fc:	dc400117 	ldw	r17,4(sp)
    4900:	dc000017 	ldw	r16,0(sp)
    4904:	dec00504 	addi	sp,sp,20
    4908:	f800283a 	ret
    490c:	9009883a 	mov	r4,r18
    4910:	000635c0 	call	635c <_sbrk_r>
    4914:	844dc83a 	sub	r6,r16,r17
    4918:	00ffffc4 	movi	r3,-1
    491c:	9009883a 	mov	r4,r18
    4920:	000b883a 	mov	r5,zero
    4924:	01c00074 	movhi	r7,1
    4928:	39d0f604 	addi	r7,r7,17368
    492c:	31800054 	ori	r6,r6,1
    4930:	10c00926 	beq	r2,r3,4958 <_malloc_trim_r+0xe8>
    4934:	38800017 	ldw	r2,0(r7)
    4938:	98c00217 	ldw	r3,8(r19)
    493c:	9009883a 	mov	r4,r18
    4940:	1445c83a 	sub	r2,r2,r17
    4944:	38800015 	stw	r2,0(r7)
    4948:	19800115 	stw	r6,4(r3)
    494c:	000d7340 	call	d734 <__malloc_unlock>
    4950:	00800044 	movi	r2,1
    4954:	003fe606 	br	48f0 <_malloc_trim_r+0x80>
    4958:	000635c0 	call	635c <_sbrk_r>
    495c:	99800217 	ldw	r6,8(r19)
    4960:	100f883a 	mov	r7,r2
    4964:	9009883a 	mov	r4,r18
    4968:	1187c83a 	sub	r3,r2,r6
    496c:	008003c4 	movi	r2,15
    4970:	19400054 	ori	r5,r3,1
    4974:	10ffdc0e 	bge	r2,r3,48e8 <_malloc_trim_r+0x78>
    4978:	00800074 	movhi	r2,1
    497c:	10890b04 	addi	r2,r2,9260
    4980:	10c00017 	ldw	r3,0(r2)
    4984:	00800074 	movhi	r2,1
    4988:	1090f604 	addi	r2,r2,17368
    498c:	31400115 	stw	r5,4(r6)
    4990:	38c7c83a 	sub	r3,r7,r3
    4994:	10c00015 	stw	r3,0(r2)
    4998:	003fd306 	br	48e8 <_malloc_trim_r+0x78>

0000499c <_free_r>:
    499c:	defffd04 	addi	sp,sp,-12
    49a0:	dc400115 	stw	r17,4(sp)
    49a4:	dc000015 	stw	r16,0(sp)
    49a8:	dfc00215 	stw	ra,8(sp)
    49ac:	2821883a 	mov	r16,r5
    49b0:	2023883a 	mov	r17,r4
    49b4:	28005a26 	beq	r5,zero,4b20 <_free_r+0x184>
    49b8:	000d7300 	call	d730 <__malloc_lock>
    49bc:	823ffe04 	addi	r8,r16,-8
    49c0:	41400117 	ldw	r5,4(r8)
    49c4:	00bfff84 	movi	r2,-2
    49c8:	02800074 	movhi	r10,1
    49cc:	52826204 	addi	r10,r10,2440
    49d0:	288e703a 	and	r7,r5,r2
    49d4:	41cd883a 	add	r6,r8,r7
    49d8:	30c00117 	ldw	r3,4(r6)
    49dc:	51000217 	ldw	r4,8(r10)
    49e0:	00bfff04 	movi	r2,-4
    49e4:	1892703a 	and	r9,r3,r2
    49e8:	5017883a 	mov	r11,r10
    49ec:	31006726 	beq	r6,r4,4b8c <_free_r+0x1f0>
    49f0:	2880004c 	andi	r2,r5,1
    49f4:	1005003a 	cmpeq	r2,r2,zero
    49f8:	32400115 	stw	r9,4(r6)
    49fc:	10001a1e 	bne	r2,zero,4a68 <_free_r+0xcc>
    4a00:	000b883a 	mov	r5,zero
    4a04:	3247883a 	add	r3,r6,r9
    4a08:	18800117 	ldw	r2,4(r3)
    4a0c:	1080004c 	andi	r2,r2,1
    4a10:	1000231e 	bne	r2,zero,4aa0 <_free_r+0x104>
    4a14:	280ac03a 	cmpne	r5,r5,zero
    4a18:	3a4f883a 	add	r7,r7,r9
    4a1c:	2800451e 	bne	r5,zero,4b34 <_free_r+0x198>
    4a20:	31000217 	ldw	r4,8(r6)
    4a24:	00800074 	movhi	r2,1
    4a28:	10826404 	addi	r2,r2,2448
    4a2c:	20807b26 	beq	r4,r2,4c1c <_free_r+0x280>
    4a30:	30800317 	ldw	r2,12(r6)
    4a34:	3a07883a 	add	r3,r7,r8
    4a38:	19c00015 	stw	r7,0(r3)
    4a3c:	11000215 	stw	r4,8(r2)
    4a40:	20800315 	stw	r2,12(r4)
    4a44:	38800054 	ori	r2,r7,1
    4a48:	40800115 	stw	r2,4(r8)
    4a4c:	28001a26 	beq	r5,zero,4ab8 <_free_r+0x11c>
    4a50:	8809883a 	mov	r4,r17
    4a54:	dfc00217 	ldw	ra,8(sp)
    4a58:	dc400117 	ldw	r17,4(sp)
    4a5c:	dc000017 	ldw	r16,0(sp)
    4a60:	dec00304 	addi	sp,sp,12
    4a64:	000d7341 	jmpi	d734 <__malloc_unlock>
    4a68:	80bffe17 	ldw	r2,-8(r16)
    4a6c:	50c00204 	addi	r3,r10,8
    4a70:	4091c83a 	sub	r8,r8,r2
    4a74:	41000217 	ldw	r4,8(r8)
    4a78:	388f883a 	add	r7,r7,r2
    4a7c:	20c06126 	beq	r4,r3,4c04 <_free_r+0x268>
    4a80:	40800317 	ldw	r2,12(r8)
    4a84:	3247883a 	add	r3,r6,r9
    4a88:	000b883a 	mov	r5,zero
    4a8c:	11000215 	stw	r4,8(r2)
    4a90:	20800315 	stw	r2,12(r4)
    4a94:	18800117 	ldw	r2,4(r3)
    4a98:	1080004c 	andi	r2,r2,1
    4a9c:	103fdd26 	beq	r2,zero,4a14 <_free_r+0x78>
    4aa0:	38800054 	ori	r2,r7,1
    4aa4:	3a07883a 	add	r3,r7,r8
    4aa8:	280ac03a 	cmpne	r5,r5,zero
    4aac:	40800115 	stw	r2,4(r8)
    4ab0:	19c00015 	stw	r7,0(r3)
    4ab4:	283fe61e 	bne	r5,zero,4a50 <_free_r+0xb4>
    4ab8:	00807fc4 	movi	r2,511
    4abc:	11c01f2e 	bgeu	r2,r7,4b3c <_free_r+0x1a0>
    4ac0:	3806d27a 	srli	r3,r7,9
    4ac4:	1800481e 	bne	r3,zero,4be8 <_free_r+0x24c>
    4ac8:	3804d0fa 	srli	r2,r7,3
    4acc:	100690fa 	slli	r3,r2,3
    4ad0:	1acd883a 	add	r6,r3,r11
    4ad4:	31400217 	ldw	r5,8(r6)
    4ad8:	31405926 	beq	r6,r5,4c40 <_free_r+0x2a4>
    4adc:	28800117 	ldw	r2,4(r5)
    4ae0:	00ffff04 	movi	r3,-4
    4ae4:	10c4703a 	and	r2,r2,r3
    4ae8:	3880022e 	bgeu	r7,r2,4af4 <_free_r+0x158>
    4aec:	29400217 	ldw	r5,8(r5)
    4af0:	317ffa1e 	bne	r6,r5,4adc <_free_r+0x140>
    4af4:	29800317 	ldw	r6,12(r5)
    4af8:	41800315 	stw	r6,12(r8)
    4afc:	41400215 	stw	r5,8(r8)
    4b00:	8809883a 	mov	r4,r17
    4b04:	2a000315 	stw	r8,12(r5)
    4b08:	32000215 	stw	r8,8(r6)
    4b0c:	dfc00217 	ldw	ra,8(sp)
    4b10:	dc400117 	ldw	r17,4(sp)
    4b14:	dc000017 	ldw	r16,0(sp)
    4b18:	dec00304 	addi	sp,sp,12
    4b1c:	000d7341 	jmpi	d734 <__malloc_unlock>
    4b20:	dfc00217 	ldw	ra,8(sp)
    4b24:	dc400117 	ldw	r17,4(sp)
    4b28:	dc000017 	ldw	r16,0(sp)
    4b2c:	dec00304 	addi	sp,sp,12
    4b30:	f800283a 	ret
    4b34:	31000217 	ldw	r4,8(r6)
    4b38:	003fbd06 	br	4a30 <_free_r+0x94>
    4b3c:	3806d0fa 	srli	r3,r7,3
    4b40:	00800044 	movi	r2,1
    4b44:	51400117 	ldw	r5,4(r10)
    4b48:	180890fa 	slli	r4,r3,3
    4b4c:	1807d0ba 	srai	r3,r3,2
    4b50:	22c9883a 	add	r4,r4,r11
    4b54:	21800217 	ldw	r6,8(r4)
    4b58:	10c4983a 	sll	r2,r2,r3
    4b5c:	41000315 	stw	r4,12(r8)
    4b60:	41800215 	stw	r6,8(r8)
    4b64:	288ab03a 	or	r5,r5,r2
    4b68:	22000215 	stw	r8,8(r4)
    4b6c:	8809883a 	mov	r4,r17
    4b70:	51400115 	stw	r5,4(r10)
    4b74:	32000315 	stw	r8,12(r6)
    4b78:	dfc00217 	ldw	ra,8(sp)
    4b7c:	dc400117 	ldw	r17,4(sp)
    4b80:	dc000017 	ldw	r16,0(sp)
    4b84:	dec00304 	addi	sp,sp,12
    4b88:	000d7341 	jmpi	d734 <__malloc_unlock>
    4b8c:	2880004c 	andi	r2,r5,1
    4b90:	3a4d883a 	add	r6,r7,r9
    4b94:	1000071e 	bne	r2,zero,4bb4 <_free_r+0x218>
    4b98:	80bffe17 	ldw	r2,-8(r16)
    4b9c:	4091c83a 	sub	r8,r8,r2
    4ba0:	41000317 	ldw	r4,12(r8)
    4ba4:	40c00217 	ldw	r3,8(r8)
    4ba8:	308d883a 	add	r6,r6,r2
    4bac:	20c00215 	stw	r3,8(r4)
    4bb0:	19000315 	stw	r4,12(r3)
    4bb4:	00800074 	movhi	r2,1
    4bb8:	10890a04 	addi	r2,r2,9256
    4bbc:	11000017 	ldw	r4,0(r2)
    4bc0:	30c00054 	ori	r3,r6,1
    4bc4:	52000215 	stw	r8,8(r10)
    4bc8:	40c00115 	stw	r3,4(r8)
    4bcc:	313fa036 	bltu	r6,r4,4a50 <_free_r+0xb4>
    4bd0:	00800074 	movhi	r2,1
    4bd4:	1090e604 	addi	r2,r2,17304
    4bd8:	11400017 	ldw	r5,0(r2)
    4bdc:	8809883a 	mov	r4,r17
    4be0:	00048700 	call	4870 <_malloc_trim_r>
    4be4:	003f9a06 	br	4a50 <_free_r+0xb4>
    4be8:	00800104 	movi	r2,4
    4bec:	10c0072e 	bgeu	r2,r3,4c0c <_free_r+0x270>
    4bf0:	00800504 	movi	r2,20
    4bf4:	10c01936 	bltu	r2,r3,4c5c <_free_r+0x2c0>
    4bf8:	188016c4 	addi	r2,r3,91
    4bfc:	100690fa 	slli	r3,r2,3
    4c00:	003fb306 	br	4ad0 <_free_r+0x134>
    4c04:	01400044 	movi	r5,1
    4c08:	003f7e06 	br	4a04 <_free_r+0x68>
    4c0c:	3804d1ba 	srli	r2,r7,6
    4c10:	10800e04 	addi	r2,r2,56
    4c14:	100690fa 	slli	r3,r2,3
    4c18:	003fad06 	br	4ad0 <_free_r+0x134>
    4c1c:	22000315 	stw	r8,12(r4)
    4c20:	22000215 	stw	r8,8(r4)
    4c24:	3a05883a 	add	r2,r7,r8
    4c28:	38c00054 	ori	r3,r7,1
    4c2c:	11c00015 	stw	r7,0(r2)
    4c30:	41000215 	stw	r4,8(r8)
    4c34:	40c00115 	stw	r3,4(r8)
    4c38:	41000315 	stw	r4,12(r8)
    4c3c:	003f8406 	br	4a50 <_free_r+0xb4>
    4c40:	1005d0ba 	srai	r2,r2,2
    4c44:	00c00044 	movi	r3,1
    4c48:	51000117 	ldw	r4,4(r10)
    4c4c:	1886983a 	sll	r3,r3,r2
    4c50:	20c8b03a 	or	r4,r4,r3
    4c54:	51000115 	stw	r4,4(r10)
    4c58:	003fa706 	br	4af8 <_free_r+0x15c>
    4c5c:	00801504 	movi	r2,84
    4c60:	10c00436 	bltu	r2,r3,4c74 <_free_r+0x2d8>
    4c64:	3804d33a 	srli	r2,r7,12
    4c68:	10801b84 	addi	r2,r2,110
    4c6c:	100690fa 	slli	r3,r2,3
    4c70:	003f9706 	br	4ad0 <_free_r+0x134>
    4c74:	00805504 	movi	r2,340
    4c78:	10c00436 	bltu	r2,r3,4c8c <_free_r+0x2f0>
    4c7c:	3804d3fa 	srli	r2,r7,15
    4c80:	10801dc4 	addi	r2,r2,119
    4c84:	100690fa 	slli	r3,r2,3
    4c88:	003f9106 	br	4ad0 <_free_r+0x134>
    4c8c:	00815504 	movi	r2,1364
    4c90:	10c0032e 	bgeu	r2,r3,4ca0 <_free_r+0x304>
    4c94:	00801f84 	movi	r2,126
    4c98:	00c0fc04 	movi	r3,1008
    4c9c:	003f8c06 	br	4ad0 <_free_r+0x134>
    4ca0:	3804d4ba 	srli	r2,r7,18
    4ca4:	10801f04 	addi	r2,r2,124
    4ca8:	100690fa 	slli	r3,r2,3
    4cac:	003f8806 	br	4ad0 <_free_r+0x134>

00004cb0 <_fseek_r>:
    4cb0:	deffe804 	addi	sp,sp,-96
    4cb4:	dd801515 	stw	r22,84(sp)
    4cb8:	dcc01215 	stw	r19,72(sp)
    4cbc:	dc801115 	stw	r18,68(sp)
    4cc0:	dc000f15 	stw	r16,60(sp)
    4cc4:	dfc01715 	stw	ra,92(sp)
    4cc8:	ddc01615 	stw	r23,88(sp)
    4ccc:	dd401415 	stw	r21,80(sp)
    4cd0:	dd001315 	stw	r20,76(sp)
    4cd4:	dc401015 	stw	r17,64(sp)
    4cd8:	2025883a 	mov	r18,r4
    4cdc:	2821883a 	mov	r16,r5
    4ce0:	302d883a 	mov	r22,r6
    4ce4:	3827883a 	mov	r19,r7
    4ce8:	20000226 	beq	r4,zero,4cf4 <_fseek_r+0x44>
    4cec:	20800e17 	ldw	r2,56(r4)
    4cf0:	10007826 	beq	r2,zero,4ed4 <_fseek_r+0x224>
    4cf4:	8080030b 	ldhu	r2,12(r16)
    4cf8:	00c04204 	movi	r3,264
    4cfc:	1080420c 	andi	r2,r2,264
    4d00:	10c07926 	beq	r2,r3,4ee8 <_fseek_r+0x238>
    4d04:	85400a17 	ldw	r21,40(r16)
    4d08:	a800ea26 	beq	r21,zero,50b4 <_fseek_r+0x404>
    4d0c:	00800044 	movi	r2,1
    4d10:	98805f26 	beq	r19,r2,4e90 <_fseek_r+0x1e0>
    4d14:	00800084 	movi	r2,2
    4d18:	98801026 	beq	r19,r2,4d5c <_fseek_r+0xac>
    4d1c:	98000f26 	beq	r19,zero,4d5c <_fseek_r+0xac>
    4d20:	00800584 	movi	r2,22
    4d24:	013fffc4 	movi	r4,-1
    4d28:	90800015 	stw	r2,0(r18)
    4d2c:	2005883a 	mov	r2,r4
    4d30:	dfc01717 	ldw	ra,92(sp)
    4d34:	ddc01617 	ldw	r23,88(sp)
    4d38:	dd801517 	ldw	r22,84(sp)
    4d3c:	dd401417 	ldw	r21,80(sp)
    4d40:	dd001317 	ldw	r20,76(sp)
    4d44:	dcc01217 	ldw	r19,72(sp)
    4d48:	dc801117 	ldw	r18,68(sp)
    4d4c:	dc401017 	ldw	r17,64(sp)
    4d50:	dc000f17 	ldw	r16,60(sp)
    4d54:	dec01804 	addi	sp,sp,96
    4d58:	f800283a 	ret
    4d5c:	81800417 	ldw	r6,16(r16)
    4d60:	0023883a 	mov	r17,zero
    4d64:	002f883a 	mov	r23,zero
    4d68:	3000a626 	beq	r6,zero,5004 <_fseek_r+0x354>
    4d6c:	8100030b 	ldhu	r4,12(r16)
    4d70:	2082068c 	andi	r2,r4,2074
    4d74:	1000081e 	bne	r2,zero,4d98 <_fseek_r+0xe8>
    4d78:	2081000c 	andi	r2,r4,1024
    4d7c:	10001b1e 	bne	r2,zero,4dec <_fseek_r+0x13c>
    4d80:	00800034 	movhi	r2,0
    4d84:	1098f504 	addi	r2,r2,25556
    4d88:	a8800926 	beq	r21,r2,4db0 <_fseek_r+0x100>
    4d8c:	8080030b 	ldhu	r2,12(r16)
    4d90:	10820014 	ori	r2,r2,2048
    4d94:	8080030d 	sth	r2,12(r16)
    4d98:	9009883a 	mov	r4,r18
    4d9c:	800b883a 	mov	r5,r16
    4da0:	00041540 	call	4154 <_fflush_r>
    4da4:	1000a326 	beq	r2,zero,5034 <_fseek_r+0x384>
    4da8:	013fffc4 	movi	r4,-1
    4dac:	003fdf06 	br	4d2c <_fseek_r+0x7c>
    4db0:	8140038f 	ldh	r5,14(r16)
    4db4:	283ff516 	blt	r5,zero,4d8c <_fseek_r+0xdc>
    4db8:	9009883a 	mov	r4,r18
    4dbc:	d80d883a 	mov	r6,sp
    4dc0:	00051100 	call	5110 <_fstat_r>
    4dc4:	103ff11e 	bne	r2,zero,4d8c <_fseek_r+0xdc>
    4dc8:	d8800117 	ldw	r2,4(sp)
    4dcc:	00e00014 	movui	r3,32768
    4dd0:	10bc000c 	andi	r2,r2,61440
    4dd4:	10ffed1e 	bne	r2,r3,4d8c <_fseek_r+0xdc>
    4dd8:	80c0030b 	ldhu	r3,12(r16)
    4ddc:	00810004 	movi	r2,1024
    4de0:	80801315 	stw	r2,76(r16)
    4de4:	1886b03a 	or	r3,r3,r2
    4de8:	80c0030d 	sth	r3,12(r16)
    4dec:	9800701e 	bne	r19,zero,4fb0 <_fseek_r+0x300>
    4df0:	b029883a 	mov	r20,r22
    4df4:	b804c03a 	cmpne	r2,r23,zero
    4df8:	10003f1e 	bne	r2,zero,4ef8 <_fseek_r+0x248>
    4dfc:	8100030b 	ldhu	r4,12(r16)
    4e00:	2084000c 	andi	r2,r4,4096
    4e04:	1000a126 	beq	r2,zero,508c <_fseek_r+0x3dc>
    4e08:	81801417 	ldw	r6,80(r16)
    4e0c:	80c00117 	ldw	r3,4(r16)
    4e10:	81400c17 	ldw	r5,48(r16)
    4e14:	30e3c83a 	sub	r17,r6,r3
    4e18:	28008026 	beq	r5,zero,501c <_fseek_r+0x36c>
    4e1c:	81c00f17 	ldw	r7,60(r16)
    4e20:	89e3c83a 	sub	r17,r17,r7
    4e24:	80800e17 	ldw	r2,56(r16)
    4e28:	81800417 	ldw	r6,16(r16)
    4e2c:	88c7883a 	add	r3,r17,r3
    4e30:	1185c83a 	sub	r2,r2,r6
    4e34:	11cf883a 	add	r7,r2,r7
    4e38:	1887c83a 	sub	r3,r3,r2
    4e3c:	2088000c 	andi	r2,r4,8192
    4e40:	10003e1e 	bne	r2,zero,4f3c <_fseek_r+0x28c>
    4e44:	a0c03d16 	blt	r20,r3,4f3c <_fseek_r+0x28c>
    4e48:	38c5883a 	add	r2,r7,r3
    4e4c:	a0803b2e 	bgeu	r20,r2,4f3c <_fseek_r+0x28c>
    4e50:	a0c5c83a 	sub	r2,r20,r3
    4e54:	3887c83a 	sub	r3,r7,r2
    4e58:	3085883a 	add	r2,r6,r2
    4e5c:	80800015 	stw	r2,0(r16)
    4e60:	80c00115 	stw	r3,4(r16)
    4e64:	28000526 	beq	r5,zero,4e7c <_fseek_r+0x1cc>
    4e68:	80801004 	addi	r2,r16,64
    4e6c:	28800226 	beq	r5,r2,4e78 <_fseek_r+0x1c8>
    4e70:	9009883a 	mov	r4,r18
    4e74:	000499c0 	call	499c <_free_r>
    4e78:	80000c15 	stw	zero,48(r16)
    4e7c:	8080030b 	ldhu	r2,12(r16)
    4e80:	0009883a 	mov	r4,zero
    4e84:	10bff7cc 	andi	r2,r2,65503
    4e88:	8080030d 	sth	r2,12(r16)
    4e8c:	003fa706 	br	4d2c <_fseek_r+0x7c>
    4e90:	9009883a 	mov	r4,r18
    4e94:	800b883a 	mov	r5,r16
    4e98:	00041540 	call	4154 <_fflush_r>
    4e9c:	8100030b 	ldhu	r4,12(r16)
    4ea0:	2084000c 	andi	r2,r4,4096
    4ea4:	10008726 	beq	r2,zero,50c4 <_fseek_r+0x414>
    4ea8:	84401417 	ldw	r17,80(r16)
    4eac:	2080010c 	andi	r2,r4,4
    4eb0:	1000171e 	bne	r2,zero,4f10 <_fseek_r+0x260>
    4eb4:	2080020c 	andi	r2,r4,8
    4eb8:	10003b26 	beq	r2,zero,4fa8 <_fseek_r+0x2f8>
    4ebc:	80800017 	ldw	r2,0(r16)
    4ec0:	10003926 	beq	r2,zero,4fa8 <_fseek_r+0x2f8>
    4ec4:	81800417 	ldw	r6,16(r16)
    4ec8:	1185c83a 	sub	r2,r2,r6
    4ecc:	88a3883a 	add	r17,r17,r2
    4ed0:	00001606 	br	4f2c <_fseek_r+0x27c>
    4ed4:	00043ec0 	call	43ec <__sinit>
    4ed8:	8080030b 	ldhu	r2,12(r16)
    4edc:	00c04204 	movi	r3,264
    4ee0:	1080420c 	andi	r2,r2,264
    4ee4:	10ff871e 	bne	r2,r3,4d04 <_fseek_r+0x54>
    4ee8:	9009883a 	mov	r4,r18
    4eec:	800b883a 	mov	r5,r16
    4ef0:	00041540 	call	4154 <_fflush_r>
    4ef4:	003f8306 	br	4d04 <_fseek_r+0x54>
    4ef8:	81400c17 	ldw	r5,48(r16)
    4efc:	28004526 	beq	r5,zero,5014 <_fseek_r+0x364>
    4f00:	8100030b 	ldhu	r4,12(r16)
    4f04:	80c00117 	ldw	r3,4(r16)
    4f08:	81c00f17 	ldw	r7,60(r16)
    4f0c:	003fc506 	br	4e24 <_fseek_r+0x174>
    4f10:	80c00117 	ldw	r3,4(r16)
    4f14:	80800c17 	ldw	r2,48(r16)
    4f18:	88e3c83a 	sub	r17,r17,r3
    4f1c:	10002226 	beq	r2,zero,4fa8 <_fseek_r+0x2f8>
    4f20:	81c00f17 	ldw	r7,60(r16)
    4f24:	81800417 	ldw	r6,16(r16)
    4f28:	89e3c83a 	sub	r17,r17,r7
    4f2c:	b46d883a 	add	r22,r22,r17
    4f30:	0027883a 	mov	r19,zero
    4f34:	05c00044 	movi	r23,1
    4f38:	003f8b06 	br	4d68 <_fseek_r+0xb8>
    4f3c:	80801317 	ldw	r2,76(r16)
    4f40:	81400717 	ldw	r5,28(r16)
    4f44:	9009883a 	mov	r4,r18
    4f48:	0085c83a 	sub	r2,zero,r2
    4f4c:	a0a2703a 	and	r17,r20,r2
    4f50:	880d883a 	mov	r6,r17
    4f54:	000f883a 	mov	r7,zero
    4f58:	a83ee83a 	callr	r21
    4f5c:	00ffffc4 	movi	r3,-1
    4f60:	10ff8d26 	beq	r2,r3,4d98 <_fseek_r+0xe8>
    4f64:	80800417 	ldw	r2,16(r16)
    4f68:	81400c17 	ldw	r5,48(r16)
    4f6c:	80000115 	stw	zero,4(r16)
    4f70:	80800015 	stw	r2,0(r16)
    4f74:	28000526 	beq	r5,zero,4f8c <_fseek_r+0x2dc>
    4f78:	80801004 	addi	r2,r16,64
    4f7c:	28800226 	beq	r5,r2,4f88 <_fseek_r+0x2d8>
    4f80:	9009883a 	mov	r4,r18
    4f84:	000499c0 	call	499c <_free_r>
    4f88:	80000c15 	stw	zero,48(r16)
    4f8c:	8080030b 	ldhu	r2,12(r16)
    4f90:	a463c83a 	sub	r17,r20,r17
    4f94:	10bff7cc 	andi	r2,r2,65503
    4f98:	8080030d 	sth	r2,12(r16)
    4f9c:	88000c1e 	bne	r17,zero,4fd0 <_fseek_r+0x320>
    4fa0:	0009883a 	mov	r4,zero
    4fa4:	003f6106 	br	4d2c <_fseek_r+0x7c>
    4fa8:	81800417 	ldw	r6,16(r16)
    4fac:	003fdf06 	br	4f2c <_fseek_r+0x27c>
    4fb0:	8140038f 	ldh	r5,14(r16)
    4fb4:	9009883a 	mov	r4,r18
    4fb8:	d80d883a 	mov	r6,sp
    4fbc:	00051100 	call	5110 <_fstat_r>
    4fc0:	103f751e 	bne	r2,zero,4d98 <_fseek_r+0xe8>
    4fc4:	d8800417 	ldw	r2,16(sp)
    4fc8:	b0a9883a 	add	r20,r22,r2
    4fcc:	003f8906 	br	4df4 <_fseek_r+0x144>
    4fd0:	9009883a 	mov	r4,r18
    4fd4:	800b883a 	mov	r5,r16
    4fd8:	000617c0 	call	617c <__srefill_r>
    4fdc:	103f6e1e 	bne	r2,zero,4d98 <_fseek_r+0xe8>
    4fe0:	80c00117 	ldw	r3,4(r16)
    4fe4:	1c7f6c36 	bltu	r3,r17,4d98 <_fseek_r+0xe8>
    4fe8:	80800017 	ldw	r2,0(r16)
    4fec:	1c47c83a 	sub	r3,r3,r17
    4ff0:	0009883a 	mov	r4,zero
    4ff4:	1445883a 	add	r2,r2,r17
    4ff8:	80c00115 	stw	r3,4(r16)
    4ffc:	80800015 	stw	r2,0(r16)
    5000:	003f4a06 	br	4d2c <_fseek_r+0x7c>
    5004:	9009883a 	mov	r4,r18
    5008:	800b883a 	mov	r5,r16
    500c:	00053e00 	call	53e0 <__smakebuf_r>
    5010:	003f5606 	br	4d6c <_fseek_r+0xbc>
    5014:	8100030b 	ldhu	r4,12(r16)
    5018:	80c00117 	ldw	r3,4(r16)
    501c:	80800017 	ldw	r2,0(r16)
    5020:	81800417 	ldw	r6,16(r16)
    5024:	1185c83a 	sub	r2,r2,r6
    5028:	10cf883a 	add	r7,r2,r3
    502c:	8887c83a 	sub	r3,r17,r2
    5030:	003f8206 	br	4e3c <_fseek_r+0x18c>
    5034:	81400717 	ldw	r5,28(r16)
    5038:	b00d883a 	mov	r6,r22
    503c:	980f883a 	mov	r7,r19
    5040:	9009883a 	mov	r4,r18
    5044:	a83ee83a 	callr	r21
    5048:	00ffffc4 	movi	r3,-1
    504c:	10ff5626 	beq	r2,r3,4da8 <_fseek_r+0xf8>
    5050:	81400c17 	ldw	r5,48(r16)
    5054:	28000526 	beq	r5,zero,506c <_fseek_r+0x3bc>
    5058:	80801004 	addi	r2,r16,64
    505c:	28800226 	beq	r5,r2,5068 <_fseek_r+0x3b8>
    5060:	9009883a 	mov	r4,r18
    5064:	000499c0 	call	499c <_free_r>
    5068:	80000c15 	stw	zero,48(r16)
    506c:	8080030b 	ldhu	r2,12(r16)
    5070:	80c00417 	ldw	r3,16(r16)
    5074:	0009883a 	mov	r4,zero
    5078:	10bdf7cc 	andi	r2,r2,63455
    507c:	8080030d 	sth	r2,12(r16)
    5080:	80c00015 	stw	r3,0(r16)
    5084:	80000115 	stw	zero,4(r16)
    5088:	003f2806 	br	4d2c <_fseek_r+0x7c>
    508c:	81400717 	ldw	r5,28(r16)
    5090:	000d883a 	mov	r6,zero
    5094:	9009883a 	mov	r4,r18
    5098:	01c00044 	movi	r7,1
    509c:	a83ee83a 	callr	r21
    50a0:	100d883a 	mov	r6,r2
    50a4:	00bfffc4 	movi	r2,-1
    50a8:	30bf3b26 	beq	r6,r2,4d98 <_fseek_r+0xe8>
    50ac:	8100030b 	ldhu	r4,12(r16)
    50b0:	003f5606 	br	4e0c <_fseek_r+0x15c>
    50b4:	00800744 	movi	r2,29
    50b8:	013fffc4 	movi	r4,-1
    50bc:	90800015 	stw	r2,0(r18)
    50c0:	003f1a06 	br	4d2c <_fseek_r+0x7c>
    50c4:	81400717 	ldw	r5,28(r16)
    50c8:	980f883a 	mov	r7,r19
    50cc:	9009883a 	mov	r4,r18
    50d0:	000d883a 	mov	r6,zero
    50d4:	a83ee83a 	callr	r21
    50d8:	1023883a 	mov	r17,r2
    50dc:	00bfffc4 	movi	r2,-1
    50e0:	88bf3126 	beq	r17,r2,4da8 <_fseek_r+0xf8>
    50e4:	8100030b 	ldhu	r4,12(r16)
    50e8:	003f7006 	br	4eac <_fseek_r+0x1fc>

000050ec <fseek>:
    50ec:	00800074 	movhi	r2,1
    50f0:	10890804 	addi	r2,r2,9248
    50f4:	2013883a 	mov	r9,r4
    50f8:	11000017 	ldw	r4,0(r2)
    50fc:	2805883a 	mov	r2,r5
    5100:	300f883a 	mov	r7,r6
    5104:	480b883a 	mov	r5,r9
    5108:	100d883a 	mov	r6,r2
    510c:	0004cb01 	jmpi	4cb0 <_fseek_r>

00005110 <_fstat_r>:
    5110:	defffd04 	addi	sp,sp,-12
    5114:	dc000015 	stw	r16,0(sp)
    5118:	04000074 	movhi	r16,1
    511c:	8410e504 	addi	r16,r16,17300
    5120:	dc400115 	stw	r17,4(sp)
    5124:	80000015 	stw	zero,0(r16)
    5128:	2023883a 	mov	r17,r4
    512c:	2809883a 	mov	r4,r5
    5130:	300b883a 	mov	r5,r6
    5134:	dfc00215 	stw	ra,8(sp)
    5138:	000d2640 	call	d264 <fstat>
    513c:	1007883a 	mov	r3,r2
    5140:	00bfffc4 	movi	r2,-1
    5144:	18800626 	beq	r3,r2,5160 <_fstat_r+0x50>
    5148:	1805883a 	mov	r2,r3
    514c:	dfc00217 	ldw	ra,8(sp)
    5150:	dc400117 	ldw	r17,4(sp)
    5154:	dc000017 	ldw	r16,0(sp)
    5158:	dec00304 	addi	sp,sp,12
    515c:	f800283a 	ret
    5160:	80800017 	ldw	r2,0(r16)
    5164:	103ff826 	beq	r2,zero,5148 <_fstat_r+0x38>
    5168:	88800015 	stw	r2,0(r17)
    516c:	1805883a 	mov	r2,r3
    5170:	dfc00217 	ldw	ra,8(sp)
    5174:	dc400117 	ldw	r17,4(sp)
    5178:	dc000017 	ldw	r16,0(sp)
    517c:	dec00304 	addi	sp,sp,12
    5180:	f800283a 	ret

00005184 <_fwalk_reent>:
    5184:	defff704 	addi	sp,sp,-36
    5188:	dcc00315 	stw	r19,12(sp)
    518c:	24c0b804 	addi	r19,r4,736
    5190:	dd800615 	stw	r22,24(sp)
    5194:	dd400515 	stw	r21,20(sp)
    5198:	dfc00815 	stw	ra,32(sp)
    519c:	ddc00715 	stw	r23,28(sp)
    51a0:	dd000415 	stw	r20,16(sp)
    51a4:	dc800215 	stw	r18,8(sp)
    51a8:	dc400115 	stw	r17,4(sp)
    51ac:	dc000015 	stw	r16,0(sp)
    51b0:	202b883a 	mov	r21,r4
    51b4:	282d883a 	mov	r22,r5
    51b8:	00043dc0 	call	43dc <__sfp_lock_acquire>
    51bc:	98002126 	beq	r19,zero,5244 <_fwalk_reent+0xc0>
    51c0:	002f883a 	mov	r23,zero
    51c4:	9c800117 	ldw	r18,4(r19)
    51c8:	9c000217 	ldw	r16,8(r19)
    51cc:	90bfffc4 	addi	r2,r18,-1
    51d0:	10000d16 	blt	r2,zero,5208 <_fwalk_reent+0x84>
    51d4:	0023883a 	mov	r17,zero
    51d8:	053fffc4 	movi	r20,-1
    51dc:	8080030f 	ldh	r2,12(r16)
    51e0:	8c400044 	addi	r17,r17,1
    51e4:	10000626 	beq	r2,zero,5200 <_fwalk_reent+0x7c>
    51e8:	8080038f 	ldh	r2,14(r16)
    51ec:	800b883a 	mov	r5,r16
    51f0:	a809883a 	mov	r4,r21
    51f4:	15000226 	beq	r2,r20,5200 <_fwalk_reent+0x7c>
    51f8:	b03ee83a 	callr	r22
    51fc:	b8aeb03a 	or	r23,r23,r2
    5200:	84001704 	addi	r16,r16,92
    5204:	947ff51e 	bne	r18,r17,51dc <_fwalk_reent+0x58>
    5208:	9cc00017 	ldw	r19,0(r19)
    520c:	983fed1e 	bne	r19,zero,51c4 <_fwalk_reent+0x40>
    5210:	00043e00 	call	43e0 <__sfp_lock_release>
    5214:	b805883a 	mov	r2,r23
    5218:	dfc00817 	ldw	ra,32(sp)
    521c:	ddc00717 	ldw	r23,28(sp)
    5220:	dd800617 	ldw	r22,24(sp)
    5224:	dd400517 	ldw	r21,20(sp)
    5228:	dd000417 	ldw	r20,16(sp)
    522c:	dcc00317 	ldw	r19,12(sp)
    5230:	dc800217 	ldw	r18,8(sp)
    5234:	dc400117 	ldw	r17,4(sp)
    5238:	dc000017 	ldw	r16,0(sp)
    523c:	dec00904 	addi	sp,sp,36
    5240:	f800283a 	ret
    5244:	002f883a 	mov	r23,zero
    5248:	003ff106 	br	5210 <_fwalk_reent+0x8c>

0000524c <_fwalk>:
    524c:	defff804 	addi	sp,sp,-32
    5250:	dcc00315 	stw	r19,12(sp)
    5254:	24c0b804 	addi	r19,r4,736
    5258:	dd400515 	stw	r21,20(sp)
    525c:	dfc00715 	stw	ra,28(sp)
    5260:	dd800615 	stw	r22,24(sp)
    5264:	dd000415 	stw	r20,16(sp)
    5268:	dc800215 	stw	r18,8(sp)
    526c:	dc400115 	stw	r17,4(sp)
    5270:	dc000015 	stw	r16,0(sp)
    5274:	282b883a 	mov	r21,r5
    5278:	00043dc0 	call	43dc <__sfp_lock_acquire>
    527c:	98001f26 	beq	r19,zero,52fc <_fwalk+0xb0>
    5280:	002d883a 	mov	r22,zero
    5284:	9c800117 	ldw	r18,4(r19)
    5288:	9c000217 	ldw	r16,8(r19)
    528c:	90bfffc4 	addi	r2,r18,-1
    5290:	10000c16 	blt	r2,zero,52c4 <_fwalk+0x78>
    5294:	0023883a 	mov	r17,zero
    5298:	053fffc4 	movi	r20,-1
    529c:	8080030f 	ldh	r2,12(r16)
    52a0:	8c400044 	addi	r17,r17,1
    52a4:	10000526 	beq	r2,zero,52bc <_fwalk+0x70>
    52a8:	8080038f 	ldh	r2,14(r16)
    52ac:	8009883a 	mov	r4,r16
    52b0:	15000226 	beq	r2,r20,52bc <_fwalk+0x70>
    52b4:	a83ee83a 	callr	r21
    52b8:	b0acb03a 	or	r22,r22,r2
    52bc:	84001704 	addi	r16,r16,92
    52c0:	947ff61e 	bne	r18,r17,529c <_fwalk+0x50>
    52c4:	9cc00017 	ldw	r19,0(r19)
    52c8:	983fee1e 	bne	r19,zero,5284 <_fwalk+0x38>
    52cc:	00043e00 	call	43e0 <__sfp_lock_release>
    52d0:	b005883a 	mov	r2,r22
    52d4:	dfc00717 	ldw	ra,28(sp)
    52d8:	dd800617 	ldw	r22,24(sp)
    52dc:	dd400517 	ldw	r21,20(sp)
    52e0:	dd000417 	ldw	r20,16(sp)
    52e4:	dcc00317 	ldw	r19,12(sp)
    52e8:	dc800217 	ldw	r18,8(sp)
    52ec:	dc400117 	ldw	r17,4(sp)
    52f0:	dc000017 	ldw	r16,0(sp)
    52f4:	dec00804 	addi	sp,sp,32
    52f8:	f800283a 	ret
    52fc:	002d883a 	mov	r22,zero
    5300:	003ff206 	br	52cc <_fwalk+0x80>

00005304 <_fwrite_r>:
    5304:	defff604 	addi	sp,sp,-40
    5308:	dc400615 	stw	r17,24(sp)
    530c:	39a3383a 	mul	r17,r7,r6
    5310:	00800044 	movi	r2,1
    5314:	dcc00815 	stw	r19,32(sp)
    5318:	dc800715 	stw	r18,28(sp)
    531c:	dc000515 	stw	r16,20(sp)
    5320:	dfc00915 	stw	ra,36(sp)
    5324:	3825883a 	mov	r18,r7
    5328:	3027883a 	mov	r19,r6
    532c:	2021883a 	mov	r16,r4
    5330:	d9400015 	stw	r5,0(sp)
    5334:	d8800315 	stw	r2,12(sp)
    5338:	dc400115 	stw	r17,4(sp)
    533c:	dc400415 	stw	r17,16(sp)
    5340:	dec00215 	stw	sp,8(sp)
    5344:	20000226 	beq	r4,zero,5350 <_fwrite_r+0x4c>
    5348:	20800e17 	ldw	r2,56(r4)
    534c:	10001226 	beq	r2,zero,5398 <_fwrite_r+0x94>
    5350:	d9400a17 	ldw	r5,40(sp)
    5354:	8009883a 	mov	r4,r16
    5358:	d9800204 	addi	r6,sp,8
    535c:	000a0ec0 	call	a0ec <__sfvwrite_r>
    5360:	980b883a 	mov	r5,r19
    5364:	10000426 	beq	r2,zero,5378 <_fwrite_r+0x74>
    5368:	d9000417 	ldw	r4,16(sp)
    536c:	8909c83a 	sub	r4,r17,r4
    5370:	000d1700 	call	d170 <__udivsi3>
    5374:	1025883a 	mov	r18,r2
    5378:	9005883a 	mov	r2,r18
    537c:	dfc00917 	ldw	ra,36(sp)
    5380:	dcc00817 	ldw	r19,32(sp)
    5384:	dc800717 	ldw	r18,28(sp)
    5388:	dc400617 	ldw	r17,24(sp)
    538c:	dc000517 	ldw	r16,20(sp)
    5390:	dec00a04 	addi	sp,sp,40
    5394:	f800283a 	ret
    5398:	00043ec0 	call	43ec <__sinit>
    539c:	003fec06 	br	5350 <_fwrite_r+0x4c>

000053a0 <fwrite>:
    53a0:	00800074 	movhi	r2,1
    53a4:	10890804 	addi	r2,r2,9248
    53a8:	2017883a 	mov	r11,r4
    53ac:	11000017 	ldw	r4,0(r2)
    53b0:	defffe04 	addi	sp,sp,-8
    53b4:	3013883a 	mov	r9,r6
    53b8:	2805883a 	mov	r2,r5
    53bc:	d9c00015 	stw	r7,0(sp)
    53c0:	580b883a 	mov	r5,r11
    53c4:	100d883a 	mov	r6,r2
    53c8:	480f883a 	mov	r7,r9
    53cc:	dfc00115 	stw	ra,4(sp)
    53d0:	00053040 	call	5304 <_fwrite_r>
    53d4:	dfc00117 	ldw	ra,4(sp)
    53d8:	dec00204 	addi	sp,sp,8
    53dc:	f800283a 	ret

000053e0 <__smakebuf_r>:
    53e0:	2880030b 	ldhu	r2,12(r5)
    53e4:	deffed04 	addi	sp,sp,-76
    53e8:	dc401015 	stw	r17,64(sp)
    53ec:	1080008c 	andi	r2,r2,2
    53f0:	dc000f15 	stw	r16,60(sp)
    53f4:	dfc01215 	stw	ra,72(sp)
    53f8:	dc801115 	stw	r18,68(sp)
    53fc:	2821883a 	mov	r16,r5
    5400:	2023883a 	mov	r17,r4
    5404:	10000b26 	beq	r2,zero,5434 <__smakebuf_r+0x54>
    5408:	28c010c4 	addi	r3,r5,67
    540c:	00800044 	movi	r2,1
    5410:	28800515 	stw	r2,20(r5)
    5414:	28c00415 	stw	r3,16(r5)
    5418:	28c00015 	stw	r3,0(r5)
    541c:	dfc01217 	ldw	ra,72(sp)
    5420:	dc801117 	ldw	r18,68(sp)
    5424:	dc401017 	ldw	r17,64(sp)
    5428:	dc000f17 	ldw	r16,60(sp)
    542c:	dec01304 	addi	sp,sp,76
    5430:	f800283a 	ret
    5434:	2940038f 	ldh	r5,14(r5)
    5438:	28002116 	blt	r5,zero,54c0 <__smakebuf_r+0xe0>
    543c:	d80d883a 	mov	r6,sp
    5440:	00051100 	call	5110 <_fstat_r>
    5444:	10001e16 	blt	r2,zero,54c0 <__smakebuf_r+0xe0>
    5448:	d8800117 	ldw	r2,4(sp)
    544c:	00e00014 	movui	r3,32768
    5450:	113c000c 	andi	r4,r2,61440
    5454:	20c03126 	beq	r4,r3,551c <__smakebuf_r+0x13c>
    5458:	8080030b 	ldhu	r2,12(r16)
    545c:	00c80004 	movi	r3,8192
    5460:	10820014 	ori	r2,r2,2048
    5464:	8080030d 	sth	r2,12(r16)
    5468:	20c01e26 	beq	r4,r3,54e4 <__smakebuf_r+0x104>
    546c:	04810004 	movi	r18,1024
    5470:	8809883a 	mov	r4,r17
    5474:	900b883a 	mov	r5,r18
    5478:	00055740 	call	5574 <_malloc_r>
    547c:	1009883a 	mov	r4,r2
    5480:	10003126 	beq	r2,zero,5548 <__smakebuf_r+0x168>
    5484:	80c0030b 	ldhu	r3,12(r16)
    5488:	00800034 	movhi	r2,0
    548c:	10913404 	addi	r2,r2,17616
    5490:	88800f15 	stw	r2,60(r17)
    5494:	18c02014 	ori	r3,r3,128
    5498:	84800515 	stw	r18,20(r16)
    549c:	80c0030d 	sth	r3,12(r16)
    54a0:	81000415 	stw	r4,16(r16)
    54a4:	81000015 	stw	r4,0(r16)
    54a8:	dfc01217 	ldw	ra,72(sp)
    54ac:	dc801117 	ldw	r18,68(sp)
    54b0:	dc401017 	ldw	r17,64(sp)
    54b4:	dc000f17 	ldw	r16,60(sp)
    54b8:	dec01304 	addi	sp,sp,76
    54bc:	f800283a 	ret
    54c0:	80c0030b 	ldhu	r3,12(r16)
    54c4:	1880200c 	andi	r2,r3,128
    54c8:	10000426 	beq	r2,zero,54dc <__smakebuf_r+0xfc>
    54cc:	04801004 	movi	r18,64
    54d0:	18820014 	ori	r2,r3,2048
    54d4:	8080030d 	sth	r2,12(r16)
    54d8:	003fe506 	br	5470 <__smakebuf_r+0x90>
    54dc:	04810004 	movi	r18,1024
    54e0:	003ffb06 	br	54d0 <__smakebuf_r+0xf0>
    54e4:	8140038f 	ldh	r5,14(r16)
    54e8:	8809883a 	mov	r4,r17
    54ec:	000a5fc0 	call	a5fc <_isatty_r>
    54f0:	103fde26 	beq	r2,zero,546c <__smakebuf_r+0x8c>
    54f4:	8080030b 	ldhu	r2,12(r16)
    54f8:	80c010c4 	addi	r3,r16,67
    54fc:	04810004 	movi	r18,1024
    5500:	10800054 	ori	r2,r2,1
    5504:	8080030d 	sth	r2,12(r16)
    5508:	00800044 	movi	r2,1
    550c:	80c00415 	stw	r3,16(r16)
    5510:	80800515 	stw	r2,20(r16)
    5514:	80c00015 	stw	r3,0(r16)
    5518:	003fd506 	br	5470 <__smakebuf_r+0x90>
    551c:	80c00a17 	ldw	r3,40(r16)
    5520:	00800034 	movhi	r2,0
    5524:	1098f504 	addi	r2,r2,25556
    5528:	18bfcb1e 	bne	r3,r2,5458 <__smakebuf_r+0x78>
    552c:	8080030b 	ldhu	r2,12(r16)
    5530:	00c10004 	movi	r3,1024
    5534:	1825883a 	mov	r18,r3
    5538:	10c4b03a 	or	r2,r2,r3
    553c:	8080030d 	sth	r2,12(r16)
    5540:	80c01315 	stw	r3,76(r16)
    5544:	003fca06 	br	5470 <__smakebuf_r+0x90>
    5548:	8100030b 	ldhu	r4,12(r16)
    554c:	2080800c 	andi	r2,r4,512
    5550:	103fb21e 	bne	r2,zero,541c <__smakebuf_r+0x3c>
    5554:	80c010c4 	addi	r3,r16,67
    5558:	21000094 	ori	r4,r4,2
    555c:	00800044 	movi	r2,1
    5560:	80800515 	stw	r2,20(r16)
    5564:	8100030d 	sth	r4,12(r16)
    5568:	80c00415 	stw	r3,16(r16)
    556c:	80c00015 	stw	r3,0(r16)
    5570:	003faa06 	br	541c <__smakebuf_r+0x3c>

00005574 <_malloc_r>:
    5574:	defff604 	addi	sp,sp,-40
    5578:	28c002c4 	addi	r3,r5,11
    557c:	00800584 	movi	r2,22
    5580:	dc800215 	stw	r18,8(sp)
    5584:	dfc00915 	stw	ra,36(sp)
    5588:	df000815 	stw	fp,32(sp)
    558c:	ddc00715 	stw	r23,28(sp)
    5590:	dd800615 	stw	r22,24(sp)
    5594:	dd400515 	stw	r21,20(sp)
    5598:	dd000415 	stw	r20,16(sp)
    559c:	dcc00315 	stw	r19,12(sp)
    55a0:	dc400115 	stw	r17,4(sp)
    55a4:	dc000015 	stw	r16,0(sp)
    55a8:	2025883a 	mov	r18,r4
    55ac:	10c01236 	bltu	r2,r3,55f8 <_malloc_r+0x84>
    55b0:	04400404 	movi	r17,16
    55b4:	8940142e 	bgeu	r17,r5,5608 <_malloc_r+0x94>
    55b8:	00800304 	movi	r2,12
    55bc:	0007883a 	mov	r3,zero
    55c0:	90800015 	stw	r2,0(r18)
    55c4:	1805883a 	mov	r2,r3
    55c8:	dfc00917 	ldw	ra,36(sp)
    55cc:	df000817 	ldw	fp,32(sp)
    55d0:	ddc00717 	ldw	r23,28(sp)
    55d4:	dd800617 	ldw	r22,24(sp)
    55d8:	dd400517 	ldw	r21,20(sp)
    55dc:	dd000417 	ldw	r20,16(sp)
    55e0:	dcc00317 	ldw	r19,12(sp)
    55e4:	dc800217 	ldw	r18,8(sp)
    55e8:	dc400117 	ldw	r17,4(sp)
    55ec:	dc000017 	ldw	r16,0(sp)
    55f0:	dec00a04 	addi	sp,sp,40
    55f4:	f800283a 	ret
    55f8:	00bffe04 	movi	r2,-8
    55fc:	18a2703a 	and	r17,r3,r2
    5600:	883fed16 	blt	r17,zero,55b8 <_malloc_r+0x44>
    5604:	897fec36 	bltu	r17,r5,55b8 <_malloc_r+0x44>
    5608:	9009883a 	mov	r4,r18
    560c:	000d7300 	call	d730 <__malloc_lock>
    5610:	00807dc4 	movi	r2,503
    5614:	14402b2e 	bgeu	r2,r17,56c4 <_malloc_r+0x150>
    5618:	8806d27a 	srli	r3,r17,9
    561c:	18003f1e 	bne	r3,zero,571c <_malloc_r+0x1a8>
    5620:	880cd0fa 	srli	r6,r17,3
    5624:	300490fa 	slli	r2,r6,3
    5628:	02c00074 	movhi	r11,1
    562c:	5ac26204 	addi	r11,r11,2440
    5630:	12cb883a 	add	r5,r2,r11
    5634:	2c000317 	ldw	r16,12(r5)
    5638:	580f883a 	mov	r7,r11
    563c:	2c00041e 	bne	r5,r16,5650 <_malloc_r+0xdc>
    5640:	00000a06 	br	566c <_malloc_r+0xf8>
    5644:	1800860e 	bge	r3,zero,5860 <_malloc_r+0x2ec>
    5648:	84000317 	ldw	r16,12(r16)
    564c:	2c000726 	beq	r5,r16,566c <_malloc_r+0xf8>
    5650:	80800117 	ldw	r2,4(r16)
    5654:	00ffff04 	movi	r3,-4
    5658:	10c8703a 	and	r4,r2,r3
    565c:	2447c83a 	sub	r3,r4,r17
    5660:	008003c4 	movi	r2,15
    5664:	10fff70e 	bge	r2,r3,5644 <_malloc_r+0xd0>
    5668:	31bfffc4 	addi	r6,r6,-1
    566c:	32400044 	addi	r9,r6,1
    5670:	02800074 	movhi	r10,1
    5674:	52826404 	addi	r10,r10,2448
    5678:	54000217 	ldw	r16,8(r10)
    567c:	8280a026 	beq	r16,r10,5900 <_malloc_r+0x38c>
    5680:	80800117 	ldw	r2,4(r16)
    5684:	00ffff04 	movi	r3,-4
    5688:	10ca703a 	and	r5,r2,r3
    568c:	2c4dc83a 	sub	r6,r5,r17
    5690:	008003c4 	movi	r2,15
    5694:	11808316 	blt	r2,r6,58a4 <_malloc_r+0x330>
    5698:	52800315 	stw	r10,12(r10)
    569c:	52800215 	stw	r10,8(r10)
    56a0:	30002916 	blt	r6,zero,5748 <_malloc_r+0x1d4>
    56a4:	8147883a 	add	r3,r16,r5
    56a8:	18800117 	ldw	r2,4(r3)
    56ac:	9009883a 	mov	r4,r18
    56b0:	10800054 	ori	r2,r2,1
    56b4:	18800115 	stw	r2,4(r3)
    56b8:	000d7340 	call	d734 <__malloc_unlock>
    56bc:	80c00204 	addi	r3,r16,8
    56c0:	003fc006 	br	55c4 <_malloc_r+0x50>
    56c4:	02c00074 	movhi	r11,1
    56c8:	5ac26204 	addi	r11,r11,2440
    56cc:	8ac5883a 	add	r2,r17,r11
    56d0:	14000317 	ldw	r16,12(r2)
    56d4:	580f883a 	mov	r7,r11
    56d8:	8806d0fa 	srli	r3,r17,3
    56dc:	14006c26 	beq	r2,r16,5890 <_malloc_r+0x31c>
    56e0:	80c00117 	ldw	r3,4(r16)
    56e4:	00bfff04 	movi	r2,-4
    56e8:	81800317 	ldw	r6,12(r16)
    56ec:	1886703a 	and	r3,r3,r2
    56f0:	80c7883a 	add	r3,r16,r3
    56f4:	18800117 	ldw	r2,4(r3)
    56f8:	81400217 	ldw	r5,8(r16)
    56fc:	9009883a 	mov	r4,r18
    5700:	10800054 	ori	r2,r2,1
    5704:	18800115 	stw	r2,4(r3)
    5708:	31400215 	stw	r5,8(r6)
    570c:	29800315 	stw	r6,12(r5)
    5710:	000d7340 	call	d734 <__malloc_unlock>
    5714:	80c00204 	addi	r3,r16,8
    5718:	003faa06 	br	55c4 <_malloc_r+0x50>
    571c:	00800104 	movi	r2,4
    5720:	10c0052e 	bgeu	r2,r3,5738 <_malloc_r+0x1c4>
    5724:	00800504 	movi	r2,20
    5728:	10c07836 	bltu	r2,r3,590c <_malloc_r+0x398>
    572c:	198016c4 	addi	r6,r3,91
    5730:	300490fa 	slli	r2,r6,3
    5734:	003fbc06 	br	5628 <_malloc_r+0xb4>
    5738:	8804d1ba 	srli	r2,r17,6
    573c:	11800e04 	addi	r6,r2,56
    5740:	300490fa 	slli	r2,r6,3
    5744:	003fb806 	br	5628 <_malloc_r+0xb4>
    5748:	00807fc4 	movi	r2,511
    574c:	1140bb36 	bltu	r2,r5,5a3c <_malloc_r+0x4c8>
    5750:	2806d0fa 	srli	r3,r5,3
    5754:	573ffe04 	addi	fp,r10,-8
    5758:	00800044 	movi	r2,1
    575c:	180890fa 	slli	r4,r3,3
    5760:	1807d0ba 	srai	r3,r3,2
    5764:	e1c00117 	ldw	r7,4(fp)
    5768:	5909883a 	add	r4,r11,r4
    576c:	21400217 	ldw	r5,8(r4)
    5770:	10c4983a 	sll	r2,r2,r3
    5774:	81000315 	stw	r4,12(r16)
    5778:	81400215 	stw	r5,8(r16)
    577c:	388eb03a 	or	r7,r7,r2
    5780:	2c000315 	stw	r16,12(r5)
    5784:	24000215 	stw	r16,8(r4)
    5788:	e1c00115 	stw	r7,4(fp)
    578c:	4807883a 	mov	r3,r9
    5790:	4800cd16 	blt	r9,zero,5ac8 <_malloc_r+0x554>
    5794:	1807d0ba 	srai	r3,r3,2
    5798:	00800044 	movi	r2,1
    579c:	10c8983a 	sll	r4,r2,r3
    57a0:	39004436 	bltu	r7,r4,58b4 <_malloc_r+0x340>
    57a4:	21c4703a 	and	r2,r4,r7
    57a8:	10000a1e 	bne	r2,zero,57d4 <_malloc_r+0x260>
    57ac:	2109883a 	add	r4,r4,r4
    57b0:	00bfff04 	movi	r2,-4
    57b4:	4884703a 	and	r2,r9,r2
    57b8:	3906703a 	and	r3,r7,r4
    57bc:	12400104 	addi	r9,r2,4
    57c0:	1800041e 	bne	r3,zero,57d4 <_malloc_r+0x260>
    57c4:	2109883a 	add	r4,r4,r4
    57c8:	3904703a 	and	r2,r7,r4
    57cc:	4a400104 	addi	r9,r9,4
    57d0:	103ffc26 	beq	r2,zero,57c4 <_malloc_r+0x250>
    57d4:	480490fa 	slli	r2,r9,3
    57d8:	4819883a 	mov	r12,r9
    57dc:	023fff04 	movi	r8,-4
    57e0:	589b883a 	add	r13,r11,r2
    57e4:	6807883a 	mov	r3,r13
    57e8:	014003c4 	movi	r5,15
    57ec:	1c000317 	ldw	r16,12(r3)
    57f0:	1c00041e 	bne	r3,r16,5804 <_malloc_r+0x290>
    57f4:	0000a706 	br	5a94 <_malloc_r+0x520>
    57f8:	3000ab0e 	bge	r6,zero,5aa8 <_malloc_r+0x534>
    57fc:	84000317 	ldw	r16,12(r16)
    5800:	1c00a426 	beq	r3,r16,5a94 <_malloc_r+0x520>
    5804:	80800117 	ldw	r2,4(r16)
    5808:	1204703a 	and	r2,r2,r8
    580c:	144dc83a 	sub	r6,r2,r17
    5810:	29bff90e 	bge	r5,r6,57f8 <_malloc_r+0x284>
    5814:	81000317 	ldw	r4,12(r16)
    5818:	80c00217 	ldw	r3,8(r16)
    581c:	89400054 	ori	r5,r17,1
    5820:	8445883a 	add	r2,r16,r17
    5824:	20c00215 	stw	r3,8(r4)
    5828:	19000315 	stw	r4,12(r3)
    582c:	81400115 	stw	r5,4(r16)
    5830:	1187883a 	add	r3,r2,r6
    5834:	31000054 	ori	r4,r6,1
    5838:	50800315 	stw	r2,12(r10)
    583c:	50800215 	stw	r2,8(r10)
    5840:	19800015 	stw	r6,0(r3)
    5844:	11000115 	stw	r4,4(r2)
    5848:	12800215 	stw	r10,8(r2)
    584c:	12800315 	stw	r10,12(r2)
    5850:	9009883a 	mov	r4,r18
    5854:	000d7340 	call	d734 <__malloc_unlock>
    5858:	80c00204 	addi	r3,r16,8
    585c:	003f5906 	br	55c4 <_malloc_r+0x50>
    5860:	8109883a 	add	r4,r16,r4
    5864:	20800117 	ldw	r2,4(r4)
    5868:	80c00217 	ldw	r3,8(r16)
    586c:	81400317 	ldw	r5,12(r16)
    5870:	10800054 	ori	r2,r2,1
    5874:	20800115 	stw	r2,4(r4)
    5878:	28c00215 	stw	r3,8(r5)
    587c:	19400315 	stw	r5,12(r3)
    5880:	9009883a 	mov	r4,r18
    5884:	000d7340 	call	d734 <__malloc_unlock>
    5888:	80c00204 	addi	r3,r16,8
    588c:	003f4d06 	br	55c4 <_malloc_r+0x50>
    5890:	80800204 	addi	r2,r16,8
    5894:	14000317 	ldw	r16,12(r2)
    5898:	143f911e 	bne	r2,r16,56e0 <_malloc_r+0x16c>
    589c:	1a400084 	addi	r9,r3,2
    58a0:	003f7306 	br	5670 <_malloc_r+0xfc>
    58a4:	88c00054 	ori	r3,r17,1
    58a8:	8445883a 	add	r2,r16,r17
    58ac:	80c00115 	stw	r3,4(r16)
    58b0:	003fdf06 	br	5830 <_malloc_r+0x2bc>
    58b4:	e4000217 	ldw	r16,8(fp)
    58b8:	00bfff04 	movi	r2,-4
    58bc:	80c00117 	ldw	r3,4(r16)
    58c0:	802d883a 	mov	r22,r16
    58c4:	18aa703a 	and	r21,r3,r2
    58c8:	ac401636 	bltu	r21,r17,5924 <_malloc_r+0x3b0>
    58cc:	ac49c83a 	sub	r4,r21,r17
    58d0:	008003c4 	movi	r2,15
    58d4:	1100130e 	bge	r2,r4,5924 <_malloc_r+0x3b0>
    58d8:	88800054 	ori	r2,r17,1
    58dc:	8447883a 	add	r3,r16,r17
    58e0:	80800115 	stw	r2,4(r16)
    58e4:	20800054 	ori	r2,r4,1
    58e8:	18800115 	stw	r2,4(r3)
    58ec:	e0c00215 	stw	r3,8(fp)
    58f0:	9009883a 	mov	r4,r18
    58f4:	000d7340 	call	d734 <__malloc_unlock>
    58f8:	80c00204 	addi	r3,r16,8
    58fc:	003f3106 	br	55c4 <_malloc_r+0x50>
    5900:	39c00117 	ldw	r7,4(r7)
    5904:	573ffe04 	addi	fp,r10,-8
    5908:	003fa006 	br	578c <_malloc_r+0x218>
    590c:	00801504 	movi	r2,84
    5910:	10c06736 	bltu	r2,r3,5ab0 <_malloc_r+0x53c>
    5914:	8804d33a 	srli	r2,r17,12
    5918:	11801b84 	addi	r6,r2,110
    591c:	300490fa 	slli	r2,r6,3
    5920:	003f4106 	br	5628 <_malloc_r+0xb4>
    5924:	d0a7f017 	ldw	r2,-24640(gp)
    5928:	d0e01517 	ldw	r3,-32684(gp)
    592c:	053fffc4 	movi	r20,-1
    5930:	10800404 	addi	r2,r2,16
    5934:	88a7883a 	add	r19,r17,r2
    5938:	1d000326 	beq	r3,r20,5948 <_malloc_r+0x3d4>
    593c:	98c3ffc4 	addi	r3,r19,4095
    5940:	00bc0004 	movi	r2,-4096
    5944:	18a6703a 	and	r19,r3,r2
    5948:	9009883a 	mov	r4,r18
    594c:	980b883a 	mov	r5,r19
    5950:	000635c0 	call	635c <_sbrk_r>
    5954:	1009883a 	mov	r4,r2
    5958:	15000426 	beq	r2,r20,596c <_malloc_r+0x3f8>
    595c:	854b883a 	add	r5,r16,r21
    5960:	1029883a 	mov	r20,r2
    5964:	11405a2e 	bgeu	r2,r5,5ad0 <_malloc_r+0x55c>
    5968:	87000c26 	beq	r16,fp,599c <_malloc_r+0x428>
    596c:	e4000217 	ldw	r16,8(fp)
    5970:	80c00117 	ldw	r3,4(r16)
    5974:	00bfff04 	movi	r2,-4
    5978:	1884703a 	and	r2,r3,r2
    597c:	14400336 	bltu	r2,r17,598c <_malloc_r+0x418>
    5980:	1449c83a 	sub	r4,r2,r17
    5984:	008003c4 	movi	r2,15
    5988:	113fd316 	blt	r2,r4,58d8 <_malloc_r+0x364>
    598c:	9009883a 	mov	r4,r18
    5990:	000d7340 	call	d734 <__malloc_unlock>
    5994:	0007883a 	mov	r3,zero
    5998:	003f0a06 	br	55c4 <_malloc_r+0x50>
    599c:	05c00074 	movhi	r23,1
    59a0:	bdd0f604 	addi	r23,r23,17368
    59a4:	b8800017 	ldw	r2,0(r23)
    59a8:	988d883a 	add	r6,r19,r2
    59ac:	b9800015 	stw	r6,0(r23)
    59b0:	d0e01517 	ldw	r3,-32684(gp)
    59b4:	00bfffc4 	movi	r2,-1
    59b8:	18808e26 	beq	r3,r2,5bf4 <_malloc_r+0x680>
    59bc:	2145c83a 	sub	r2,r4,r5
    59c0:	3085883a 	add	r2,r6,r2
    59c4:	b8800015 	stw	r2,0(r23)
    59c8:	20c001cc 	andi	r3,r4,7
    59cc:	18005f1e 	bne	r3,zero,5b4c <_malloc_r+0x5d8>
    59d0:	000b883a 	mov	r5,zero
    59d4:	a4c5883a 	add	r2,r20,r19
    59d8:	1083ffcc 	andi	r2,r2,4095
    59dc:	00c40004 	movi	r3,4096
    59e0:	1887c83a 	sub	r3,r3,r2
    59e4:	28e7883a 	add	r19,r5,r3
    59e8:	9009883a 	mov	r4,r18
    59ec:	980b883a 	mov	r5,r19
    59f0:	000635c0 	call	635c <_sbrk_r>
    59f4:	1007883a 	mov	r3,r2
    59f8:	00bfffc4 	movi	r2,-1
    59fc:	18807a26 	beq	r3,r2,5be8 <_malloc_r+0x674>
    5a00:	1d05c83a 	sub	r2,r3,r20
    5a04:	9885883a 	add	r2,r19,r2
    5a08:	10c00054 	ori	r3,r2,1
    5a0c:	b8800017 	ldw	r2,0(r23)
    5a10:	a021883a 	mov	r16,r20
    5a14:	a0c00115 	stw	r3,4(r20)
    5a18:	9885883a 	add	r2,r19,r2
    5a1c:	b8800015 	stw	r2,0(r23)
    5a20:	e5000215 	stw	r20,8(fp)
    5a24:	b7003626 	beq	r22,fp,5b00 <_malloc_r+0x58c>
    5a28:	018003c4 	movi	r6,15
    5a2c:	35404b36 	bltu	r6,r21,5b5c <_malloc_r+0x5e8>
    5a30:	00800044 	movi	r2,1
    5a34:	a0800115 	stw	r2,4(r20)
    5a38:	003fcd06 	br	5970 <_malloc_r+0x3fc>
    5a3c:	2808d27a 	srli	r4,r5,9
    5a40:	2000371e 	bne	r4,zero,5b20 <_malloc_r+0x5ac>
    5a44:	2808d0fa 	srli	r4,r5,3
    5a48:	200690fa 	slli	r3,r4,3
    5a4c:	1ad1883a 	add	r8,r3,r11
    5a50:	41800217 	ldw	r6,8(r8)
    5a54:	41805b26 	beq	r8,r6,5bc4 <_malloc_r+0x650>
    5a58:	30800117 	ldw	r2,4(r6)
    5a5c:	00ffff04 	movi	r3,-4
    5a60:	10c4703a 	and	r2,r2,r3
    5a64:	2880022e 	bgeu	r5,r2,5a70 <_malloc_r+0x4fc>
    5a68:	31800217 	ldw	r6,8(r6)
    5a6c:	41bffa1e 	bne	r8,r6,5a58 <_malloc_r+0x4e4>
    5a70:	32000317 	ldw	r8,12(r6)
    5a74:	39c00117 	ldw	r7,4(r7)
    5a78:	82000315 	stw	r8,12(r16)
    5a7c:	81800215 	stw	r6,8(r16)
    5a80:	07000074 	movhi	fp,1
    5a84:	e7026204 	addi	fp,fp,2440
    5a88:	34000315 	stw	r16,12(r6)
    5a8c:	44000215 	stw	r16,8(r8)
    5a90:	003f3e06 	br	578c <_malloc_r+0x218>
    5a94:	63000044 	addi	r12,r12,1
    5a98:	608000cc 	andi	r2,r12,3
    5a9c:	10005d26 	beq	r2,zero,5c14 <_malloc_r+0x6a0>
    5aa0:	18c00204 	addi	r3,r3,8
    5aa4:	003f5106 	br	57ec <_malloc_r+0x278>
    5aa8:	8089883a 	add	r4,r16,r2
    5aac:	003f6d06 	br	5864 <_malloc_r+0x2f0>
    5ab0:	00805504 	movi	r2,340
    5ab4:	10c02036 	bltu	r2,r3,5b38 <_malloc_r+0x5c4>
    5ab8:	8804d3fa 	srli	r2,r17,15
    5abc:	11801dc4 	addi	r6,r2,119
    5ac0:	300490fa 	slli	r2,r6,3
    5ac4:	003ed806 	br	5628 <_malloc_r+0xb4>
    5ac8:	48c000c4 	addi	r3,r9,3
    5acc:	003f3106 	br	5794 <_malloc_r+0x220>
    5ad0:	05c00074 	movhi	r23,1
    5ad4:	bdd0f604 	addi	r23,r23,17368
    5ad8:	b8800017 	ldw	r2,0(r23)
    5adc:	988d883a 	add	r6,r19,r2
    5ae0:	b9800015 	stw	r6,0(r23)
    5ae4:	293fb21e 	bne	r5,r4,59b0 <_malloc_r+0x43c>
    5ae8:	2083ffcc 	andi	r2,r4,4095
    5aec:	103fb01e 	bne	r2,zero,59b0 <_malloc_r+0x43c>
    5af0:	e4000217 	ldw	r16,8(fp)
    5af4:	9d45883a 	add	r2,r19,r21
    5af8:	10800054 	ori	r2,r2,1
    5afc:	80800115 	stw	r2,4(r16)
    5b00:	b8c00017 	ldw	r3,0(r23)
    5b04:	d0a7f117 	ldw	r2,-24636(gp)
    5b08:	10c0012e 	bgeu	r2,r3,5b10 <_malloc_r+0x59c>
    5b0c:	d0e7f115 	stw	r3,-24636(gp)
    5b10:	d0a7f217 	ldw	r2,-24632(gp)
    5b14:	10ff962e 	bgeu	r2,r3,5970 <_malloc_r+0x3fc>
    5b18:	d0e7f215 	stw	r3,-24632(gp)
    5b1c:	003f9406 	br	5970 <_malloc_r+0x3fc>
    5b20:	00800104 	movi	r2,4
    5b24:	11001e36 	bltu	r2,r4,5ba0 <_malloc_r+0x62c>
    5b28:	2804d1ba 	srli	r2,r5,6
    5b2c:	11000e04 	addi	r4,r2,56
    5b30:	200690fa 	slli	r3,r4,3
    5b34:	003fc506 	br	5a4c <_malloc_r+0x4d8>
    5b38:	00815504 	movi	r2,1364
    5b3c:	10c01d2e 	bgeu	r2,r3,5bb4 <_malloc_r+0x640>
    5b40:	01801f84 	movi	r6,126
    5b44:	0080fc04 	movi	r2,1008
    5b48:	003eb706 	br	5628 <_malloc_r+0xb4>
    5b4c:	00800204 	movi	r2,8
    5b50:	10cbc83a 	sub	r5,r2,r3
    5b54:	2169883a 	add	r20,r4,r5
    5b58:	003f9e06 	br	59d4 <_malloc_r+0x460>
    5b5c:	00bffe04 	movi	r2,-8
    5b60:	a93ffd04 	addi	r4,r21,-12
    5b64:	2088703a 	and	r4,r4,r2
    5b68:	b10b883a 	add	r5,r22,r4
    5b6c:	00c00144 	movi	r3,5
    5b70:	28c00215 	stw	r3,8(r5)
    5b74:	28c00115 	stw	r3,4(r5)
    5b78:	b0800117 	ldw	r2,4(r22)
    5b7c:	1080004c 	andi	r2,r2,1
    5b80:	2084b03a 	or	r2,r4,r2
    5b84:	b0800115 	stw	r2,4(r22)
    5b88:	313fdd2e 	bgeu	r6,r4,5b00 <_malloc_r+0x58c>
    5b8c:	b1400204 	addi	r5,r22,8
    5b90:	9009883a 	mov	r4,r18
    5b94:	000499c0 	call	499c <_free_r>
    5b98:	e4000217 	ldw	r16,8(fp)
    5b9c:	003fd806 	br	5b00 <_malloc_r+0x58c>
    5ba0:	00800504 	movi	r2,20
    5ba4:	11001536 	bltu	r2,r4,5bfc <_malloc_r+0x688>
    5ba8:	210016c4 	addi	r4,r4,91
    5bac:	200690fa 	slli	r3,r4,3
    5bb0:	003fa606 	br	5a4c <_malloc_r+0x4d8>
    5bb4:	8804d4ba 	srli	r2,r17,18
    5bb8:	11801f04 	addi	r6,r2,124
    5bbc:	300490fa 	slli	r2,r6,3
    5bc0:	003e9906 	br	5628 <_malloc_r+0xb4>
    5bc4:	2009d0ba 	srai	r4,r4,2
    5bc8:	01400074 	movhi	r5,1
    5bcc:	29426204 	addi	r5,r5,2440
    5bd0:	00c00044 	movi	r3,1
    5bd4:	28800117 	ldw	r2,4(r5)
    5bd8:	1906983a 	sll	r3,r3,r4
    5bdc:	10c4b03a 	or	r2,r2,r3
    5be0:	28800115 	stw	r2,4(r5)
    5be4:	003fa306 	br	5a74 <_malloc_r+0x500>
    5be8:	0027883a 	mov	r19,zero
    5bec:	00c00044 	movi	r3,1
    5bf0:	003f8606 	br	5a0c <_malloc_r+0x498>
    5bf4:	d1201515 	stw	r4,-32684(gp)
    5bf8:	003f7306 	br	59c8 <_malloc_r+0x454>
    5bfc:	00801504 	movi	r2,84
    5c00:	11001936 	bltu	r2,r4,5c68 <_malloc_r+0x6f4>
    5c04:	2804d33a 	srli	r2,r5,12
    5c08:	11001b84 	addi	r4,r2,110
    5c0c:	200690fa 	slli	r3,r4,3
    5c10:	003f8e06 	br	5a4c <_malloc_r+0x4d8>
    5c14:	480b883a 	mov	r5,r9
    5c18:	6807883a 	mov	r3,r13
    5c1c:	288000cc 	andi	r2,r5,3
    5c20:	18fffe04 	addi	r3,r3,-8
    5c24:	297fffc4 	addi	r5,r5,-1
    5c28:	10001526 	beq	r2,zero,5c80 <_malloc_r+0x70c>
    5c2c:	18800217 	ldw	r2,8(r3)
    5c30:	10fffa26 	beq	r2,r3,5c1c <_malloc_r+0x6a8>
    5c34:	2109883a 	add	r4,r4,r4
    5c38:	393f1e36 	bltu	r7,r4,58b4 <_malloc_r+0x340>
    5c3c:	203f1d26 	beq	r4,zero,58b4 <_malloc_r+0x340>
    5c40:	21c4703a 	and	r2,r4,r7
    5c44:	10000226 	beq	r2,zero,5c50 <_malloc_r+0x6dc>
    5c48:	6013883a 	mov	r9,r12
    5c4c:	003ee106 	br	57d4 <_malloc_r+0x260>
    5c50:	2109883a 	add	r4,r4,r4
    5c54:	3904703a 	and	r2,r7,r4
    5c58:	63000104 	addi	r12,r12,4
    5c5c:	103ffc26 	beq	r2,zero,5c50 <_malloc_r+0x6dc>
    5c60:	6013883a 	mov	r9,r12
    5c64:	003edb06 	br	57d4 <_malloc_r+0x260>
    5c68:	00805504 	movi	r2,340
    5c6c:	11000836 	bltu	r2,r4,5c90 <_malloc_r+0x71c>
    5c70:	2804d3fa 	srli	r2,r5,15
    5c74:	11001dc4 	addi	r4,r2,119
    5c78:	200690fa 	slli	r3,r4,3
    5c7c:	003f7306 	br	5a4c <_malloc_r+0x4d8>
    5c80:	0104303a 	nor	r2,zero,r4
    5c84:	388e703a 	and	r7,r7,r2
    5c88:	e1c00115 	stw	r7,4(fp)
    5c8c:	003fe906 	br	5c34 <_malloc_r+0x6c0>
    5c90:	00815504 	movi	r2,1364
    5c94:	1100032e 	bgeu	r2,r4,5ca4 <_malloc_r+0x730>
    5c98:	01001f84 	movi	r4,126
    5c9c:	00c0fc04 	movi	r3,1008
    5ca0:	003f6a06 	br	5a4c <_malloc_r+0x4d8>
    5ca4:	2804d4ba 	srli	r2,r5,18
    5ca8:	11001f04 	addi	r4,r2,124
    5cac:	200690fa 	slli	r3,r4,3
    5cb0:	003f6606 	br	5a4c <_malloc_r+0x4d8>

00005cb4 <memcpy>:
    5cb4:	01c003c4 	movi	r7,15
    5cb8:	2007883a 	mov	r3,r4
    5cbc:	3980032e 	bgeu	r7,r6,5ccc <memcpy+0x18>
    5cc0:	2904b03a 	or	r2,r5,r4
    5cc4:	108000cc 	andi	r2,r2,3
    5cc8:	10000926 	beq	r2,zero,5cf0 <memcpy+0x3c>
    5ccc:	30000626 	beq	r6,zero,5ce8 <memcpy+0x34>
    5cd0:	30cd883a 	add	r6,r6,r3
    5cd4:	28800003 	ldbu	r2,0(r5)
    5cd8:	29400044 	addi	r5,r5,1
    5cdc:	18800005 	stb	r2,0(r3)
    5ce0:	18c00044 	addi	r3,r3,1
    5ce4:	30fffb1e 	bne	r6,r3,5cd4 <memcpy+0x20>
    5ce8:	2005883a 	mov	r2,r4
    5cec:	f800283a 	ret
    5cf0:	3811883a 	mov	r8,r7
    5cf4:	200f883a 	mov	r7,r4
    5cf8:	28c00017 	ldw	r3,0(r5)
    5cfc:	31bffc04 	addi	r6,r6,-16
    5d00:	38c00015 	stw	r3,0(r7)
    5d04:	28800117 	ldw	r2,4(r5)
    5d08:	38800115 	stw	r2,4(r7)
    5d0c:	28c00217 	ldw	r3,8(r5)
    5d10:	38c00215 	stw	r3,8(r7)
    5d14:	28800317 	ldw	r2,12(r5)
    5d18:	29400404 	addi	r5,r5,16
    5d1c:	38800315 	stw	r2,12(r7)
    5d20:	39c00404 	addi	r7,r7,16
    5d24:	41bff436 	bltu	r8,r6,5cf8 <memcpy+0x44>
    5d28:	008000c4 	movi	r2,3
    5d2c:	1180072e 	bgeu	r2,r6,5d4c <memcpy+0x98>
    5d30:	1007883a 	mov	r3,r2
    5d34:	28800017 	ldw	r2,0(r5)
    5d38:	31bfff04 	addi	r6,r6,-4
    5d3c:	29400104 	addi	r5,r5,4
    5d40:	38800015 	stw	r2,0(r7)
    5d44:	39c00104 	addi	r7,r7,4
    5d48:	19bffa36 	bltu	r3,r6,5d34 <memcpy+0x80>
    5d4c:	3807883a 	mov	r3,r7
    5d50:	003fde06 	br	5ccc <memcpy+0x18>

00005d54 <memset>:
    5d54:	008000c4 	movi	r2,3
    5d58:	29403fcc 	andi	r5,r5,255
    5d5c:	2007883a 	mov	r3,r4
    5d60:	1180022e 	bgeu	r2,r6,5d6c <memset+0x18>
    5d64:	2084703a 	and	r2,r4,r2
    5d68:	10000826 	beq	r2,zero,5d8c <memset+0x38>
    5d6c:	30000526 	beq	r6,zero,5d84 <memset+0x30>
    5d70:	2805883a 	mov	r2,r5
    5d74:	30cd883a 	add	r6,r6,r3
    5d78:	18800005 	stb	r2,0(r3)
    5d7c:	18c00044 	addi	r3,r3,1
    5d80:	19bffd1e 	bne	r3,r6,5d78 <memset+0x24>
    5d84:	2005883a 	mov	r2,r4
    5d88:	f800283a 	ret
    5d8c:	2804923a 	slli	r2,r5,8
    5d90:	020003c4 	movi	r8,15
    5d94:	200f883a 	mov	r7,r4
    5d98:	2884b03a 	or	r2,r5,r2
    5d9c:	1006943a 	slli	r3,r2,16
    5da0:	10c6b03a 	or	r3,r2,r3
    5da4:	41800a2e 	bgeu	r8,r6,5dd0 <memset+0x7c>
    5da8:	4005883a 	mov	r2,r8
    5dac:	31bffc04 	addi	r6,r6,-16
    5db0:	38c00015 	stw	r3,0(r7)
    5db4:	38c00115 	stw	r3,4(r7)
    5db8:	38c00215 	stw	r3,8(r7)
    5dbc:	38c00315 	stw	r3,12(r7)
    5dc0:	39c00404 	addi	r7,r7,16
    5dc4:	11bff936 	bltu	r2,r6,5dac <memset+0x58>
    5dc8:	008000c4 	movi	r2,3
    5dcc:	1180052e 	bgeu	r2,r6,5de4 <memset+0x90>
    5dd0:	31bfff04 	addi	r6,r6,-4
    5dd4:	008000c4 	movi	r2,3
    5dd8:	38c00015 	stw	r3,0(r7)
    5ddc:	39c00104 	addi	r7,r7,4
    5de0:	11bffb36 	bltu	r2,r6,5dd0 <memset+0x7c>
    5de4:	3807883a 	mov	r3,r7
    5de8:	003fe006 	br	5d6c <memset+0x18>

00005dec <_open_r>:
    5dec:	defffd04 	addi	sp,sp,-12
    5df0:	dc000015 	stw	r16,0(sp)
    5df4:	04000074 	movhi	r16,1
    5df8:	8410e504 	addi	r16,r16,17300
    5dfc:	dc400115 	stw	r17,4(sp)
    5e00:	80000015 	stw	zero,0(r16)
    5e04:	2023883a 	mov	r17,r4
    5e08:	2809883a 	mov	r4,r5
    5e0c:	300b883a 	mov	r5,r6
    5e10:	380d883a 	mov	r6,r7
    5e14:	dfc00215 	stw	ra,8(sp)
    5e18:	000d7380 	call	d738 <open>
    5e1c:	1007883a 	mov	r3,r2
    5e20:	00bfffc4 	movi	r2,-1
    5e24:	18800626 	beq	r3,r2,5e40 <_open_r+0x54>
    5e28:	1805883a 	mov	r2,r3
    5e2c:	dfc00217 	ldw	ra,8(sp)
    5e30:	dc400117 	ldw	r17,4(sp)
    5e34:	dc000017 	ldw	r16,0(sp)
    5e38:	dec00304 	addi	sp,sp,12
    5e3c:	f800283a 	ret
    5e40:	80800017 	ldw	r2,0(r16)
    5e44:	103ff826 	beq	r2,zero,5e28 <_open_r+0x3c>
    5e48:	88800015 	stw	r2,0(r17)
    5e4c:	1805883a 	mov	r2,r3
    5e50:	dfc00217 	ldw	ra,8(sp)
    5e54:	dc400117 	ldw	r17,4(sp)
    5e58:	dc000017 	ldw	r16,0(sp)
    5e5c:	dec00304 	addi	sp,sp,12
    5e60:	f800283a 	ret

00005e64 <printf>:
    5e64:	defffb04 	addi	sp,sp,-20
    5e68:	dfc00115 	stw	ra,4(sp)
    5e6c:	d9400215 	stw	r5,8(sp)
    5e70:	d9800315 	stw	r6,12(sp)
    5e74:	d9c00415 	stw	r7,16(sp)
    5e78:	00800074 	movhi	r2,1
    5e7c:	10890804 	addi	r2,r2,9248
    5e80:	10c00017 	ldw	r3,0(r2)
    5e84:	200b883a 	mov	r5,r4
    5e88:	d8800204 	addi	r2,sp,8
    5e8c:	19000217 	ldw	r4,8(r3)
    5e90:	100d883a 	mov	r6,r2
    5e94:	d8800015 	stw	r2,0(sp)
    5e98:	00084ec0 	call	84ec <__vfprintf_internal>
    5e9c:	dfc00117 	ldw	ra,4(sp)
    5ea0:	dec00504 	addi	sp,sp,20
    5ea4:	f800283a 	ret

00005ea8 <_printf_r>:
    5ea8:	defffc04 	addi	sp,sp,-16
    5eac:	dfc00115 	stw	ra,4(sp)
    5eb0:	d9800215 	stw	r6,8(sp)
    5eb4:	d9c00315 	stw	r7,12(sp)
    5eb8:	280d883a 	mov	r6,r5
    5ebc:	21400217 	ldw	r5,8(r4)
    5ec0:	d8c00204 	addi	r3,sp,8
    5ec4:	180f883a 	mov	r7,r3
    5ec8:	d8c00015 	stw	r3,0(sp)
    5ecc:	00066400 	call	6640 <___vfprintf_internal_r>
    5ed0:	dfc00117 	ldw	ra,4(sp)
    5ed4:	dec00404 	addi	sp,sp,16
    5ed8:	f800283a 	ret

00005edc <putc>:
    5edc:	defffc04 	addi	sp,sp,-16
    5ee0:	dc800215 	stw	r18,8(sp)
    5ee4:	04800074 	movhi	r18,1
    5ee8:	94890804 	addi	r18,r18,9248
    5eec:	90c00017 	ldw	r3,0(r18)
    5ef0:	dc400115 	stw	r17,4(sp)
    5ef4:	dc000015 	stw	r16,0(sp)
    5ef8:	dfc00315 	stw	ra,12(sp)
    5efc:	2023883a 	mov	r17,r4
    5f00:	2821883a 	mov	r16,r5
    5f04:	18000226 	beq	r3,zero,5f10 <putc+0x34>
    5f08:	18800e17 	ldw	r2,56(r3)
    5f0c:	10001126 	beq	r2,zero,5f54 <putc+0x78>
    5f10:	80800217 	ldw	r2,8(r16)
    5f14:	10ffffc4 	addi	r3,r2,-1
    5f18:	80c00215 	stw	r3,8(r16)
    5f1c:	18001316 	blt	r3,zero,5f6c <putc+0x90>
    5f20:	80800017 	ldw	r2,0(r16)
    5f24:	14400005 	stb	r17,0(r2)
    5f28:	80c00017 	ldw	r3,0(r16)
    5f2c:	18800044 	addi	r2,r3,1
    5f30:	18c00003 	ldbu	r3,0(r3)
    5f34:	80800015 	stw	r2,0(r16)
    5f38:	1805883a 	mov	r2,r3
    5f3c:	dfc00317 	ldw	ra,12(sp)
    5f40:	dc800217 	ldw	r18,8(sp)
    5f44:	dc400117 	ldw	r17,4(sp)
    5f48:	dc000017 	ldw	r16,0(sp)
    5f4c:	dec00404 	addi	sp,sp,16
    5f50:	f800283a 	ret
    5f54:	1809883a 	mov	r4,r3
    5f58:	00043ec0 	call	43ec <__sinit>
    5f5c:	80800217 	ldw	r2,8(r16)
    5f60:	10ffffc4 	addi	r3,r2,-1
    5f64:	80c00215 	stw	r3,8(r16)
    5f68:	183fed0e 	bge	r3,zero,5f20 <putc+0x44>
    5f6c:	80800617 	ldw	r2,24(r16)
    5f70:	18800f16 	blt	r3,r2,5fb0 <putc+0xd4>
    5f74:	80800017 	ldw	r2,0(r16)
    5f78:	14400005 	stb	r17,0(r2)
    5f7c:	81000017 	ldw	r4,0(r16)
    5f80:	00800284 	movi	r2,10
    5f84:	20c00003 	ldbu	r3,0(r4)
    5f88:	18801226 	beq	r3,r2,5fd4 <putc+0xf8>
    5f8c:	20800044 	addi	r2,r4,1
    5f90:	80800015 	stw	r2,0(r16)
    5f94:	1805883a 	mov	r2,r3
    5f98:	dfc00317 	ldw	ra,12(sp)
    5f9c:	dc800217 	ldw	r18,8(sp)
    5fa0:	dc400117 	ldw	r17,4(sp)
    5fa4:	dc000017 	ldw	r16,0(sp)
    5fa8:	dec00404 	addi	sp,sp,16
    5fac:	f800283a 	ret
    5fb0:	91000017 	ldw	r4,0(r18)
    5fb4:	880b883a 	mov	r5,r17
    5fb8:	800d883a 	mov	r6,r16
    5fbc:	dfc00317 	ldw	ra,12(sp)
    5fc0:	dc800217 	ldw	r18,8(sp)
    5fc4:	dc400117 	ldw	r17,4(sp)
    5fc8:	dc000017 	ldw	r16,0(sp)
    5fcc:	dec00404 	addi	sp,sp,16
    5fd0:	00085101 	jmpi	8510 <__swbuf_r>
    5fd4:	91000017 	ldw	r4,0(r18)
    5fd8:	180b883a 	mov	r5,r3
    5fdc:	003ff606 	br	5fb8 <putc+0xdc>

00005fe0 <_putc_r>:
    5fe0:	defffc04 	addi	sp,sp,-16
    5fe4:	dc400215 	stw	r17,8(sp)
    5fe8:	dc000115 	stw	r16,4(sp)
    5fec:	dfc00315 	stw	ra,12(sp)
    5ff0:	2021883a 	mov	r16,r4
    5ff4:	2823883a 	mov	r17,r5
    5ff8:	20000226 	beq	r4,zero,6004 <_putc_r+0x24>
    5ffc:	20800e17 	ldw	r2,56(r4)
    6000:	10001026 	beq	r2,zero,6044 <_putc_r+0x64>
    6004:	30800217 	ldw	r2,8(r6)
    6008:	10ffffc4 	addi	r3,r2,-1
    600c:	30c00215 	stw	r3,8(r6)
    6010:	18001316 	blt	r3,zero,6060 <_putc_r+0x80>
    6014:	30800017 	ldw	r2,0(r6)
    6018:	14400005 	stb	r17,0(r2)
    601c:	30c00017 	ldw	r3,0(r6)
    6020:	18800044 	addi	r2,r3,1
    6024:	18c00003 	ldbu	r3,0(r3)
    6028:	30800015 	stw	r2,0(r6)
    602c:	1805883a 	mov	r2,r3
    6030:	dfc00317 	ldw	ra,12(sp)
    6034:	dc400217 	ldw	r17,8(sp)
    6038:	dc000117 	ldw	r16,4(sp)
    603c:	dec00404 	addi	sp,sp,16
    6040:	f800283a 	ret
    6044:	d9800015 	stw	r6,0(sp)
    6048:	00043ec0 	call	43ec <__sinit>
    604c:	d9800017 	ldw	r6,0(sp)
    6050:	30800217 	ldw	r2,8(r6)
    6054:	10ffffc4 	addi	r3,r2,-1
    6058:	30c00215 	stw	r3,8(r6)
    605c:	183fed0e 	bge	r3,zero,6014 <_putc_r+0x34>
    6060:	30800617 	ldw	r2,24(r6)
    6064:	18800e16 	blt	r3,r2,60a0 <_putc_r+0xc0>
    6068:	30800017 	ldw	r2,0(r6)
    606c:	14400005 	stb	r17,0(r2)
    6070:	31000017 	ldw	r4,0(r6)
    6074:	00800284 	movi	r2,10
    6078:	20c00003 	ldbu	r3,0(r4)
    607c:	18800f26 	beq	r3,r2,60bc <_putc_r+0xdc>
    6080:	20800044 	addi	r2,r4,1
    6084:	30800015 	stw	r2,0(r6)
    6088:	1805883a 	mov	r2,r3
    608c:	dfc00317 	ldw	ra,12(sp)
    6090:	dc400217 	ldw	r17,8(sp)
    6094:	dc000117 	ldw	r16,4(sp)
    6098:	dec00404 	addi	sp,sp,16
    609c:	f800283a 	ret
    60a0:	8009883a 	mov	r4,r16
    60a4:	880b883a 	mov	r5,r17
    60a8:	dfc00317 	ldw	ra,12(sp)
    60ac:	dc400217 	ldw	r17,8(sp)
    60b0:	dc000117 	ldw	r16,4(sp)
    60b4:	dec00404 	addi	sp,sp,16
    60b8:	00085101 	jmpi	8510 <__swbuf_r>
    60bc:	8009883a 	mov	r4,r16
    60c0:	180b883a 	mov	r5,r3
    60c4:	003ff806 	br	60a8 <_putc_r+0xc8>

000060c8 <_puts_r>:
    60c8:	defff604 	addi	sp,sp,-40
    60cc:	dc400715 	stw	r17,28(sp)
    60d0:	2023883a 	mov	r17,r4
    60d4:	2809883a 	mov	r4,r5
    60d8:	dfc00915 	stw	ra,36(sp)
    60dc:	dcc00815 	stw	r19,32(sp)
    60e0:	2827883a 	mov	r19,r5
    60e4:	00065180 	call	6518 <strlen>
    60e8:	89400217 	ldw	r5,8(r17)
    60ec:	00c00074 	movhi	r3,1
    60f0:	18c00704 	addi	r3,r3,28
    60f4:	01c00044 	movi	r7,1
    60f8:	12000044 	addi	r8,r2,1
    60fc:	d8c00515 	stw	r3,20(sp)
    6100:	d9c00615 	stw	r7,24(sp)
    6104:	d8c00304 	addi	r3,sp,12
    6108:	01c00084 	movi	r7,2
    610c:	8809883a 	mov	r4,r17
    6110:	d80d883a 	mov	r6,sp
    6114:	d8c00015 	stw	r3,0(sp)
    6118:	dcc00315 	stw	r19,12(sp)
    611c:	da000215 	stw	r8,8(sp)
    6120:	d9c00115 	stw	r7,4(sp)
    6124:	d8800415 	stw	r2,16(sp)
    6128:	000a0ec0 	call	a0ec <__sfvwrite_r>
    612c:	00ffffc4 	movi	r3,-1
    6130:	10000626 	beq	r2,zero,614c <_puts_r+0x84>
    6134:	1805883a 	mov	r2,r3
    6138:	dfc00917 	ldw	ra,36(sp)
    613c:	dcc00817 	ldw	r19,32(sp)
    6140:	dc400717 	ldw	r17,28(sp)
    6144:	dec00a04 	addi	sp,sp,40
    6148:	f800283a 	ret
    614c:	00c00284 	movi	r3,10
    6150:	1805883a 	mov	r2,r3
    6154:	dfc00917 	ldw	ra,36(sp)
    6158:	dcc00817 	ldw	r19,32(sp)
    615c:	dc400717 	ldw	r17,28(sp)
    6160:	dec00a04 	addi	sp,sp,40
    6164:	f800283a 	ret

00006168 <puts>:
    6168:	00800074 	movhi	r2,1
    616c:	10890804 	addi	r2,r2,9248
    6170:	200b883a 	mov	r5,r4
    6174:	11000017 	ldw	r4,0(r2)
    6178:	00060c81 	jmpi	60c8 <_puts_r>

0000617c <__srefill_r>:
    617c:	defffd04 	addi	sp,sp,-12
    6180:	dc400115 	stw	r17,4(sp)
    6184:	dc000015 	stw	r16,0(sp)
    6188:	dfc00215 	stw	ra,8(sp)
    618c:	2023883a 	mov	r17,r4
    6190:	2821883a 	mov	r16,r5
    6194:	20000226 	beq	r4,zero,61a0 <__srefill_r+0x24>
    6198:	20800e17 	ldw	r2,56(r4)
    619c:	10004126 	beq	r2,zero,62a4 <__srefill_r+0x128>
    61a0:	80c0030b 	ldhu	r3,12(r16)
    61a4:	80000115 	stw	zero,4(r16)
    61a8:	1880080c 	andi	r2,r3,32
    61ac:	1000361e 	bne	r2,zero,6288 <__srefill_r+0x10c>
    61b0:	1880010c 	andi	r2,r3,4
    61b4:	1000211e 	bne	r2,zero,623c <__srefill_r+0xc0>
    61b8:	1880040c 	andi	r2,r3,16
    61bc:	10005026 	beq	r2,zero,6300 <__srefill_r+0x184>
    61c0:	1880020c 	andi	r2,r3,8
    61c4:	1000541e 	bne	r2,zero,6318 <__srefill_r+0x19c>
    61c8:	8080030b 	ldhu	r2,12(r16)
    61cc:	10800114 	ori	r2,r2,4
    61d0:	8080030d 	sth	r2,12(r16)
    61d4:	80800417 	ldw	r2,16(r16)
    61d8:	10004526 	beq	r2,zero,62f0 <__srefill_r+0x174>
    61dc:	8080030b 	ldhu	r2,12(r16)
    61e0:	108000cc 	andi	r2,r2,3
    61e4:	1000361e 	bne	r2,zero,62c0 <__srefill_r+0x144>
    61e8:	81800417 	ldw	r6,16(r16)
    61ec:	80c00817 	ldw	r3,32(r16)
    61f0:	81400717 	ldw	r5,28(r16)
    61f4:	81c00517 	ldw	r7,20(r16)
    61f8:	8809883a 	mov	r4,r17
    61fc:	81800015 	stw	r6,0(r16)
    6200:	183ee83a 	callr	r3
    6204:	80c0030b 	ldhu	r3,12(r16)
    6208:	1009883a 	mov	r4,r2
    620c:	80800115 	stw	r2,4(r16)
    6210:	00b7ffc4 	movi	r2,-8193
    6214:	1884703a 	and	r2,r3,r2
    6218:	8080030d 	sth	r2,12(r16)
    621c:	0100230e 	bge	zero,r4,62ac <__srefill_r+0x130>
    6220:	0009883a 	mov	r4,zero
    6224:	2005883a 	mov	r2,r4
    6228:	dfc00217 	ldw	ra,8(sp)
    622c:	dc400117 	ldw	r17,4(sp)
    6230:	dc000017 	ldw	r16,0(sp)
    6234:	dec00304 	addi	sp,sp,12
    6238:	f800283a 	ret
    623c:	81400c17 	ldw	r5,48(r16)
    6240:	283fe426 	beq	r5,zero,61d4 <__srefill_r+0x58>
    6244:	80801004 	addi	r2,r16,64
    6248:	28800226 	beq	r5,r2,6254 <__srefill_r+0xd8>
    624c:	8809883a 	mov	r4,r17
    6250:	000499c0 	call	499c <_free_r>
    6254:	80800f17 	ldw	r2,60(r16)
    6258:	80000c15 	stw	zero,48(r16)
    625c:	80800115 	stw	r2,4(r16)
    6260:	103fdc26 	beq	r2,zero,61d4 <__srefill_r+0x58>
    6264:	80800e17 	ldw	r2,56(r16)
    6268:	0009883a 	mov	r4,zero
    626c:	80800015 	stw	r2,0(r16)
    6270:	2005883a 	mov	r2,r4
    6274:	dfc00217 	ldw	ra,8(sp)
    6278:	dc400117 	ldw	r17,4(sp)
    627c:	dc000017 	ldw	r16,0(sp)
    6280:	dec00304 	addi	sp,sp,12
    6284:	f800283a 	ret
    6288:	013fffc4 	movi	r4,-1
    628c:	2005883a 	mov	r2,r4
    6290:	dfc00217 	ldw	ra,8(sp)
    6294:	dc400117 	ldw	r17,4(sp)
    6298:	dc000017 	ldw	r16,0(sp)
    629c:	dec00304 	addi	sp,sp,12
    62a0:	f800283a 	ret
    62a4:	00043ec0 	call	43ec <__sinit>
    62a8:	003fbd06 	br	61a0 <__srefill_r+0x24>
    62ac:	20000b1e 	bne	r4,zero,62dc <__srefill_r+0x160>
    62b0:	10800814 	ori	r2,r2,32
    62b4:	013fffc4 	movi	r4,-1
    62b8:	8080030d 	sth	r2,12(r16)
    62bc:	003fd906 	br	6224 <__srefill_r+0xa8>
    62c0:	00800074 	movhi	r2,1
    62c4:	10890904 	addi	r2,r2,9252
    62c8:	11000017 	ldw	r4,0(r2)
    62cc:	01400034 	movhi	r5,0
    62d0:	2958d004 	addi	r5,r5,25408
    62d4:	000524c0 	call	524c <_fwalk>
    62d8:	003fc306 	br	61e8 <__srefill_r+0x6c>
    62dc:	10801014 	ori	r2,r2,64
    62e0:	013fffc4 	movi	r4,-1
    62e4:	8080030d 	sth	r2,12(r16)
    62e8:	80000115 	stw	zero,4(r16)
    62ec:	003fcd06 	br	6224 <__srefill_r+0xa8>
    62f0:	8809883a 	mov	r4,r17
    62f4:	800b883a 	mov	r5,r16
    62f8:	00053e00 	call	53e0 <__smakebuf_r>
    62fc:	003fb706 	br	61dc <__srefill_r+0x60>
    6300:	18c01014 	ori	r3,r3,64
    6304:	00800244 	movi	r2,9
    6308:	013fffc4 	movi	r4,-1
    630c:	88800015 	stw	r2,0(r17)
    6310:	80c0030d 	sth	r3,12(r16)
    6314:	003fc306 	br	6224 <__srefill_r+0xa8>
    6318:	8809883a 	mov	r4,r17
    631c:	800b883a 	mov	r5,r16
    6320:	00041540 	call	4154 <_fflush_r>
    6324:	103fd81e 	bne	r2,zero,6288 <__srefill_r+0x10c>
    6328:	8080030b 	ldhu	r2,12(r16)
    632c:	80000215 	stw	zero,8(r16)
    6330:	80000615 	stw	zero,24(r16)
    6334:	10bffdcc 	andi	r2,r2,65527
    6338:	8080030d 	sth	r2,12(r16)
    633c:	003fa206 	br	61c8 <__srefill_r+0x4c>

00006340 <lflush>:
    6340:	20c0030b 	ldhu	r3,12(r4)
    6344:	01400244 	movi	r5,9
    6348:	0005883a 	mov	r2,zero
    634c:	18c0024c 	andi	r3,r3,9
    6350:	19400126 	beq	r3,r5,6358 <lflush+0x18>
    6354:	f800283a 	ret
    6358:	00043501 	jmpi	4350 <fflush>

0000635c <_sbrk_r>:
    635c:	defffd04 	addi	sp,sp,-12
    6360:	dc000015 	stw	r16,0(sp)
    6364:	04000074 	movhi	r16,1
    6368:	8410e504 	addi	r16,r16,17300
    636c:	dc400115 	stw	r17,4(sp)
    6370:	80000015 	stw	zero,0(r16)
    6374:	2023883a 	mov	r17,r4
    6378:	2809883a 	mov	r4,r5
    637c:	dfc00215 	stw	ra,8(sp)
    6380:	000d9d00 	call	d9d0 <sbrk>
    6384:	1007883a 	mov	r3,r2
    6388:	00bfffc4 	movi	r2,-1
    638c:	18800626 	beq	r3,r2,63a8 <_sbrk_r+0x4c>
    6390:	1805883a 	mov	r2,r3
    6394:	dfc00217 	ldw	ra,8(sp)
    6398:	dc400117 	ldw	r17,4(sp)
    639c:	dc000017 	ldw	r16,0(sp)
    63a0:	dec00304 	addi	sp,sp,12
    63a4:	f800283a 	ret
    63a8:	80800017 	ldw	r2,0(r16)
    63ac:	103ff826 	beq	r2,zero,6390 <_sbrk_r+0x34>
    63b0:	88800015 	stw	r2,0(r17)
    63b4:	1805883a 	mov	r2,r3
    63b8:	dfc00217 	ldw	ra,8(sp)
    63bc:	dc400117 	ldw	r17,4(sp)
    63c0:	dc000017 	ldw	r16,0(sp)
    63c4:	dec00304 	addi	sp,sp,12
    63c8:	f800283a 	ret

000063cc <__sclose>:
    63cc:	2940038f 	ldh	r5,14(r5)
    63d0:	00088101 	jmpi	8810 <_close_r>

000063d4 <__sseek>:
    63d4:	defffe04 	addi	sp,sp,-8
    63d8:	dc000015 	stw	r16,0(sp)
    63dc:	2821883a 	mov	r16,r5
    63e0:	2940038f 	ldh	r5,14(r5)
    63e4:	dfc00115 	stw	ra,4(sp)
    63e8:	000a7300 	call	a730 <_lseek_r>
    63ec:	1007883a 	mov	r3,r2
    63f0:	00bfffc4 	movi	r2,-1
    63f4:	18800926 	beq	r3,r2,641c <__sseek+0x48>
    63f8:	8080030b 	ldhu	r2,12(r16)
    63fc:	80c01415 	stw	r3,80(r16)
    6400:	10840014 	ori	r2,r2,4096
    6404:	8080030d 	sth	r2,12(r16)
    6408:	1805883a 	mov	r2,r3
    640c:	dfc00117 	ldw	ra,4(sp)
    6410:	dc000017 	ldw	r16,0(sp)
    6414:	dec00204 	addi	sp,sp,8
    6418:	f800283a 	ret
    641c:	8080030b 	ldhu	r2,12(r16)
    6420:	10bbffcc 	andi	r2,r2,61439
    6424:	8080030d 	sth	r2,12(r16)
    6428:	1805883a 	mov	r2,r3
    642c:	dfc00117 	ldw	ra,4(sp)
    6430:	dc000017 	ldw	r16,0(sp)
    6434:	dec00204 	addi	sp,sp,8
    6438:	f800283a 	ret

0000643c <__swrite>:
    643c:	2880030b 	ldhu	r2,12(r5)
    6440:	defffb04 	addi	sp,sp,-20
    6444:	dcc00315 	stw	r19,12(sp)
    6448:	1080400c 	andi	r2,r2,256
    644c:	dc800215 	stw	r18,8(sp)
    6450:	dc400115 	stw	r17,4(sp)
    6454:	dc000015 	stw	r16,0(sp)
    6458:	3027883a 	mov	r19,r6
    645c:	3825883a 	mov	r18,r7
    6460:	dfc00415 	stw	ra,16(sp)
    6464:	2821883a 	mov	r16,r5
    6468:	000d883a 	mov	r6,zero
    646c:	01c00084 	movi	r7,2
    6470:	2023883a 	mov	r17,r4
    6474:	10000226 	beq	r2,zero,6480 <__swrite+0x44>
    6478:	2940038f 	ldh	r5,14(r5)
    647c:	000a7300 	call	a730 <_lseek_r>
    6480:	8080030b 	ldhu	r2,12(r16)
    6484:	8140038f 	ldh	r5,14(r16)
    6488:	8809883a 	mov	r4,r17
    648c:	10bbffcc 	andi	r2,r2,61439
    6490:	980d883a 	mov	r6,r19
    6494:	900f883a 	mov	r7,r18
    6498:	8080030d 	sth	r2,12(r16)
    649c:	dfc00417 	ldw	ra,16(sp)
    64a0:	dcc00317 	ldw	r19,12(sp)
    64a4:	dc800217 	ldw	r18,8(sp)
    64a8:	dc400117 	ldw	r17,4(sp)
    64ac:	dc000017 	ldw	r16,0(sp)
    64b0:	dec00504 	addi	sp,sp,20
    64b4:	000865c1 	jmpi	865c <_write_r>

000064b8 <__sread>:
    64b8:	defffe04 	addi	sp,sp,-8
    64bc:	dc000015 	stw	r16,0(sp)
    64c0:	2821883a 	mov	r16,r5
    64c4:	2940038f 	ldh	r5,14(r5)
    64c8:	dfc00115 	stw	ra,4(sp)
    64cc:	000b9600 	call	b960 <_read_r>
    64d0:	1007883a 	mov	r3,r2
    64d4:	10000816 	blt	r2,zero,64f8 <__sread+0x40>
    64d8:	80801417 	ldw	r2,80(r16)
    64dc:	10c5883a 	add	r2,r2,r3
    64e0:	80801415 	stw	r2,80(r16)
    64e4:	1805883a 	mov	r2,r3
    64e8:	dfc00117 	ldw	ra,4(sp)
    64ec:	dc000017 	ldw	r16,0(sp)
    64f0:	dec00204 	addi	sp,sp,8
    64f4:	f800283a 	ret
    64f8:	8080030b 	ldhu	r2,12(r16)
    64fc:	10bbffcc 	andi	r2,r2,61439
    6500:	8080030d 	sth	r2,12(r16)
    6504:	1805883a 	mov	r2,r3
    6508:	dfc00117 	ldw	ra,4(sp)
    650c:	dc000017 	ldw	r16,0(sp)
    6510:	dec00204 	addi	sp,sp,8
    6514:	f800283a 	ret

00006518 <strlen>:
    6518:	208000cc 	andi	r2,r4,3
    651c:	2011883a 	mov	r8,r4
    6520:	1000161e 	bne	r2,zero,657c <strlen+0x64>
    6524:	20c00017 	ldw	r3,0(r4)
    6528:	017fbff4 	movhi	r5,65279
    652c:	297fbfc4 	addi	r5,r5,-257
    6530:	01e02074 	movhi	r7,32897
    6534:	39e02004 	addi	r7,r7,-32640
    6538:	1945883a 	add	r2,r3,r5
    653c:	11c4703a 	and	r2,r2,r7
    6540:	00c6303a 	nor	r3,zero,r3
    6544:	1886703a 	and	r3,r3,r2
    6548:	18000c1e 	bne	r3,zero,657c <strlen+0x64>
    654c:	280d883a 	mov	r6,r5
    6550:	380b883a 	mov	r5,r7
    6554:	21000104 	addi	r4,r4,4
    6558:	20800017 	ldw	r2,0(r4)
    655c:	1187883a 	add	r3,r2,r6
    6560:	1946703a 	and	r3,r3,r5
    6564:	0084303a 	nor	r2,zero,r2
    6568:	10c4703a 	and	r2,r2,r3
    656c:	103ff926 	beq	r2,zero,6554 <strlen+0x3c>
    6570:	20800007 	ldb	r2,0(r4)
    6574:	10000326 	beq	r2,zero,6584 <strlen+0x6c>
    6578:	21000044 	addi	r4,r4,1
    657c:	20800007 	ldb	r2,0(r4)
    6580:	103ffd1e 	bne	r2,zero,6578 <strlen+0x60>
    6584:	2205c83a 	sub	r2,r4,r8
    6588:	f800283a 	ret

0000658c <time>:
    658c:	defffc04 	addi	sp,sp,-16
    6590:	00800074 	movhi	r2,1
    6594:	10890804 	addi	r2,r2,9248
    6598:	dc000215 	stw	r16,8(sp)
    659c:	2021883a 	mov	r16,r4
    65a0:	11000017 	ldw	r4,0(r2)
    65a4:	d80b883a 	mov	r5,sp
    65a8:	000d883a 	mov	r6,zero
    65ac:	dfc00315 	stw	ra,12(sp)
    65b0:	000a5880 	call	a588 <_gettimeofday_r>
    65b4:	00ffffc4 	movi	r3,-1
    65b8:	10000416 	blt	r2,zero,65cc <time+0x40>
    65bc:	80000826 	beq	r16,zero,65e0 <time+0x54>
    65c0:	d8800017 	ldw	r2,0(sp)
    65c4:	80800015 	stw	r2,0(r16)
    65c8:	1007883a 	mov	r3,r2
    65cc:	1805883a 	mov	r2,r3
    65d0:	dfc00317 	ldw	ra,12(sp)
    65d4:	dc000217 	ldw	r16,8(sp)
    65d8:	dec00404 	addi	sp,sp,16
    65dc:	f800283a 	ret
    65e0:	d8800017 	ldw	r2,0(sp)
    65e4:	003ff806 	br	65c8 <time+0x3c>

000065e8 <__sprint_r>:
    65e8:	30800217 	ldw	r2,8(r6)
    65ec:	defffe04 	addi	sp,sp,-8
    65f0:	dc000015 	stw	r16,0(sp)
    65f4:	dfc00115 	stw	ra,4(sp)
    65f8:	3021883a 	mov	r16,r6
    65fc:	0007883a 	mov	r3,zero
    6600:	1000061e 	bne	r2,zero,661c <__sprint_r+0x34>
    6604:	1805883a 	mov	r2,r3
    6608:	30000115 	stw	zero,4(r6)
    660c:	dfc00117 	ldw	ra,4(sp)
    6610:	dc000017 	ldw	r16,0(sp)
    6614:	dec00204 	addi	sp,sp,8
    6618:	f800283a 	ret
    661c:	000a0ec0 	call	a0ec <__sfvwrite_r>
    6620:	1007883a 	mov	r3,r2
    6624:	1805883a 	mov	r2,r3
    6628:	80000115 	stw	zero,4(r16)
    662c:	80000215 	stw	zero,8(r16)
    6630:	dfc00117 	ldw	ra,4(sp)
    6634:	dc000017 	ldw	r16,0(sp)
    6638:	dec00204 	addi	sp,sp,8
    663c:	f800283a 	ret

00006640 <___vfprintf_internal_r>:
    6640:	defea404 	addi	sp,sp,-1392
    6644:	dd815815 	stw	r22,1376(sp)
    6648:	dc015215 	stw	r16,1352(sp)
    664c:	d9c15115 	stw	r7,1348(sp)
    6650:	dfc15b15 	stw	ra,1388(sp)
    6654:	df015a15 	stw	fp,1384(sp)
    6658:	ddc15915 	stw	r23,1380(sp)
    665c:	dd415715 	stw	r21,1372(sp)
    6660:	dd015615 	stw	r20,1368(sp)
    6664:	dcc15515 	stw	r19,1364(sp)
    6668:	dc815415 	stw	r18,1360(sp)
    666c:	dc415315 	stw	r17,1356(sp)
    6670:	282d883a 	mov	r22,r5
    6674:	3021883a 	mov	r16,r6
    6678:	d9014f15 	stw	r4,1340(sp)
    667c:	000a6740 	call	a674 <_localeconv_r>
    6680:	10800017 	ldw	r2,0(r2)
    6684:	d9c15117 	ldw	r7,1348(sp)
    6688:	d8814915 	stw	r2,1316(sp)
    668c:	d8814f17 	ldw	r2,1340(sp)
    6690:	10000226 	beq	r2,zero,669c <___vfprintf_internal_r+0x5c>
    6694:	10800e17 	ldw	r2,56(r2)
    6698:	10020d26 	beq	r2,zero,6ed0 <___vfprintf_internal_r+0x890>
    669c:	b080030b 	ldhu	r2,12(r22)
    66a0:	1080020c 	andi	r2,r2,8
    66a4:	10020e26 	beq	r2,zero,6ee0 <___vfprintf_internal_r+0x8a0>
    66a8:	b0800417 	ldw	r2,16(r22)
    66ac:	10020c26 	beq	r2,zero,6ee0 <___vfprintf_internal_r+0x8a0>
    66b0:	b200030b 	ldhu	r8,12(r22)
    66b4:	00800284 	movi	r2,10
    66b8:	40c0068c 	andi	r3,r8,26
    66bc:	18802f1e 	bne	r3,r2,677c <___vfprintf_internal_r+0x13c>
    66c0:	b080038f 	ldh	r2,14(r22)
    66c4:	10002d16 	blt	r2,zero,677c <___vfprintf_internal_r+0x13c>
    66c8:	b240038b 	ldhu	r9,14(r22)
    66cc:	b2800717 	ldw	r10,28(r22)
    66d0:	b2c00917 	ldw	r11,36(r22)
    66d4:	d9014f17 	ldw	r4,1340(sp)
    66d8:	dc402904 	addi	r17,sp,164
    66dc:	d8804004 	addi	r2,sp,256
    66e0:	00c10004 	movi	r3,1024
    66e4:	423fff4c 	andi	r8,r8,65533
    66e8:	800d883a 	mov	r6,r16
    66ec:	880b883a 	mov	r5,r17
    66f0:	da002c0d 	sth	r8,176(sp)
    66f4:	da402c8d 	sth	r9,178(sp)
    66f8:	da803015 	stw	r10,192(sp)
    66fc:	dac03215 	stw	r11,200(sp)
    6700:	d8802d15 	stw	r2,180(sp)
    6704:	d8c02e15 	stw	r3,184(sp)
    6708:	d8802915 	stw	r2,164(sp)
    670c:	d8c02b15 	stw	r3,172(sp)
    6710:	d8002f15 	stw	zero,188(sp)
    6714:	00066400 	call	6640 <___vfprintf_internal_r>
    6718:	d8814b15 	stw	r2,1324(sp)
    671c:	10000416 	blt	r2,zero,6730 <___vfprintf_internal_r+0xf0>
    6720:	d9014f17 	ldw	r4,1340(sp)
    6724:	880b883a 	mov	r5,r17
    6728:	00041540 	call	4154 <_fflush_r>
    672c:	1002321e 	bne	r2,zero,6ff8 <___vfprintf_internal_r+0x9b8>
    6730:	d8802c0b 	ldhu	r2,176(sp)
    6734:	1080100c 	andi	r2,r2,64
    6738:	10000326 	beq	r2,zero,6748 <___vfprintf_internal_r+0x108>
    673c:	b080030b 	ldhu	r2,12(r22)
    6740:	10801014 	ori	r2,r2,64
    6744:	b080030d 	sth	r2,12(r22)
    6748:	d8814b17 	ldw	r2,1324(sp)
    674c:	dfc15b17 	ldw	ra,1388(sp)
    6750:	df015a17 	ldw	fp,1384(sp)
    6754:	ddc15917 	ldw	r23,1380(sp)
    6758:	dd815817 	ldw	r22,1376(sp)
    675c:	dd415717 	ldw	r21,1372(sp)
    6760:	dd015617 	ldw	r20,1368(sp)
    6764:	dcc15517 	ldw	r19,1364(sp)
    6768:	dc815417 	ldw	r18,1360(sp)
    676c:	dc415317 	ldw	r17,1356(sp)
    6770:	dc015217 	ldw	r16,1352(sp)
    6774:	dec15c04 	addi	sp,sp,1392
    6778:	f800283a 	ret
    677c:	0005883a 	mov	r2,zero
    6780:	0007883a 	mov	r3,zero
    6784:	dd401904 	addi	r21,sp,100
    6788:	d8814215 	stw	r2,1288(sp)
    678c:	802f883a 	mov	r23,r16
    6790:	d8c14315 	stw	r3,1292(sp)
    6794:	d8014b15 	stw	zero,1324(sp)
    6798:	d8014815 	stw	zero,1312(sp)
    679c:	d8014415 	stw	zero,1296(sp)
    67a0:	d8014715 	stw	zero,1308(sp)
    67a4:	dd400c15 	stw	r21,48(sp)
    67a8:	d8000e15 	stw	zero,56(sp)
    67ac:	d8000d15 	stw	zero,52(sp)
    67b0:	b8800007 	ldb	r2,0(r23)
    67b4:	10001926 	beq	r2,zero,681c <___vfprintf_internal_r+0x1dc>
    67b8:	00c00944 	movi	r3,37
    67bc:	10c01726 	beq	r2,r3,681c <___vfprintf_internal_r+0x1dc>
    67c0:	b821883a 	mov	r16,r23
    67c4:	00000106 	br	67cc <___vfprintf_internal_r+0x18c>
    67c8:	10c00326 	beq	r2,r3,67d8 <___vfprintf_internal_r+0x198>
    67cc:	84000044 	addi	r16,r16,1
    67d0:	80800007 	ldb	r2,0(r16)
    67d4:	103ffc1e 	bne	r2,zero,67c8 <___vfprintf_internal_r+0x188>
    67d8:	85e7c83a 	sub	r19,r16,r23
    67dc:	98000e26 	beq	r19,zero,6818 <___vfprintf_internal_r+0x1d8>
    67e0:	dc800e17 	ldw	r18,56(sp)
    67e4:	dc400d17 	ldw	r17,52(sp)
    67e8:	008001c4 	movi	r2,7
    67ec:	94e5883a 	add	r18,r18,r19
    67f0:	8c400044 	addi	r17,r17,1
    67f4:	adc00015 	stw	r23,0(r21)
    67f8:	dc800e15 	stw	r18,56(sp)
    67fc:	acc00115 	stw	r19,4(r21)
    6800:	dc400d15 	stw	r17,52(sp)
    6804:	14428b16 	blt	r2,r17,7234 <___vfprintf_internal_r+0xbf4>
    6808:	ad400204 	addi	r21,r21,8
    680c:	d9014b17 	ldw	r4,1324(sp)
    6810:	24c9883a 	add	r4,r4,r19
    6814:	d9014b15 	stw	r4,1324(sp)
    6818:	802f883a 	mov	r23,r16
    681c:	b8800007 	ldb	r2,0(r23)
    6820:	10013c26 	beq	r2,zero,6d14 <___vfprintf_internal_r+0x6d4>
    6824:	bdc00044 	addi	r23,r23,1
    6828:	d8000405 	stb	zero,16(sp)
    682c:	b8c00007 	ldb	r3,0(r23)
    6830:	04ffffc4 	movi	r19,-1
    6834:	d8014c15 	stw	zero,1328(sp)
    6838:	d8014a15 	stw	zero,1320(sp)
    683c:	d8c14d15 	stw	r3,1332(sp)
    6840:	bdc00044 	addi	r23,r23,1
    6844:	d9414d17 	ldw	r5,1332(sp)
    6848:	00801604 	movi	r2,88
    684c:	28fff804 	addi	r3,r5,-32
    6850:	10c06036 	bltu	r2,r3,69d4 <___vfprintf_internal_r+0x394>
    6854:	18c5883a 	add	r2,r3,r3
    6858:	1085883a 	add	r2,r2,r2
    685c:	00c00034 	movhi	r3,0
    6860:	18da1c04 	addi	r3,r3,26736
    6864:	10c5883a 	add	r2,r2,r3
    6868:	11000017 	ldw	r4,0(r2)
    686c:	2000683a 	jmp	r4
    6870:	000077e4 	muli	zero,zero,479
    6874:	000069d4 	movui	zero,423
    6878:	000069d4 	movui	zero,423
    687c:	000077d0 	cmplti	zero,zero,479
    6880:	000069d4 	movui	zero,423
    6884:	000069d4 	movui	zero,423
    6888:	000069d4 	movui	zero,423
    688c:	000069d4 	movui	zero,423
    6890:	000069d4 	movui	zero,423
    6894:	000069d4 	movui	zero,423
    6898:	000075b0 	cmpltui	zero,zero,470
    689c:	000077c0 	call	77c <extractCornersFP+0x58>
    68a0:	000069d4 	movui	zero,423
    68a4:	000075c8 	cmpgei	zero,zero,471
    68a8:	0000785c 	xori	zero,zero,481
    68ac:	000069d4 	movui	zero,423
    68b0:	00007848 	cmpgei	zero,zero,481
    68b4:	00007810 	cmplti	zero,zero,480
    68b8:	00007810 	cmplti	zero,zero,480
    68bc:	00007810 	cmplti	zero,zero,480
    68c0:	00007810 	cmplti	zero,zero,480
    68c4:	00007810 	cmplti	zero,zero,480
    68c8:	00007810 	cmplti	zero,zero,480
    68cc:	00007810 	cmplti	zero,zero,480
    68d0:	00007810 	cmplti	zero,zero,480
    68d4:	00007810 	cmplti	zero,zero,480
    68d8:	000069d4 	movui	zero,423
    68dc:	000069d4 	movui	zero,423
    68e0:	000069d4 	movui	zero,423
    68e4:	000069d4 	movui	zero,423
    68e8:	000069d4 	movui	zero,423
    68ec:	000069d4 	movui	zero,423
    68f0:	000069d4 	movui	zero,423
    68f4:	000069d4 	movui	zero,423
    68f8:	000069d4 	movui	zero,423
    68fc:	000069d4 	movui	zero,423
    6900:	0000702c 	andhi	zero,zero,448
    6904:	00007698 	cmpnei	zero,zero,474
    6908:	000069d4 	movui	zero,423
    690c:	00007698 	cmpnei	zero,zero,474
    6910:	000069d4 	movui	zero,423
    6914:	000069d4 	movui	zero,423
    6918:	000069d4 	movui	zero,423
    691c:	000069d4 	movui	zero,423
    6920:	000077fc 	xorhi	zero,zero,479
    6924:	000069d4 	movui	zero,423
    6928:	000069d4 	movui	zero,423
    692c:	000070e0 	cmpeqi	zero,zero,451
    6930:	000069d4 	movui	zero,423
    6934:	000069d4 	movui	zero,423
    6938:	000069d4 	movui	zero,423
    693c:	000069d4 	movui	zero,423
    6940:	000069d4 	movui	zero,423
    6944:	0000712c 	andhi	zero,zero,452
    6948:	000069d4 	movui	zero,423
    694c:	000069d4 	movui	zero,423
    6950:	0000774c 	andi	zero,zero,477
    6954:	000069d4 	movui	zero,423
    6958:	000069d4 	movui	zero,423
    695c:	000069d4 	movui	zero,423
    6960:	000069d4 	movui	zero,423
    6964:	000069d4 	movui	zero,423
    6968:	000069d4 	movui	zero,423
    696c:	000069d4 	movui	zero,423
    6970:	000069d4 	movui	zero,423
    6974:	000069d4 	movui	zero,423
    6978:	000069d4 	movui	zero,423
    697c:	00007720 	cmpeqi	zero,zero,476
    6980:	00007038 	rdprs	zero,zero,448
    6984:	00007698 	cmpnei	zero,zero,474
    6988:	00007698 	cmpnei	zero,zero,474
    698c:	00007698 	cmpnei	zero,zero,474
    6990:	00007684 	movi	zero,474
    6994:	00007038 	rdprs	zero,zero,448
    6998:	000069d4 	movui	zero,423
    699c:	000069d4 	movui	zero,423
    69a0:	0000760c 	andi	zero,zero,472
    69a4:	000069d4 	movui	zero,423
    69a8:	000075dc 	xori	zero,zero,471
    69ac:	000070ec 	andhi	zero,zero,451
    69b0:	0000763c 	xorhi	zero,zero,472
    69b4:	00007628 	cmpgeui	zero,zero,472
    69b8:	000069d4 	movui	zero,423
    69bc:	000078b8 	rdprs	zero,zero,482
    69c0:	000069d4 	movui	zero,423
    69c4:	00007138 	rdprs	zero,zero,452
    69c8:	000069d4 	movui	zero,423
    69cc:	000069d4 	movui	zero,423
    69d0:	000077b0 	cmpltui	zero,zero,478
    69d4:	d9014d17 	ldw	r4,1332(sp)
    69d8:	2000ce26 	beq	r4,zero,6d14 <___vfprintf_internal_r+0x6d4>
    69dc:	01400044 	movi	r5,1
    69e0:	d9800f04 	addi	r6,sp,60
    69e4:	d9c14015 	stw	r7,1280(sp)
    69e8:	d9414515 	stw	r5,1300(sp)
    69ec:	d9814115 	stw	r6,1284(sp)
    69f0:	280f883a 	mov	r7,r5
    69f4:	d9000f05 	stb	r4,60(sp)
    69f8:	d8000405 	stb	zero,16(sp)
    69fc:	d8014615 	stw	zero,1304(sp)
    6a00:	d8c14c17 	ldw	r3,1328(sp)
    6a04:	1880008c 	andi	r2,r3,2
    6a08:	1005003a 	cmpeq	r2,r2,zero
    6a0c:	d8815015 	stw	r2,1344(sp)
    6a10:	1000031e 	bne	r2,zero,6a20 <___vfprintf_internal_r+0x3e0>
    6a14:	d9014517 	ldw	r4,1300(sp)
    6a18:	21000084 	addi	r4,r4,2
    6a1c:	d9014515 	stw	r4,1300(sp)
    6a20:	d9414c17 	ldw	r5,1328(sp)
    6a24:	2940210c 	andi	r5,r5,132
    6a28:	d9414e15 	stw	r5,1336(sp)
    6a2c:	28002d1e 	bne	r5,zero,6ae4 <___vfprintf_internal_r+0x4a4>
    6a30:	d9814a17 	ldw	r6,1320(sp)
    6a34:	d8814517 	ldw	r2,1300(sp)
    6a38:	30a1c83a 	sub	r16,r6,r2
    6a3c:	0400290e 	bge	zero,r16,6ae4 <___vfprintf_internal_r+0x4a4>
    6a40:	00800404 	movi	r2,16
    6a44:	1404580e 	bge	r2,r16,7ba8 <___vfprintf_internal_r+0x1568>
    6a48:	dc800e17 	ldw	r18,56(sp)
    6a4c:	dc400d17 	ldw	r17,52(sp)
    6a50:	1027883a 	mov	r19,r2
    6a54:	07000074 	movhi	fp,1
    6a58:	e7007984 	addi	fp,fp,486
    6a5c:	050001c4 	movi	r20,7
    6a60:	00000306 	br	6a70 <___vfprintf_internal_r+0x430>
    6a64:	843ffc04 	addi	r16,r16,-16
    6a68:	ad400204 	addi	r21,r21,8
    6a6c:	9c00130e 	bge	r19,r16,6abc <___vfprintf_internal_r+0x47c>
    6a70:	94800404 	addi	r18,r18,16
    6a74:	8c400044 	addi	r17,r17,1
    6a78:	af000015 	stw	fp,0(r21)
    6a7c:	acc00115 	stw	r19,4(r21)
    6a80:	dc800e15 	stw	r18,56(sp)
    6a84:	dc400d15 	stw	r17,52(sp)
    6a88:	a47ff60e 	bge	r20,r17,6a64 <___vfprintf_internal_r+0x424>
    6a8c:	d9014f17 	ldw	r4,1340(sp)
    6a90:	b00b883a 	mov	r5,r22
    6a94:	d9800c04 	addi	r6,sp,48
    6a98:	d9c15115 	stw	r7,1348(sp)
    6a9c:	00065e80 	call	65e8 <__sprint_r>
    6aa0:	d9c15117 	ldw	r7,1348(sp)
    6aa4:	10009e1e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    6aa8:	843ffc04 	addi	r16,r16,-16
    6aac:	dc800e17 	ldw	r18,56(sp)
    6ab0:	dc400d17 	ldw	r17,52(sp)
    6ab4:	dd401904 	addi	r21,sp,100
    6ab8:	9c3fed16 	blt	r19,r16,6a70 <___vfprintf_internal_r+0x430>
    6abc:	9425883a 	add	r18,r18,r16
    6ac0:	8c400044 	addi	r17,r17,1
    6ac4:	008001c4 	movi	r2,7
    6ac8:	af000015 	stw	fp,0(r21)
    6acc:	ac000115 	stw	r16,4(r21)
    6ad0:	dc800e15 	stw	r18,56(sp)
    6ad4:	dc400d15 	stw	r17,52(sp)
    6ad8:	1441f516 	blt	r2,r17,72b0 <___vfprintf_internal_r+0xc70>
    6adc:	ad400204 	addi	r21,r21,8
    6ae0:	00000206 	br	6aec <___vfprintf_internal_r+0x4ac>
    6ae4:	dc800e17 	ldw	r18,56(sp)
    6ae8:	dc400d17 	ldw	r17,52(sp)
    6aec:	d8800407 	ldb	r2,16(sp)
    6af0:	10000b26 	beq	r2,zero,6b20 <___vfprintf_internal_r+0x4e0>
    6af4:	00800044 	movi	r2,1
    6af8:	94800044 	addi	r18,r18,1
    6afc:	8c400044 	addi	r17,r17,1
    6b00:	a8800115 	stw	r2,4(r21)
    6b04:	d8c00404 	addi	r3,sp,16
    6b08:	008001c4 	movi	r2,7
    6b0c:	a8c00015 	stw	r3,0(r21)
    6b10:	dc800e15 	stw	r18,56(sp)
    6b14:	dc400d15 	stw	r17,52(sp)
    6b18:	1441da16 	blt	r2,r17,7284 <___vfprintf_internal_r+0xc44>
    6b1c:	ad400204 	addi	r21,r21,8
    6b20:	d9015017 	ldw	r4,1344(sp)
    6b24:	20000b1e 	bne	r4,zero,6b54 <___vfprintf_internal_r+0x514>
    6b28:	d8800444 	addi	r2,sp,17
    6b2c:	94800084 	addi	r18,r18,2
    6b30:	8c400044 	addi	r17,r17,1
    6b34:	a8800015 	stw	r2,0(r21)
    6b38:	00c00084 	movi	r3,2
    6b3c:	008001c4 	movi	r2,7
    6b40:	a8c00115 	stw	r3,4(r21)
    6b44:	dc800e15 	stw	r18,56(sp)
    6b48:	dc400d15 	stw	r17,52(sp)
    6b4c:	1441c216 	blt	r2,r17,7258 <___vfprintf_internal_r+0xc18>
    6b50:	ad400204 	addi	r21,r21,8
    6b54:	d9414e17 	ldw	r5,1336(sp)
    6b58:	00802004 	movi	r2,128
    6b5c:	2880b126 	beq	r5,r2,6e24 <___vfprintf_internal_r+0x7e4>
    6b60:	d8c14617 	ldw	r3,1304(sp)
    6b64:	19e1c83a 	sub	r16,r3,r7
    6b68:	0400260e 	bge	zero,r16,6c04 <___vfprintf_internal_r+0x5c4>
    6b6c:	00800404 	movi	r2,16
    6b70:	1403c90e 	bge	r2,r16,7a98 <___vfprintf_internal_r+0x1458>
    6b74:	1027883a 	mov	r19,r2
    6b78:	07000074 	movhi	fp,1
    6b7c:	e7007584 	addi	fp,fp,470
    6b80:	050001c4 	movi	r20,7
    6b84:	00000306 	br	6b94 <___vfprintf_internal_r+0x554>
    6b88:	843ffc04 	addi	r16,r16,-16
    6b8c:	ad400204 	addi	r21,r21,8
    6b90:	9c00130e 	bge	r19,r16,6be0 <___vfprintf_internal_r+0x5a0>
    6b94:	94800404 	addi	r18,r18,16
    6b98:	8c400044 	addi	r17,r17,1
    6b9c:	af000015 	stw	fp,0(r21)
    6ba0:	acc00115 	stw	r19,4(r21)
    6ba4:	dc800e15 	stw	r18,56(sp)
    6ba8:	dc400d15 	stw	r17,52(sp)
    6bac:	a47ff60e 	bge	r20,r17,6b88 <___vfprintf_internal_r+0x548>
    6bb0:	d9014f17 	ldw	r4,1340(sp)
    6bb4:	b00b883a 	mov	r5,r22
    6bb8:	d9800c04 	addi	r6,sp,48
    6bbc:	d9c15115 	stw	r7,1348(sp)
    6bc0:	00065e80 	call	65e8 <__sprint_r>
    6bc4:	d9c15117 	ldw	r7,1348(sp)
    6bc8:	1000551e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    6bcc:	843ffc04 	addi	r16,r16,-16
    6bd0:	dc800e17 	ldw	r18,56(sp)
    6bd4:	dc400d17 	ldw	r17,52(sp)
    6bd8:	dd401904 	addi	r21,sp,100
    6bdc:	9c3fed16 	blt	r19,r16,6b94 <___vfprintf_internal_r+0x554>
    6be0:	9425883a 	add	r18,r18,r16
    6be4:	8c400044 	addi	r17,r17,1
    6be8:	008001c4 	movi	r2,7
    6bec:	af000015 	stw	fp,0(r21)
    6bf0:	ac000115 	stw	r16,4(r21)
    6bf4:	dc800e15 	stw	r18,56(sp)
    6bf8:	dc400d15 	stw	r17,52(sp)
    6bfc:	14418216 	blt	r2,r17,7208 <___vfprintf_internal_r+0xbc8>
    6c00:	ad400204 	addi	r21,r21,8
    6c04:	d9014c17 	ldw	r4,1328(sp)
    6c08:	2080400c 	andi	r2,r4,256
    6c0c:	10004a1e 	bne	r2,zero,6d38 <___vfprintf_internal_r+0x6f8>
    6c10:	d9414117 	ldw	r5,1284(sp)
    6c14:	91e5883a 	add	r18,r18,r7
    6c18:	8c400044 	addi	r17,r17,1
    6c1c:	008001c4 	movi	r2,7
    6c20:	a9400015 	stw	r5,0(r21)
    6c24:	a9c00115 	stw	r7,4(r21)
    6c28:	dc800e15 	stw	r18,56(sp)
    6c2c:	dc400d15 	stw	r17,52(sp)
    6c30:	14416716 	blt	r2,r17,71d0 <___vfprintf_internal_r+0xb90>
    6c34:	a8c00204 	addi	r3,r21,8
    6c38:	d9814c17 	ldw	r6,1328(sp)
    6c3c:	3080010c 	andi	r2,r6,4
    6c40:	10002826 	beq	r2,zero,6ce4 <___vfprintf_internal_r+0x6a4>
    6c44:	d8814a17 	ldw	r2,1320(sp)
    6c48:	d9014517 	ldw	r4,1300(sp)
    6c4c:	1121c83a 	sub	r16,r2,r4
    6c50:	0400240e 	bge	zero,r16,6ce4 <___vfprintf_internal_r+0x6a4>
    6c54:	00800404 	movi	r2,16
    6c58:	14044f0e 	bge	r2,r16,7d98 <___vfprintf_internal_r+0x1758>
    6c5c:	dc400d17 	ldw	r17,52(sp)
    6c60:	1027883a 	mov	r19,r2
    6c64:	07000074 	movhi	fp,1
    6c68:	e7007984 	addi	fp,fp,486
    6c6c:	050001c4 	movi	r20,7
    6c70:	00000306 	br	6c80 <___vfprintf_internal_r+0x640>
    6c74:	843ffc04 	addi	r16,r16,-16
    6c78:	18c00204 	addi	r3,r3,8
    6c7c:	9c00110e 	bge	r19,r16,6cc4 <___vfprintf_internal_r+0x684>
    6c80:	94800404 	addi	r18,r18,16
    6c84:	8c400044 	addi	r17,r17,1
    6c88:	1f000015 	stw	fp,0(r3)
    6c8c:	1cc00115 	stw	r19,4(r3)
    6c90:	dc800e15 	stw	r18,56(sp)
    6c94:	dc400d15 	stw	r17,52(sp)
    6c98:	a47ff60e 	bge	r20,r17,6c74 <___vfprintf_internal_r+0x634>
    6c9c:	d9014f17 	ldw	r4,1340(sp)
    6ca0:	b00b883a 	mov	r5,r22
    6ca4:	d9800c04 	addi	r6,sp,48
    6ca8:	00065e80 	call	65e8 <__sprint_r>
    6cac:	10001c1e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    6cb0:	843ffc04 	addi	r16,r16,-16
    6cb4:	dc800e17 	ldw	r18,56(sp)
    6cb8:	dc400d17 	ldw	r17,52(sp)
    6cbc:	d8c01904 	addi	r3,sp,100
    6cc0:	9c3fef16 	blt	r19,r16,6c80 <___vfprintf_internal_r+0x640>
    6cc4:	9425883a 	add	r18,r18,r16
    6cc8:	8c400044 	addi	r17,r17,1
    6ccc:	008001c4 	movi	r2,7
    6cd0:	1f000015 	stw	fp,0(r3)
    6cd4:	1c000115 	stw	r16,4(r3)
    6cd8:	dc800e15 	stw	r18,56(sp)
    6cdc:	dc400d15 	stw	r17,52(sp)
    6ce0:	1440cb16 	blt	r2,r17,7010 <___vfprintf_internal_r+0x9d0>
    6ce4:	d8814a17 	ldw	r2,1320(sp)
    6ce8:	d9414517 	ldw	r5,1300(sp)
    6cec:	1140010e 	bge	r2,r5,6cf4 <___vfprintf_internal_r+0x6b4>
    6cf0:	2805883a 	mov	r2,r5
    6cf4:	d9814b17 	ldw	r6,1324(sp)
    6cf8:	308d883a 	add	r6,r6,r2
    6cfc:	d9814b15 	stw	r6,1324(sp)
    6d00:	90013b1e 	bne	r18,zero,71f0 <___vfprintf_internal_r+0xbb0>
    6d04:	d9c14017 	ldw	r7,1280(sp)
    6d08:	dd401904 	addi	r21,sp,100
    6d0c:	d8000d15 	stw	zero,52(sp)
    6d10:	003ea706 	br	67b0 <___vfprintf_internal_r+0x170>
    6d14:	d8800e17 	ldw	r2,56(sp)
    6d18:	10053f1e 	bne	r2,zero,8218 <___vfprintf_internal_r+0x1bd8>
    6d1c:	d8000d15 	stw	zero,52(sp)
    6d20:	b080030b 	ldhu	r2,12(r22)
    6d24:	1080100c 	andi	r2,r2,64
    6d28:	103e8726 	beq	r2,zero,6748 <___vfprintf_internal_r+0x108>
    6d2c:	00bfffc4 	movi	r2,-1
    6d30:	d8814b15 	stw	r2,1324(sp)
    6d34:	003e8406 	br	6748 <___vfprintf_internal_r+0x108>
    6d38:	d9814d17 	ldw	r6,1332(sp)
    6d3c:	00801944 	movi	r2,101
    6d40:	11806e16 	blt	r2,r6,6efc <___vfprintf_internal_r+0x8bc>
    6d44:	d9414717 	ldw	r5,1308(sp)
    6d48:	00c00044 	movi	r3,1
    6d4c:	1943430e 	bge	r3,r5,7a5c <___vfprintf_internal_r+0x141c>
    6d50:	d8814117 	ldw	r2,1284(sp)
    6d54:	94800044 	addi	r18,r18,1
    6d58:	8c400044 	addi	r17,r17,1
    6d5c:	a8800015 	stw	r2,0(r21)
    6d60:	008001c4 	movi	r2,7
    6d64:	a8c00115 	stw	r3,4(r21)
    6d68:	dc800e15 	stw	r18,56(sp)
    6d6c:	dc400d15 	stw	r17,52(sp)
    6d70:	1441ca16 	blt	r2,r17,749c <___vfprintf_internal_r+0xe5c>
    6d74:	a8c00204 	addi	r3,r21,8
    6d78:	d9014917 	ldw	r4,1316(sp)
    6d7c:	00800044 	movi	r2,1
    6d80:	94800044 	addi	r18,r18,1
    6d84:	8c400044 	addi	r17,r17,1
    6d88:	18800115 	stw	r2,4(r3)
    6d8c:	008001c4 	movi	r2,7
    6d90:	19000015 	stw	r4,0(r3)
    6d94:	dc800e15 	stw	r18,56(sp)
    6d98:	dc400d15 	stw	r17,52(sp)
    6d9c:	1441b616 	blt	r2,r17,7478 <___vfprintf_internal_r+0xe38>
    6da0:	1cc00204 	addi	r19,r3,8
    6da4:	d9014217 	ldw	r4,1288(sp)
    6da8:	d9414317 	ldw	r5,1292(sp)
    6dac:	000d883a 	mov	r6,zero
    6db0:	000f883a 	mov	r7,zero
    6db4:	000cd900 	call	cd90 <__nedf2>
    6db8:	10017426 	beq	r2,zero,738c <___vfprintf_internal_r+0xd4c>
    6dbc:	d9414717 	ldw	r5,1308(sp)
    6dc0:	d9814117 	ldw	r6,1284(sp)
    6dc4:	8c400044 	addi	r17,r17,1
    6dc8:	2c85883a 	add	r2,r5,r18
    6dcc:	14bfffc4 	addi	r18,r2,-1
    6dd0:	28bfffc4 	addi	r2,r5,-1
    6dd4:	30c00044 	addi	r3,r6,1
    6dd8:	98800115 	stw	r2,4(r19)
    6ddc:	008001c4 	movi	r2,7
    6de0:	98c00015 	stw	r3,0(r19)
    6de4:	dc800e15 	stw	r18,56(sp)
    6de8:	dc400d15 	stw	r17,52(sp)
    6dec:	14418e16 	blt	r2,r17,7428 <___vfprintf_internal_r+0xde8>
    6df0:	9cc00204 	addi	r19,r19,8
    6df4:	d9414817 	ldw	r5,1312(sp)
    6df8:	d8800804 	addi	r2,sp,32
    6dfc:	8c400044 	addi	r17,r17,1
    6e00:	9165883a 	add	r18,r18,r5
    6e04:	98800015 	stw	r2,0(r19)
    6e08:	008001c4 	movi	r2,7
    6e0c:	99400115 	stw	r5,4(r19)
    6e10:	dc800e15 	stw	r18,56(sp)
    6e14:	dc400d15 	stw	r17,52(sp)
    6e18:	1440ed16 	blt	r2,r17,71d0 <___vfprintf_internal_r+0xb90>
    6e1c:	98c00204 	addi	r3,r19,8
    6e20:	003f8506 	br	6c38 <___vfprintf_internal_r+0x5f8>
    6e24:	d9814a17 	ldw	r6,1320(sp)
    6e28:	d8814517 	ldw	r2,1300(sp)
    6e2c:	30a1c83a 	sub	r16,r6,r2
    6e30:	043f4b0e 	bge	zero,r16,6b60 <___vfprintf_internal_r+0x520>
    6e34:	00800404 	movi	r2,16
    6e38:	1404340e 	bge	r2,r16,7f0c <___vfprintf_internal_r+0x18cc>
    6e3c:	1027883a 	mov	r19,r2
    6e40:	07000074 	movhi	fp,1
    6e44:	e7007584 	addi	fp,fp,470
    6e48:	050001c4 	movi	r20,7
    6e4c:	00000306 	br	6e5c <___vfprintf_internal_r+0x81c>
    6e50:	843ffc04 	addi	r16,r16,-16
    6e54:	ad400204 	addi	r21,r21,8
    6e58:	9c00130e 	bge	r19,r16,6ea8 <___vfprintf_internal_r+0x868>
    6e5c:	94800404 	addi	r18,r18,16
    6e60:	8c400044 	addi	r17,r17,1
    6e64:	af000015 	stw	fp,0(r21)
    6e68:	acc00115 	stw	r19,4(r21)
    6e6c:	dc800e15 	stw	r18,56(sp)
    6e70:	dc400d15 	stw	r17,52(sp)
    6e74:	a47ff60e 	bge	r20,r17,6e50 <___vfprintf_internal_r+0x810>
    6e78:	d9014f17 	ldw	r4,1340(sp)
    6e7c:	b00b883a 	mov	r5,r22
    6e80:	d9800c04 	addi	r6,sp,48
    6e84:	d9c15115 	stw	r7,1348(sp)
    6e88:	00065e80 	call	65e8 <__sprint_r>
    6e8c:	d9c15117 	ldw	r7,1348(sp)
    6e90:	103fa31e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    6e94:	843ffc04 	addi	r16,r16,-16
    6e98:	dc800e17 	ldw	r18,56(sp)
    6e9c:	dc400d17 	ldw	r17,52(sp)
    6ea0:	dd401904 	addi	r21,sp,100
    6ea4:	9c3fed16 	blt	r19,r16,6e5c <___vfprintf_internal_r+0x81c>
    6ea8:	9425883a 	add	r18,r18,r16
    6eac:	8c400044 	addi	r17,r17,1
    6eb0:	008001c4 	movi	r2,7
    6eb4:	af000015 	stw	fp,0(r21)
    6eb8:	ac000115 	stw	r16,4(r21)
    6ebc:	dc800e15 	stw	r18,56(sp)
    6ec0:	dc400d15 	stw	r17,52(sp)
    6ec4:	14416116 	blt	r2,r17,744c <___vfprintf_internal_r+0xe0c>
    6ec8:	ad400204 	addi	r21,r21,8
    6ecc:	003f2406 	br	6b60 <___vfprintf_internal_r+0x520>
    6ed0:	d9014f17 	ldw	r4,1340(sp)
    6ed4:	00043ec0 	call	43ec <__sinit>
    6ed8:	d9c15117 	ldw	r7,1348(sp)
    6edc:	003def06 	br	669c <___vfprintf_internal_r+0x5c>
    6ee0:	d9014f17 	ldw	r4,1340(sp)
    6ee4:	b00b883a 	mov	r5,r22
    6ee8:	d9c15115 	stw	r7,1348(sp)
    6eec:	00086d40 	call	86d4 <__swsetup_r>
    6ef0:	d9c15117 	ldw	r7,1348(sp)
    6ef4:	103dee26 	beq	r2,zero,66b0 <___vfprintf_internal_r+0x70>
    6ef8:	003f8c06 	br	6d2c <___vfprintf_internal_r+0x6ec>
    6efc:	d9014217 	ldw	r4,1288(sp)
    6f00:	d9414317 	ldw	r5,1292(sp)
    6f04:	000d883a 	mov	r6,zero
    6f08:	000f883a 	mov	r7,zero
    6f0c:	000cd080 	call	cd08 <__eqdf2>
    6f10:	1000f21e 	bne	r2,zero,72dc <___vfprintf_internal_r+0xc9c>
    6f14:	00800074 	movhi	r2,1
    6f18:	10807504 	addi	r2,r2,468
    6f1c:	94800044 	addi	r18,r18,1
    6f20:	8c400044 	addi	r17,r17,1
    6f24:	a8800015 	stw	r2,0(r21)
    6f28:	00c00044 	movi	r3,1
    6f2c:	008001c4 	movi	r2,7
    6f30:	a8c00115 	stw	r3,4(r21)
    6f34:	dc800e15 	stw	r18,56(sp)
    6f38:	dc400d15 	stw	r17,52(sp)
    6f3c:	1442fa16 	blt	r2,r17,7b28 <___vfprintf_internal_r+0x14e8>
    6f40:	a8c00204 	addi	r3,r21,8
    6f44:	d8800517 	ldw	r2,20(sp)
    6f48:	d9014717 	ldw	r4,1308(sp)
    6f4c:	11015c0e 	bge	r2,r4,74c0 <___vfprintf_internal_r+0xe80>
    6f50:	dc400d17 	ldw	r17,52(sp)
    6f54:	d9814917 	ldw	r6,1316(sp)
    6f58:	00800044 	movi	r2,1
    6f5c:	94800044 	addi	r18,r18,1
    6f60:	8c400044 	addi	r17,r17,1
    6f64:	18800115 	stw	r2,4(r3)
    6f68:	008001c4 	movi	r2,7
    6f6c:	19800015 	stw	r6,0(r3)
    6f70:	dc800e15 	stw	r18,56(sp)
    6f74:	dc400d15 	stw	r17,52(sp)
    6f78:	14431016 	blt	r2,r17,7bbc <___vfprintf_internal_r+0x157c>
    6f7c:	18c00204 	addi	r3,r3,8
    6f80:	d8814717 	ldw	r2,1308(sp)
    6f84:	143fffc4 	addi	r16,r2,-1
    6f88:	043f2b0e 	bge	zero,r16,6c38 <___vfprintf_internal_r+0x5f8>
    6f8c:	00800404 	movi	r2,16
    6f90:	1402a20e 	bge	r2,r16,7a1c <___vfprintf_internal_r+0x13dc>
    6f94:	dc400d17 	ldw	r17,52(sp)
    6f98:	1027883a 	mov	r19,r2
    6f9c:	07000074 	movhi	fp,1
    6fa0:	e7007584 	addi	fp,fp,470
    6fa4:	050001c4 	movi	r20,7
    6fa8:	00000306 	br	6fb8 <___vfprintf_internal_r+0x978>
    6fac:	18c00204 	addi	r3,r3,8
    6fb0:	843ffc04 	addi	r16,r16,-16
    6fb4:	9c029c0e 	bge	r19,r16,7a28 <___vfprintf_internal_r+0x13e8>
    6fb8:	94800404 	addi	r18,r18,16
    6fbc:	8c400044 	addi	r17,r17,1
    6fc0:	1f000015 	stw	fp,0(r3)
    6fc4:	1cc00115 	stw	r19,4(r3)
    6fc8:	dc800e15 	stw	r18,56(sp)
    6fcc:	dc400d15 	stw	r17,52(sp)
    6fd0:	a47ff60e 	bge	r20,r17,6fac <___vfprintf_internal_r+0x96c>
    6fd4:	d9014f17 	ldw	r4,1340(sp)
    6fd8:	b00b883a 	mov	r5,r22
    6fdc:	d9800c04 	addi	r6,sp,48
    6fe0:	00065e80 	call	65e8 <__sprint_r>
    6fe4:	103f4e1e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    6fe8:	dc800e17 	ldw	r18,56(sp)
    6fec:	dc400d17 	ldw	r17,52(sp)
    6ff0:	d8c01904 	addi	r3,sp,100
    6ff4:	003fee06 	br	6fb0 <___vfprintf_internal_r+0x970>
    6ff8:	d8802c0b 	ldhu	r2,176(sp)
    6ffc:	00ffffc4 	movi	r3,-1
    7000:	d8c14b15 	stw	r3,1324(sp)
    7004:	1080100c 	andi	r2,r2,64
    7008:	103dcc1e 	bne	r2,zero,673c <___vfprintf_internal_r+0xfc>
    700c:	003dce06 	br	6748 <___vfprintf_internal_r+0x108>
    7010:	d9014f17 	ldw	r4,1340(sp)
    7014:	b00b883a 	mov	r5,r22
    7018:	d9800c04 	addi	r6,sp,48
    701c:	00065e80 	call	65e8 <__sprint_r>
    7020:	103f3f1e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    7024:	dc800e17 	ldw	r18,56(sp)
    7028:	003f2e06 	br	6ce4 <___vfprintf_internal_r+0x6a4>
    702c:	d9414c17 	ldw	r5,1328(sp)
    7030:	29400414 	ori	r5,r5,16
    7034:	d9414c15 	stw	r5,1328(sp)
    7038:	d9814c17 	ldw	r6,1328(sp)
    703c:	3080080c 	andi	r2,r6,32
    7040:	10014f1e 	bne	r2,zero,7580 <___vfprintf_internal_r+0xf40>
    7044:	d8c14c17 	ldw	r3,1328(sp)
    7048:	1880040c 	andi	r2,r3,16
    704c:	1002ea1e 	bne	r2,zero,7bf8 <___vfprintf_internal_r+0x15b8>
    7050:	d9014c17 	ldw	r4,1328(sp)
    7054:	2080100c 	andi	r2,r4,64
    7058:	1002e726 	beq	r2,zero,7bf8 <___vfprintf_internal_r+0x15b8>
    705c:	3880000f 	ldh	r2,0(r7)
    7060:	39c00104 	addi	r7,r7,4
    7064:	d9c14015 	stw	r7,1280(sp)
    7068:	1023d7fa 	srai	r17,r2,31
    706c:	1021883a 	mov	r16,r2
    7070:	88037216 	blt	r17,zero,7e3c <___vfprintf_internal_r+0x17fc>
    7074:	01000044 	movi	r4,1
    7078:	98000416 	blt	r19,zero,708c <___vfprintf_internal_r+0xa4c>
    707c:	d8c14c17 	ldw	r3,1328(sp)
    7080:	00bfdfc4 	movi	r2,-129
    7084:	1886703a 	and	r3,r3,r2
    7088:	d8c14c15 	stw	r3,1328(sp)
    708c:	8444b03a 	or	r2,r16,r17
    7090:	1002261e 	bne	r2,zero,792c <___vfprintf_internal_r+0x12ec>
    7094:	9802251e 	bne	r19,zero,792c <___vfprintf_internal_r+0x12ec>
    7098:	20803fcc 	andi	r2,r4,255
    709c:	10029b26 	beq	r2,zero,7b0c <___vfprintf_internal_r+0x14cc>
    70a0:	d8c01904 	addi	r3,sp,100
    70a4:	dd000f04 	addi	r20,sp,60
    70a8:	d8c14115 	stw	r3,1284(sp)
    70ac:	d8c14117 	ldw	r3,1284(sp)
    70b0:	dcc14515 	stw	r19,1300(sp)
    70b4:	a0c5c83a 	sub	r2,r20,r3
    70b8:	11c00a04 	addi	r7,r2,40
    70bc:	99c0010e 	bge	r19,r7,70c4 <___vfprintf_internal_r+0xa84>
    70c0:	d9c14515 	stw	r7,1300(sp)
    70c4:	dcc14615 	stw	r19,1304(sp)
    70c8:	d8800407 	ldb	r2,16(sp)
    70cc:	103e4c26 	beq	r2,zero,6a00 <___vfprintf_internal_r+0x3c0>
    70d0:	d8814517 	ldw	r2,1300(sp)
    70d4:	10800044 	addi	r2,r2,1
    70d8:	d8814515 	stw	r2,1300(sp)
    70dc:	003e4806 	br	6a00 <___vfprintf_internal_r+0x3c0>
    70e0:	d9814c17 	ldw	r6,1328(sp)
    70e4:	31800414 	ori	r6,r6,16
    70e8:	d9814c15 	stw	r6,1328(sp)
    70ec:	d8c14c17 	ldw	r3,1328(sp)
    70f0:	1880080c 	andi	r2,r3,32
    70f4:	1001271e 	bne	r2,zero,7594 <___vfprintf_internal_r+0xf54>
    70f8:	d9414c17 	ldw	r5,1328(sp)
    70fc:	2880040c 	andi	r2,r5,16
    7100:	1002b61e 	bne	r2,zero,7bdc <___vfprintf_internal_r+0x159c>
    7104:	d9814c17 	ldw	r6,1328(sp)
    7108:	3080100c 	andi	r2,r6,64
    710c:	1002b326 	beq	r2,zero,7bdc <___vfprintf_internal_r+0x159c>
    7110:	3c00000b 	ldhu	r16,0(r7)
    7114:	0009883a 	mov	r4,zero
    7118:	39c00104 	addi	r7,r7,4
    711c:	0023883a 	mov	r17,zero
    7120:	d9c14015 	stw	r7,1280(sp)
    7124:	d8000405 	stb	zero,16(sp)
    7128:	003fd306 	br	7078 <___vfprintf_internal_r+0xa38>
    712c:	d9014c17 	ldw	r4,1328(sp)
    7130:	21000414 	ori	r4,r4,16
    7134:	d9014c15 	stw	r4,1328(sp)
    7138:	d9414c17 	ldw	r5,1328(sp)
    713c:	2880080c 	andi	r2,r5,32
    7140:	1001081e 	bne	r2,zero,7564 <___vfprintf_internal_r+0xf24>
    7144:	d8c14c17 	ldw	r3,1328(sp)
    7148:	1880040c 	andi	r2,r3,16
    714c:	1002b01e 	bne	r2,zero,7c10 <___vfprintf_internal_r+0x15d0>
    7150:	d9014c17 	ldw	r4,1328(sp)
    7154:	2080100c 	andi	r2,r4,64
    7158:	1002ad26 	beq	r2,zero,7c10 <___vfprintf_internal_r+0x15d0>
    715c:	3c00000b 	ldhu	r16,0(r7)
    7160:	01000044 	movi	r4,1
    7164:	39c00104 	addi	r7,r7,4
    7168:	0023883a 	mov	r17,zero
    716c:	d9c14015 	stw	r7,1280(sp)
    7170:	d8000405 	stb	zero,16(sp)
    7174:	003fc006 	br	7078 <___vfprintf_internal_r+0xa38>
    7178:	d9014f17 	ldw	r4,1340(sp)
    717c:	b00b883a 	mov	r5,r22
    7180:	d9800c04 	addi	r6,sp,48
    7184:	00065e80 	call	65e8 <__sprint_r>
    7188:	103ee51e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    718c:	dc800e17 	ldw	r18,56(sp)
    7190:	d8c01904 	addi	r3,sp,100
    7194:	d9814c17 	ldw	r6,1328(sp)
    7198:	3080004c 	andi	r2,r6,1
    719c:	1005003a 	cmpeq	r2,r2,zero
    71a0:	103ea51e 	bne	r2,zero,6c38 <___vfprintf_internal_r+0x5f8>
    71a4:	00800044 	movi	r2,1
    71a8:	dc400d17 	ldw	r17,52(sp)
    71ac:	18800115 	stw	r2,4(r3)
    71b0:	d8814917 	ldw	r2,1316(sp)
    71b4:	94800044 	addi	r18,r18,1
    71b8:	8c400044 	addi	r17,r17,1
    71bc:	18800015 	stw	r2,0(r3)
    71c0:	008001c4 	movi	r2,7
    71c4:	dc800e15 	stw	r18,56(sp)
    71c8:	dc400d15 	stw	r17,52(sp)
    71cc:	14421e0e 	bge	r2,r17,7a48 <___vfprintf_internal_r+0x1408>
    71d0:	d9014f17 	ldw	r4,1340(sp)
    71d4:	b00b883a 	mov	r5,r22
    71d8:	d9800c04 	addi	r6,sp,48
    71dc:	00065e80 	call	65e8 <__sprint_r>
    71e0:	103ecf1e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    71e4:	dc800e17 	ldw	r18,56(sp)
    71e8:	d8c01904 	addi	r3,sp,100
    71ec:	003e9206 	br	6c38 <___vfprintf_internal_r+0x5f8>
    71f0:	d9014f17 	ldw	r4,1340(sp)
    71f4:	b00b883a 	mov	r5,r22
    71f8:	d9800c04 	addi	r6,sp,48
    71fc:	00065e80 	call	65e8 <__sprint_r>
    7200:	103ec026 	beq	r2,zero,6d04 <___vfprintf_internal_r+0x6c4>
    7204:	003ec606 	br	6d20 <___vfprintf_internal_r+0x6e0>
    7208:	d9014f17 	ldw	r4,1340(sp)
    720c:	b00b883a 	mov	r5,r22
    7210:	d9800c04 	addi	r6,sp,48
    7214:	d9c15115 	stw	r7,1348(sp)
    7218:	00065e80 	call	65e8 <__sprint_r>
    721c:	d9c15117 	ldw	r7,1348(sp)
    7220:	103ebf1e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    7224:	dc800e17 	ldw	r18,56(sp)
    7228:	dc400d17 	ldw	r17,52(sp)
    722c:	dd401904 	addi	r21,sp,100
    7230:	003e7406 	br	6c04 <___vfprintf_internal_r+0x5c4>
    7234:	d9014f17 	ldw	r4,1340(sp)
    7238:	b00b883a 	mov	r5,r22
    723c:	d9800c04 	addi	r6,sp,48
    7240:	d9c15115 	stw	r7,1348(sp)
    7244:	00065e80 	call	65e8 <__sprint_r>
    7248:	d9c15117 	ldw	r7,1348(sp)
    724c:	103eb41e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    7250:	dd401904 	addi	r21,sp,100
    7254:	003d6d06 	br	680c <___vfprintf_internal_r+0x1cc>
    7258:	d9014f17 	ldw	r4,1340(sp)
    725c:	b00b883a 	mov	r5,r22
    7260:	d9800c04 	addi	r6,sp,48
    7264:	d9c15115 	stw	r7,1348(sp)
    7268:	00065e80 	call	65e8 <__sprint_r>
    726c:	d9c15117 	ldw	r7,1348(sp)
    7270:	103eab1e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    7274:	dc800e17 	ldw	r18,56(sp)
    7278:	dc400d17 	ldw	r17,52(sp)
    727c:	dd401904 	addi	r21,sp,100
    7280:	003e3406 	br	6b54 <___vfprintf_internal_r+0x514>
    7284:	d9014f17 	ldw	r4,1340(sp)
    7288:	b00b883a 	mov	r5,r22
    728c:	d9800c04 	addi	r6,sp,48
    7290:	d9c15115 	stw	r7,1348(sp)
    7294:	00065e80 	call	65e8 <__sprint_r>
    7298:	d9c15117 	ldw	r7,1348(sp)
    729c:	103ea01e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    72a0:	dc800e17 	ldw	r18,56(sp)
    72a4:	dc400d17 	ldw	r17,52(sp)
    72a8:	dd401904 	addi	r21,sp,100
    72ac:	003e1c06 	br	6b20 <___vfprintf_internal_r+0x4e0>
    72b0:	d9014f17 	ldw	r4,1340(sp)
    72b4:	b00b883a 	mov	r5,r22
    72b8:	d9800c04 	addi	r6,sp,48
    72bc:	d9c15115 	stw	r7,1348(sp)
    72c0:	00065e80 	call	65e8 <__sprint_r>
    72c4:	d9c15117 	ldw	r7,1348(sp)
    72c8:	103e951e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    72cc:	dc800e17 	ldw	r18,56(sp)
    72d0:	dc400d17 	ldw	r17,52(sp)
    72d4:	dd401904 	addi	r21,sp,100
    72d8:	003e0406 	br	6aec <___vfprintf_internal_r+0x4ac>
    72dc:	d9000517 	ldw	r4,20(sp)
    72e0:	0102520e 	bge	zero,r4,7c2c <___vfprintf_internal_r+0x15ec>
    72e4:	d9814717 	ldw	r6,1308(sp)
    72e8:	21807a16 	blt	r4,r6,74d4 <___vfprintf_internal_r+0xe94>
    72ec:	d8814117 	ldw	r2,1284(sp)
    72f0:	91a5883a 	add	r18,r18,r6
    72f4:	8c400044 	addi	r17,r17,1
    72f8:	a8800015 	stw	r2,0(r21)
    72fc:	008001c4 	movi	r2,7
    7300:	a9800115 	stw	r6,4(r21)
    7304:	dc800e15 	stw	r18,56(sp)
    7308:	dc400d15 	stw	r17,52(sp)
    730c:	1442f616 	blt	r2,r17,7ee8 <___vfprintf_internal_r+0x18a8>
    7310:	a8c00204 	addi	r3,r21,8
    7314:	d9414717 	ldw	r5,1308(sp)
    7318:	2161c83a 	sub	r16,r4,r5
    731c:	043f9d0e 	bge	zero,r16,7194 <___vfprintf_internal_r+0xb54>
    7320:	00800404 	movi	r2,16
    7324:	1402130e 	bge	r2,r16,7b74 <___vfprintf_internal_r+0x1534>
    7328:	dc400d17 	ldw	r17,52(sp)
    732c:	1027883a 	mov	r19,r2
    7330:	07000074 	movhi	fp,1
    7334:	e7007584 	addi	fp,fp,470
    7338:	050001c4 	movi	r20,7
    733c:	00000306 	br	734c <___vfprintf_internal_r+0xd0c>
    7340:	18c00204 	addi	r3,r3,8
    7344:	843ffc04 	addi	r16,r16,-16
    7348:	9c020d0e 	bge	r19,r16,7b80 <___vfprintf_internal_r+0x1540>
    734c:	94800404 	addi	r18,r18,16
    7350:	8c400044 	addi	r17,r17,1
    7354:	1f000015 	stw	fp,0(r3)
    7358:	1cc00115 	stw	r19,4(r3)
    735c:	dc800e15 	stw	r18,56(sp)
    7360:	dc400d15 	stw	r17,52(sp)
    7364:	a47ff60e 	bge	r20,r17,7340 <___vfprintf_internal_r+0xd00>
    7368:	d9014f17 	ldw	r4,1340(sp)
    736c:	b00b883a 	mov	r5,r22
    7370:	d9800c04 	addi	r6,sp,48
    7374:	00065e80 	call	65e8 <__sprint_r>
    7378:	103e691e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    737c:	dc800e17 	ldw	r18,56(sp)
    7380:	dc400d17 	ldw	r17,52(sp)
    7384:	d8c01904 	addi	r3,sp,100
    7388:	003fee06 	br	7344 <___vfprintf_internal_r+0xd04>
    738c:	d8814717 	ldw	r2,1308(sp)
    7390:	143fffc4 	addi	r16,r2,-1
    7394:	043e970e 	bge	zero,r16,6df4 <___vfprintf_internal_r+0x7b4>
    7398:	00800404 	movi	r2,16
    739c:	1400180e 	bge	r2,r16,7400 <___vfprintf_internal_r+0xdc0>
    73a0:	1029883a 	mov	r20,r2
    73a4:	07000074 	movhi	fp,1
    73a8:	e7007584 	addi	fp,fp,470
    73ac:	054001c4 	movi	r21,7
    73b0:	00000306 	br	73c0 <___vfprintf_internal_r+0xd80>
    73b4:	9cc00204 	addi	r19,r19,8
    73b8:	843ffc04 	addi	r16,r16,-16
    73bc:	a400120e 	bge	r20,r16,7408 <___vfprintf_internal_r+0xdc8>
    73c0:	94800404 	addi	r18,r18,16
    73c4:	8c400044 	addi	r17,r17,1
    73c8:	9f000015 	stw	fp,0(r19)
    73cc:	9d000115 	stw	r20,4(r19)
    73d0:	dc800e15 	stw	r18,56(sp)
    73d4:	dc400d15 	stw	r17,52(sp)
    73d8:	ac7ff60e 	bge	r21,r17,73b4 <___vfprintf_internal_r+0xd74>
    73dc:	d9014f17 	ldw	r4,1340(sp)
    73e0:	b00b883a 	mov	r5,r22
    73e4:	d9800c04 	addi	r6,sp,48
    73e8:	00065e80 	call	65e8 <__sprint_r>
    73ec:	103e4c1e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    73f0:	dc800e17 	ldw	r18,56(sp)
    73f4:	dc400d17 	ldw	r17,52(sp)
    73f8:	dcc01904 	addi	r19,sp,100
    73fc:	003fee06 	br	73b8 <___vfprintf_internal_r+0xd78>
    7400:	07000074 	movhi	fp,1
    7404:	e7007584 	addi	fp,fp,470
    7408:	9425883a 	add	r18,r18,r16
    740c:	8c400044 	addi	r17,r17,1
    7410:	008001c4 	movi	r2,7
    7414:	9f000015 	stw	fp,0(r19)
    7418:	9c000115 	stw	r16,4(r19)
    741c:	dc800e15 	stw	r18,56(sp)
    7420:	dc400d15 	stw	r17,52(sp)
    7424:	147e720e 	bge	r2,r17,6df0 <___vfprintf_internal_r+0x7b0>
    7428:	d9014f17 	ldw	r4,1340(sp)
    742c:	b00b883a 	mov	r5,r22
    7430:	d9800c04 	addi	r6,sp,48
    7434:	00065e80 	call	65e8 <__sprint_r>
    7438:	103e391e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    743c:	dc800e17 	ldw	r18,56(sp)
    7440:	dc400d17 	ldw	r17,52(sp)
    7444:	dcc01904 	addi	r19,sp,100
    7448:	003e6a06 	br	6df4 <___vfprintf_internal_r+0x7b4>
    744c:	d9014f17 	ldw	r4,1340(sp)
    7450:	b00b883a 	mov	r5,r22
    7454:	d9800c04 	addi	r6,sp,48
    7458:	d9c15115 	stw	r7,1348(sp)
    745c:	00065e80 	call	65e8 <__sprint_r>
    7460:	d9c15117 	ldw	r7,1348(sp)
    7464:	103e2e1e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    7468:	dc800e17 	ldw	r18,56(sp)
    746c:	dc400d17 	ldw	r17,52(sp)
    7470:	dd401904 	addi	r21,sp,100
    7474:	003dba06 	br	6b60 <___vfprintf_internal_r+0x520>
    7478:	d9014f17 	ldw	r4,1340(sp)
    747c:	b00b883a 	mov	r5,r22
    7480:	d9800c04 	addi	r6,sp,48
    7484:	00065e80 	call	65e8 <__sprint_r>
    7488:	103e251e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    748c:	dc800e17 	ldw	r18,56(sp)
    7490:	dc400d17 	ldw	r17,52(sp)
    7494:	dcc01904 	addi	r19,sp,100
    7498:	003e4206 	br	6da4 <___vfprintf_internal_r+0x764>
    749c:	d9014f17 	ldw	r4,1340(sp)
    74a0:	b00b883a 	mov	r5,r22
    74a4:	d9800c04 	addi	r6,sp,48
    74a8:	00065e80 	call	65e8 <__sprint_r>
    74ac:	103e1c1e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    74b0:	dc800e17 	ldw	r18,56(sp)
    74b4:	dc400d17 	ldw	r17,52(sp)
    74b8:	d8c01904 	addi	r3,sp,100
    74bc:	003e2e06 	br	6d78 <___vfprintf_internal_r+0x738>
    74c0:	d9414c17 	ldw	r5,1328(sp)
    74c4:	2880004c 	andi	r2,r5,1
    74c8:	1005003a 	cmpeq	r2,r2,zero
    74cc:	103dda1e 	bne	r2,zero,6c38 <___vfprintf_internal_r+0x5f8>
    74d0:	003e9f06 	br	6f50 <___vfprintf_internal_r+0x910>
    74d4:	d8c14117 	ldw	r3,1284(sp)
    74d8:	9125883a 	add	r18,r18,r4
    74dc:	8c400044 	addi	r17,r17,1
    74e0:	008001c4 	movi	r2,7
    74e4:	a8c00015 	stw	r3,0(r21)
    74e8:	a9000115 	stw	r4,4(r21)
    74ec:	dc800e15 	stw	r18,56(sp)
    74f0:	dc400d15 	stw	r17,52(sp)
    74f4:	14426616 	blt	r2,r17,7e90 <___vfprintf_internal_r+0x1850>
    74f8:	a8c00204 	addi	r3,r21,8
    74fc:	d9414917 	ldw	r5,1316(sp)
    7500:	00800044 	movi	r2,1
    7504:	94800044 	addi	r18,r18,1
    7508:	8c400044 	addi	r17,r17,1
    750c:	18800115 	stw	r2,4(r3)
    7510:	008001c4 	movi	r2,7
    7514:	19400015 	stw	r5,0(r3)
    7518:	dc800e15 	stw	r18,56(sp)
    751c:	dc400d15 	stw	r17,52(sp)
    7520:	2021883a 	mov	r16,r4
    7524:	14425016 	blt	r2,r17,7e68 <___vfprintf_internal_r+0x1828>
    7528:	19400204 	addi	r5,r3,8
    752c:	d9814717 	ldw	r6,1308(sp)
    7530:	8c400044 	addi	r17,r17,1
    7534:	dc400d15 	stw	r17,52(sp)
    7538:	3107c83a 	sub	r3,r6,r4
    753c:	d9014117 	ldw	r4,1284(sp)
    7540:	90e5883a 	add	r18,r18,r3
    7544:	28c00115 	stw	r3,4(r5)
    7548:	8105883a 	add	r2,r16,r4
    754c:	28800015 	stw	r2,0(r5)
    7550:	008001c4 	movi	r2,7
    7554:	dc800e15 	stw	r18,56(sp)
    7558:	147f1d16 	blt	r2,r17,71d0 <___vfprintf_internal_r+0xb90>
    755c:	28c00204 	addi	r3,r5,8
    7560:	003db506 	br	6c38 <___vfprintf_internal_r+0x5f8>
    7564:	3c000017 	ldw	r16,0(r7)
    7568:	3c400117 	ldw	r17,4(r7)
    756c:	39800204 	addi	r6,r7,8
    7570:	01000044 	movi	r4,1
    7574:	d9814015 	stw	r6,1280(sp)
    7578:	d8000405 	stb	zero,16(sp)
    757c:	003ebe06 	br	7078 <___vfprintf_internal_r+0xa38>
    7580:	3c000017 	ldw	r16,0(r7)
    7584:	3c400117 	ldw	r17,4(r7)
    7588:	38800204 	addi	r2,r7,8
    758c:	d8814015 	stw	r2,1280(sp)
    7590:	003eb706 	br	7070 <___vfprintf_internal_r+0xa30>
    7594:	3c000017 	ldw	r16,0(r7)
    7598:	3c400117 	ldw	r17,4(r7)
    759c:	39000204 	addi	r4,r7,8
    75a0:	d9014015 	stw	r4,1280(sp)
    75a4:	0009883a 	mov	r4,zero
    75a8:	d8000405 	stb	zero,16(sp)
    75ac:	003eb206 	br	7078 <___vfprintf_internal_r+0xa38>
    75b0:	38c00017 	ldw	r3,0(r7)
    75b4:	39c00104 	addi	r7,r7,4
    75b8:	d8c14a15 	stw	r3,1320(sp)
    75bc:	1800d10e 	bge	r3,zero,7904 <___vfprintf_internal_r+0x12c4>
    75c0:	00c7c83a 	sub	r3,zero,r3
    75c4:	d8c14a15 	stw	r3,1320(sp)
    75c8:	d9014c17 	ldw	r4,1328(sp)
    75cc:	b8c00007 	ldb	r3,0(r23)
    75d0:	21000114 	ori	r4,r4,4
    75d4:	d9014c15 	stw	r4,1328(sp)
    75d8:	003c9806 	br	683c <___vfprintf_internal_r+0x1fc>
    75dc:	d9814c17 	ldw	r6,1328(sp)
    75e0:	3080080c 	andi	r2,r6,32
    75e4:	1001f026 	beq	r2,zero,7da8 <___vfprintf_internal_r+0x1768>
    75e8:	d9014b17 	ldw	r4,1324(sp)
    75ec:	38800017 	ldw	r2,0(r7)
    75f0:	39c00104 	addi	r7,r7,4
    75f4:	d9c14015 	stw	r7,1280(sp)
    75f8:	2007d7fa 	srai	r3,r4,31
    75fc:	d9c14017 	ldw	r7,1280(sp)
    7600:	11000015 	stw	r4,0(r2)
    7604:	10c00115 	stw	r3,4(r2)
    7608:	003c6906 	br	67b0 <___vfprintf_internal_r+0x170>
    760c:	b8c00007 	ldb	r3,0(r23)
    7610:	00801b04 	movi	r2,108
    7614:	18824f26 	beq	r3,r2,7f54 <___vfprintf_internal_r+0x1914>
    7618:	d9414c17 	ldw	r5,1328(sp)
    761c:	29400414 	ori	r5,r5,16
    7620:	d9414c15 	stw	r5,1328(sp)
    7624:	003c8506 	br	683c <___vfprintf_internal_r+0x1fc>
    7628:	d9814c17 	ldw	r6,1328(sp)
    762c:	b8c00007 	ldb	r3,0(r23)
    7630:	31800814 	ori	r6,r6,32
    7634:	d9814c15 	stw	r6,1328(sp)
    7638:	003c8006 	br	683c <___vfprintf_internal_r+0x1fc>
    763c:	d8814c17 	ldw	r2,1328(sp)
    7640:	3c000017 	ldw	r16,0(r7)
    7644:	00c01e04 	movi	r3,120
    7648:	10800094 	ori	r2,r2,2
    764c:	d8814c15 	stw	r2,1328(sp)
    7650:	39c00104 	addi	r7,r7,4
    7654:	01400074 	movhi	r5,1
    7658:	29405e04 	addi	r5,r5,376
    765c:	00800c04 	movi	r2,48
    7660:	0023883a 	mov	r17,zero
    7664:	01000084 	movi	r4,2
    7668:	d9c14015 	stw	r7,1280(sp)
    766c:	d8c14d15 	stw	r3,1332(sp)
    7670:	d9414415 	stw	r5,1296(sp)
    7674:	d8800445 	stb	r2,17(sp)
    7678:	d8c00485 	stb	r3,18(sp)
    767c:	d8000405 	stb	zero,16(sp)
    7680:	003e7d06 	br	7078 <___vfprintf_internal_r+0xa38>
    7684:	d8814c17 	ldw	r2,1328(sp)
    7688:	b8c00007 	ldb	r3,0(r23)
    768c:	10801014 	ori	r2,r2,64
    7690:	d8814c15 	stw	r2,1328(sp)
    7694:	003c6906 	br	683c <___vfprintf_internal_r+0x1fc>
    7698:	d9414c17 	ldw	r5,1328(sp)
    769c:	2880020c 	andi	r2,r5,8
    76a0:	1001df26 	beq	r2,zero,7e20 <___vfprintf_internal_r+0x17e0>
    76a4:	39800017 	ldw	r6,0(r7)
    76a8:	38800204 	addi	r2,r7,8
    76ac:	d8814015 	stw	r2,1280(sp)
    76b0:	d9814215 	stw	r6,1288(sp)
    76b4:	39c00117 	ldw	r7,4(r7)
    76b8:	d9c14315 	stw	r7,1292(sp)
    76bc:	d9014217 	ldw	r4,1288(sp)
    76c0:	d9414317 	ldw	r5,1292(sp)
    76c4:	000bfcc0 	call	bfcc <__isinfd>
    76c8:	10021726 	beq	r2,zero,7f28 <___vfprintf_internal_r+0x18e8>
    76cc:	d9014217 	ldw	r4,1288(sp)
    76d0:	d9414317 	ldw	r5,1292(sp)
    76d4:	000d883a 	mov	r6,zero
    76d8:	000f883a 	mov	r7,zero
    76dc:	00034b00 	call	34b0 <__ltdf2>
    76e0:	1002ca16 	blt	r2,zero,820c <___vfprintf_internal_r+0x1bcc>
    76e4:	d9414d17 	ldw	r5,1332(sp)
    76e8:	008011c4 	movi	r2,71
    76ec:	11420a16 	blt	r2,r5,7f18 <___vfprintf_internal_r+0x18d8>
    76f0:	01800074 	movhi	r6,1
    76f4:	31806304 	addi	r6,r6,396
    76f8:	d9814115 	stw	r6,1284(sp)
    76fc:	d9014c17 	ldw	r4,1328(sp)
    7700:	00c000c4 	movi	r3,3
    7704:	00bfdfc4 	movi	r2,-129
    7708:	2088703a 	and	r4,r4,r2
    770c:	180f883a 	mov	r7,r3
    7710:	d8c14515 	stw	r3,1300(sp)
    7714:	d9014c15 	stw	r4,1328(sp)
    7718:	d8014615 	stw	zero,1304(sp)
    771c:	003e6a06 	br	70c8 <___vfprintf_internal_r+0xa88>
    7720:	38800017 	ldw	r2,0(r7)
    7724:	00c00044 	movi	r3,1
    7728:	39c00104 	addi	r7,r7,4
    772c:	d9c14015 	stw	r7,1280(sp)
    7730:	d9000f04 	addi	r4,sp,60
    7734:	180f883a 	mov	r7,r3
    7738:	d8c14515 	stw	r3,1300(sp)
    773c:	d9014115 	stw	r4,1284(sp)
    7740:	d8800f05 	stb	r2,60(sp)
    7744:	d8000405 	stb	zero,16(sp)
    7748:	003cac06 	br	69fc <___vfprintf_internal_r+0x3bc>
    774c:	01400074 	movhi	r5,1
    7750:	29406904 	addi	r5,r5,420
    7754:	d9414415 	stw	r5,1296(sp)
    7758:	d9814c17 	ldw	r6,1328(sp)
    775c:	3080080c 	andi	r2,r6,32
    7760:	1000f926 	beq	r2,zero,7b48 <___vfprintf_internal_r+0x1508>
    7764:	3c000017 	ldw	r16,0(r7)
    7768:	3c400117 	ldw	r17,4(r7)
    776c:	38800204 	addi	r2,r7,8
    7770:	d8814015 	stw	r2,1280(sp)
    7774:	d9414c17 	ldw	r5,1328(sp)
    7778:	2880004c 	andi	r2,r5,1
    777c:	1005003a 	cmpeq	r2,r2,zero
    7780:	1000b31e 	bne	r2,zero,7a50 <___vfprintf_internal_r+0x1410>
    7784:	8444b03a 	or	r2,r16,r17
    7788:	1000b126 	beq	r2,zero,7a50 <___vfprintf_internal_r+0x1410>
    778c:	d9814d17 	ldw	r6,1332(sp)
    7790:	29400094 	ori	r5,r5,2
    7794:	00800c04 	movi	r2,48
    7798:	01000084 	movi	r4,2
    779c:	d9414c15 	stw	r5,1328(sp)
    77a0:	d8800445 	stb	r2,17(sp)
    77a4:	d9800485 	stb	r6,18(sp)
    77a8:	d8000405 	stb	zero,16(sp)
    77ac:	003e3206 	br	7078 <___vfprintf_internal_r+0xa38>
    77b0:	01800074 	movhi	r6,1
    77b4:	31805e04 	addi	r6,r6,376
    77b8:	d9814415 	stw	r6,1296(sp)
    77bc:	003fe606 	br	7758 <___vfprintf_internal_r+0x1118>
    77c0:	00800ac4 	movi	r2,43
    77c4:	d8800405 	stb	r2,16(sp)
    77c8:	b8c00007 	ldb	r3,0(r23)
    77cc:	003c1b06 	br	683c <___vfprintf_internal_r+0x1fc>
    77d0:	d8814c17 	ldw	r2,1328(sp)
    77d4:	b8c00007 	ldb	r3,0(r23)
    77d8:	10800054 	ori	r2,r2,1
    77dc:	d8814c15 	stw	r2,1328(sp)
    77e0:	003c1606 	br	683c <___vfprintf_internal_r+0x1fc>
    77e4:	d8800407 	ldb	r2,16(sp)
    77e8:	1000461e 	bne	r2,zero,7904 <___vfprintf_internal_r+0x12c4>
    77ec:	00800804 	movi	r2,32
    77f0:	d8800405 	stb	r2,16(sp)
    77f4:	b8c00007 	ldb	r3,0(r23)
    77f8:	003c1006 	br	683c <___vfprintf_internal_r+0x1fc>
    77fc:	d9814c17 	ldw	r6,1328(sp)
    7800:	b8c00007 	ldb	r3,0(r23)
    7804:	31800214 	ori	r6,r6,8
    7808:	d9814c15 	stw	r6,1328(sp)
    780c:	003c0b06 	br	683c <___vfprintf_internal_r+0x1fc>
    7810:	0007883a 	mov	r3,zero
    7814:	01000244 	movi	r4,9
    7818:	188002a4 	muli	r2,r3,10
    781c:	b8c00007 	ldb	r3,0(r23)
    7820:	d9814d17 	ldw	r6,1332(sp)
    7824:	bdc00044 	addi	r23,r23,1
    7828:	d8c14d15 	stw	r3,1332(sp)
    782c:	d9414d17 	ldw	r5,1332(sp)
    7830:	3085883a 	add	r2,r6,r2
    7834:	10fff404 	addi	r3,r2,-48
    7838:	28bff404 	addi	r2,r5,-48
    783c:	20bff62e 	bgeu	r4,r2,7818 <___vfprintf_internal_r+0x11d8>
    7840:	d8c14a15 	stw	r3,1320(sp)
    7844:	003bff06 	br	6844 <___vfprintf_internal_r+0x204>
    7848:	d9414c17 	ldw	r5,1328(sp)
    784c:	b8c00007 	ldb	r3,0(r23)
    7850:	29402014 	ori	r5,r5,128
    7854:	d9414c15 	stw	r5,1328(sp)
    7858:	003bf806 	br	683c <___vfprintf_internal_r+0x1fc>
    785c:	b8c00007 	ldb	r3,0(r23)
    7860:	00800a84 	movi	r2,42
    7864:	bdc00044 	addi	r23,r23,1
    7868:	18831526 	beq	r3,r2,84c0 <___vfprintf_internal_r+0x1e80>
    786c:	d8c14d15 	stw	r3,1332(sp)
    7870:	18bff404 	addi	r2,r3,-48
    7874:	00c00244 	movi	r3,9
    7878:	18827836 	bltu	r3,r2,825c <___vfprintf_internal_r+0x1c1c>
    787c:	000d883a 	mov	r6,zero
    7880:	308002a4 	muli	r2,r6,10
    7884:	b9800007 	ldb	r6,0(r23)
    7888:	d9414d17 	ldw	r5,1332(sp)
    788c:	bdc00044 	addi	r23,r23,1
    7890:	d9814d15 	stw	r6,1332(sp)
    7894:	d9014d17 	ldw	r4,1332(sp)
    7898:	1145883a 	add	r2,r2,r5
    789c:	11bff404 	addi	r6,r2,-48
    78a0:	20bff404 	addi	r2,r4,-48
    78a4:	18bff62e 	bgeu	r3,r2,7880 <___vfprintf_internal_r+0x1240>
    78a8:	3027883a 	mov	r19,r6
    78ac:	303be50e 	bge	r6,zero,6844 <___vfprintf_internal_r+0x204>
    78b0:	04ffffc4 	movi	r19,-1
    78b4:	003be306 	br	6844 <___vfprintf_internal_r+0x204>
    78b8:	d8000405 	stb	zero,16(sp)
    78bc:	39800017 	ldw	r6,0(r7)
    78c0:	39c00104 	addi	r7,r7,4
    78c4:	d9c14015 	stw	r7,1280(sp)
    78c8:	d9814115 	stw	r6,1284(sp)
    78cc:	3001c926 	beq	r6,zero,7ff4 <___vfprintf_internal_r+0x19b4>
    78d0:	98000e16 	blt	r19,zero,790c <___vfprintf_internal_r+0x12cc>
    78d4:	d9014117 	ldw	r4,1284(sp)
    78d8:	000b883a 	mov	r5,zero
    78dc:	980d883a 	mov	r6,r19
    78e0:	000a7a80 	call	a7a8 <memchr>
    78e4:	10025926 	beq	r2,zero,824c <___vfprintf_internal_r+0x1c0c>
    78e8:	d8c14117 	ldw	r3,1284(sp)
    78ec:	10cfc83a 	sub	r7,r2,r3
    78f0:	99c19e16 	blt	r19,r7,7f6c <___vfprintf_internal_r+0x192c>
    78f4:	d9c14515 	stw	r7,1300(sp)
    78f8:	38000916 	blt	r7,zero,7920 <___vfprintf_internal_r+0x12e0>
    78fc:	d8014615 	stw	zero,1304(sp)
    7900:	003df106 	br	70c8 <___vfprintf_internal_r+0xa88>
    7904:	b8c00007 	ldb	r3,0(r23)
    7908:	003bcc06 	br	683c <___vfprintf_internal_r+0x1fc>
    790c:	d9014117 	ldw	r4,1284(sp)
    7910:	00065180 	call	6518 <strlen>
    7914:	d8814515 	stw	r2,1300(sp)
    7918:	100f883a 	mov	r7,r2
    791c:	103ff70e 	bge	r2,zero,78fc <___vfprintf_internal_r+0x12bc>
    7920:	d8014515 	stw	zero,1300(sp)
    7924:	d8014615 	stw	zero,1304(sp)
    7928:	003de706 	br	70c8 <___vfprintf_internal_r+0xa88>
    792c:	20c03fcc 	andi	r3,r4,255
    7930:	00800044 	movi	r2,1
    7934:	18802d26 	beq	r3,r2,79ec <___vfprintf_internal_r+0x13ac>
    7938:	18800e36 	bltu	r3,r2,7974 <___vfprintf_internal_r+0x1334>
    793c:	00800084 	movi	r2,2
    7940:	1880fa26 	beq	r3,r2,7d2c <___vfprintf_internal_r+0x16ec>
    7944:	01000074 	movhi	r4,1
    7948:	21006e04 	addi	r4,r4,440
    794c:	00065180 	call	6518 <strlen>
    7950:	100f883a 	mov	r7,r2
    7954:	dcc14515 	stw	r19,1300(sp)
    7958:	9880010e 	bge	r19,r2,7960 <___vfprintf_internal_r+0x1320>
    795c:	d8814515 	stw	r2,1300(sp)
    7960:	00800074 	movhi	r2,1
    7964:	10806e04 	addi	r2,r2,440
    7968:	dcc14615 	stw	r19,1304(sp)
    796c:	d8814115 	stw	r2,1284(sp)
    7970:	003dd506 	br	70c8 <___vfprintf_internal_r+0xa88>
    7974:	d9401904 	addi	r5,sp,100
    7978:	dd000f04 	addi	r20,sp,60
    797c:	d9414115 	stw	r5,1284(sp)
    7980:	880a977a 	slli	r5,r17,29
    7984:	d9814117 	ldw	r6,1284(sp)
    7988:	8004d0fa 	srli	r2,r16,3
    798c:	8806d0fa 	srli	r3,r17,3
    7990:	810001cc 	andi	r4,r16,7
    7994:	2884b03a 	or	r2,r5,r2
    7998:	31bfffc4 	addi	r6,r6,-1
    799c:	21000c04 	addi	r4,r4,48
    79a0:	d9814115 	stw	r6,1284(sp)
    79a4:	10cab03a 	or	r5,r2,r3
    79a8:	31000005 	stb	r4,0(r6)
    79ac:	1021883a 	mov	r16,r2
    79b0:	1823883a 	mov	r17,r3
    79b4:	283ff21e 	bne	r5,zero,7980 <___vfprintf_internal_r+0x1340>
    79b8:	d8c14c17 	ldw	r3,1328(sp)
    79bc:	1880004c 	andi	r2,r3,1
    79c0:	1005003a 	cmpeq	r2,r2,zero
    79c4:	103db91e 	bne	r2,zero,70ac <___vfprintf_internal_r+0xa6c>
    79c8:	20803fcc 	andi	r2,r4,255
    79cc:	1080201c 	xori	r2,r2,128
    79d0:	10bfe004 	addi	r2,r2,-128
    79d4:	00c00c04 	movi	r3,48
    79d8:	10fdb426 	beq	r2,r3,70ac <___vfprintf_internal_r+0xa6c>
    79dc:	31bfffc4 	addi	r6,r6,-1
    79e0:	d9814115 	stw	r6,1284(sp)
    79e4:	30c00005 	stb	r3,0(r6)
    79e8:	003db006 	br	70ac <___vfprintf_internal_r+0xa6c>
    79ec:	88800068 	cmpgeui	r2,r17,1
    79f0:	10002c1e 	bne	r2,zero,7aa4 <___vfprintf_internal_r+0x1464>
    79f4:	8800021e 	bne	r17,zero,7a00 <___vfprintf_internal_r+0x13c0>
    79f8:	00800244 	movi	r2,9
    79fc:	14002936 	bltu	r2,r16,7aa4 <___vfprintf_internal_r+0x1464>
    7a00:	d90018c4 	addi	r4,sp,99
    7a04:	dd000f04 	addi	r20,sp,60
    7a08:	d9014115 	stw	r4,1284(sp)
    7a0c:	d9014117 	ldw	r4,1284(sp)
    7a10:	80800c04 	addi	r2,r16,48
    7a14:	20800005 	stb	r2,0(r4)
    7a18:	003da406 	br	70ac <___vfprintf_internal_r+0xa6c>
    7a1c:	dc400d17 	ldw	r17,52(sp)
    7a20:	07000074 	movhi	fp,1
    7a24:	e7007584 	addi	fp,fp,470
    7a28:	9425883a 	add	r18,r18,r16
    7a2c:	8c400044 	addi	r17,r17,1
    7a30:	008001c4 	movi	r2,7
    7a34:	1f000015 	stw	fp,0(r3)
    7a38:	1c000115 	stw	r16,4(r3)
    7a3c:	dc800e15 	stw	r18,56(sp)
    7a40:	dc400d15 	stw	r17,52(sp)
    7a44:	147de216 	blt	r2,r17,71d0 <___vfprintf_internal_r+0xb90>
    7a48:	18c00204 	addi	r3,r3,8
    7a4c:	003c7a06 	br	6c38 <___vfprintf_internal_r+0x5f8>
    7a50:	01000084 	movi	r4,2
    7a54:	d8000405 	stb	zero,16(sp)
    7a58:	003d8706 	br	7078 <___vfprintf_internal_r+0xa38>
    7a5c:	d9814c17 	ldw	r6,1328(sp)
    7a60:	30c4703a 	and	r2,r6,r3
    7a64:	1005003a 	cmpeq	r2,r2,zero
    7a68:	103cb926 	beq	r2,zero,6d50 <___vfprintf_internal_r+0x710>
    7a6c:	d9014117 	ldw	r4,1284(sp)
    7a70:	94800044 	addi	r18,r18,1
    7a74:	8c400044 	addi	r17,r17,1
    7a78:	008001c4 	movi	r2,7
    7a7c:	a9000015 	stw	r4,0(r21)
    7a80:	a8c00115 	stw	r3,4(r21)
    7a84:	dc800e15 	stw	r18,56(sp)
    7a88:	dc400d15 	stw	r17,52(sp)
    7a8c:	147e6616 	blt	r2,r17,7428 <___vfprintf_internal_r+0xde8>
    7a90:	acc00204 	addi	r19,r21,8
    7a94:	003cd706 	br	6df4 <___vfprintf_internal_r+0x7b4>
    7a98:	07000074 	movhi	fp,1
    7a9c:	e7007584 	addi	fp,fp,470
    7aa0:	003c4f06 	br	6be0 <___vfprintf_internal_r+0x5a0>
    7aa4:	dd000f04 	addi	r20,sp,60
    7aa8:	dc801904 	addi	r18,sp,100
    7aac:	8009883a 	mov	r4,r16
    7ab0:	880b883a 	mov	r5,r17
    7ab4:	01800284 	movi	r6,10
    7ab8:	000f883a 	mov	r7,zero
    7abc:	000c7580 	call	c758 <__umoddi3>
    7ac0:	12000c04 	addi	r8,r2,48
    7ac4:	94bfffc4 	addi	r18,r18,-1
    7ac8:	8009883a 	mov	r4,r16
    7acc:	880b883a 	mov	r5,r17
    7ad0:	01800284 	movi	r6,10
    7ad4:	000f883a 	mov	r7,zero
    7ad8:	92000005 	stb	r8,0(r18)
    7adc:	000c17c0 	call	c17c <__udivdi3>
    7ae0:	1009883a 	mov	r4,r2
    7ae4:	1021883a 	mov	r16,r2
    7ae8:	18800068 	cmpgeui	r2,r3,1
    7aec:	1823883a 	mov	r17,r3
    7af0:	103fee1e 	bne	r2,zero,7aac <___vfprintf_internal_r+0x146c>
    7af4:	1800021e 	bne	r3,zero,7b00 <___vfprintf_internal_r+0x14c0>
    7af8:	00800244 	movi	r2,9
    7afc:	113feb36 	bltu	r2,r4,7aac <___vfprintf_internal_r+0x146c>
    7b00:	94bfffc4 	addi	r18,r18,-1
    7b04:	dc814115 	stw	r18,1284(sp)
    7b08:	003fc006 	br	7a0c <___vfprintf_internal_r+0x13cc>
    7b0c:	d9014c17 	ldw	r4,1328(sp)
    7b10:	2080004c 	andi	r2,r4,1
    7b14:	10009a1e 	bne	r2,zero,7d80 <___vfprintf_internal_r+0x1740>
    7b18:	d9401904 	addi	r5,sp,100
    7b1c:	dd000f04 	addi	r20,sp,60
    7b20:	d9414115 	stw	r5,1284(sp)
    7b24:	003d6106 	br	70ac <___vfprintf_internal_r+0xa6c>
    7b28:	d9014f17 	ldw	r4,1340(sp)
    7b2c:	b00b883a 	mov	r5,r22
    7b30:	d9800c04 	addi	r6,sp,48
    7b34:	00065e80 	call	65e8 <__sprint_r>
    7b38:	103c791e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    7b3c:	dc800e17 	ldw	r18,56(sp)
    7b40:	d8c01904 	addi	r3,sp,100
    7b44:	003cff06 	br	6f44 <___vfprintf_internal_r+0x904>
    7b48:	d8c14c17 	ldw	r3,1328(sp)
    7b4c:	1880040c 	andi	r2,r3,16
    7b50:	1000711e 	bne	r2,zero,7d18 <___vfprintf_internal_r+0x16d8>
    7b54:	d9014c17 	ldw	r4,1328(sp)
    7b58:	2080100c 	andi	r2,r4,64
    7b5c:	10006e26 	beq	r2,zero,7d18 <___vfprintf_internal_r+0x16d8>
    7b60:	3c00000b 	ldhu	r16,0(r7)
    7b64:	0023883a 	mov	r17,zero
    7b68:	39c00104 	addi	r7,r7,4
    7b6c:	d9c14015 	stw	r7,1280(sp)
    7b70:	003f0006 	br	7774 <___vfprintf_internal_r+0x1134>
    7b74:	dc400d17 	ldw	r17,52(sp)
    7b78:	07000074 	movhi	fp,1
    7b7c:	e7007584 	addi	fp,fp,470
    7b80:	9425883a 	add	r18,r18,r16
    7b84:	8c400044 	addi	r17,r17,1
    7b88:	008001c4 	movi	r2,7
    7b8c:	1f000015 	stw	fp,0(r3)
    7b90:	1c000115 	stw	r16,4(r3)
    7b94:	dc800e15 	stw	r18,56(sp)
    7b98:	dc400d15 	stw	r17,52(sp)
    7b9c:	147d7616 	blt	r2,r17,7178 <___vfprintf_internal_r+0xb38>
    7ba0:	18c00204 	addi	r3,r3,8
    7ba4:	003d7b06 	br	7194 <___vfprintf_internal_r+0xb54>
    7ba8:	dc800e17 	ldw	r18,56(sp)
    7bac:	dc400d17 	ldw	r17,52(sp)
    7bb0:	07000074 	movhi	fp,1
    7bb4:	e7007984 	addi	fp,fp,486
    7bb8:	003bc006 	br	6abc <___vfprintf_internal_r+0x47c>
    7bbc:	d9014f17 	ldw	r4,1340(sp)
    7bc0:	b00b883a 	mov	r5,r22
    7bc4:	d9800c04 	addi	r6,sp,48
    7bc8:	00065e80 	call	65e8 <__sprint_r>
    7bcc:	103c541e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    7bd0:	dc800e17 	ldw	r18,56(sp)
    7bd4:	d8c01904 	addi	r3,sp,100
    7bd8:	003ce906 	br	6f80 <___vfprintf_internal_r+0x940>
    7bdc:	3c000017 	ldw	r16,0(r7)
    7be0:	0009883a 	mov	r4,zero
    7be4:	39c00104 	addi	r7,r7,4
    7be8:	0023883a 	mov	r17,zero
    7bec:	d9c14015 	stw	r7,1280(sp)
    7bf0:	d8000405 	stb	zero,16(sp)
    7bf4:	003d2006 	br	7078 <___vfprintf_internal_r+0xa38>
    7bf8:	38800017 	ldw	r2,0(r7)
    7bfc:	39c00104 	addi	r7,r7,4
    7c00:	d9c14015 	stw	r7,1280(sp)
    7c04:	1023d7fa 	srai	r17,r2,31
    7c08:	1021883a 	mov	r16,r2
    7c0c:	003d1806 	br	7070 <___vfprintf_internal_r+0xa30>
    7c10:	3c000017 	ldw	r16,0(r7)
    7c14:	01000044 	movi	r4,1
    7c18:	39c00104 	addi	r7,r7,4
    7c1c:	0023883a 	mov	r17,zero
    7c20:	d9c14015 	stw	r7,1280(sp)
    7c24:	d8000405 	stb	zero,16(sp)
    7c28:	003d1306 	br	7078 <___vfprintf_internal_r+0xa38>
    7c2c:	00800074 	movhi	r2,1
    7c30:	10807504 	addi	r2,r2,468
    7c34:	94800044 	addi	r18,r18,1
    7c38:	8c400044 	addi	r17,r17,1
    7c3c:	a8800015 	stw	r2,0(r21)
    7c40:	00c00044 	movi	r3,1
    7c44:	008001c4 	movi	r2,7
    7c48:	a8c00115 	stw	r3,4(r21)
    7c4c:	dc800e15 	stw	r18,56(sp)
    7c50:	dc400d15 	stw	r17,52(sp)
    7c54:	1440ca16 	blt	r2,r17,7f80 <___vfprintf_internal_r+0x1940>
    7c58:	a8c00204 	addi	r3,r21,8
    7c5c:	2000061e 	bne	r4,zero,7c78 <___vfprintf_internal_r+0x1638>
    7c60:	d9414717 	ldw	r5,1308(sp)
    7c64:	2800041e 	bne	r5,zero,7c78 <___vfprintf_internal_r+0x1638>
    7c68:	d9814c17 	ldw	r6,1328(sp)
    7c6c:	3080004c 	andi	r2,r6,1
    7c70:	1005003a 	cmpeq	r2,r2,zero
    7c74:	103bf01e 	bne	r2,zero,6c38 <___vfprintf_internal_r+0x5f8>
    7c78:	00800044 	movi	r2,1
    7c7c:	dc400d17 	ldw	r17,52(sp)
    7c80:	18800115 	stw	r2,4(r3)
    7c84:	d8814917 	ldw	r2,1316(sp)
    7c88:	94800044 	addi	r18,r18,1
    7c8c:	8c400044 	addi	r17,r17,1
    7c90:	18800015 	stw	r2,0(r3)
    7c94:	008001c4 	movi	r2,7
    7c98:	dc800e15 	stw	r18,56(sp)
    7c9c:	dc400d15 	stw	r17,52(sp)
    7ca0:	1440ca16 	blt	r2,r17,7fcc <___vfprintf_internal_r+0x198c>
    7ca4:	18c00204 	addi	r3,r3,8
    7ca8:	0121c83a 	sub	r16,zero,r4
    7cac:	0400500e 	bge	zero,r16,7df0 <___vfprintf_internal_r+0x17b0>
    7cb0:	00800404 	movi	r2,16
    7cb4:	1400800e 	bge	r2,r16,7eb8 <___vfprintf_internal_r+0x1878>
    7cb8:	1027883a 	mov	r19,r2
    7cbc:	07000074 	movhi	fp,1
    7cc0:	e7007584 	addi	fp,fp,470
    7cc4:	050001c4 	movi	r20,7
    7cc8:	00000306 	br	7cd8 <___vfprintf_internal_r+0x1698>
    7ccc:	18c00204 	addi	r3,r3,8
    7cd0:	843ffc04 	addi	r16,r16,-16
    7cd4:	9c007a0e 	bge	r19,r16,7ec0 <___vfprintf_internal_r+0x1880>
    7cd8:	94800404 	addi	r18,r18,16
    7cdc:	8c400044 	addi	r17,r17,1
    7ce0:	1f000015 	stw	fp,0(r3)
    7ce4:	1cc00115 	stw	r19,4(r3)
    7ce8:	dc800e15 	stw	r18,56(sp)
    7cec:	dc400d15 	stw	r17,52(sp)
    7cf0:	a47ff60e 	bge	r20,r17,7ccc <___vfprintf_internal_r+0x168c>
    7cf4:	d9014f17 	ldw	r4,1340(sp)
    7cf8:	b00b883a 	mov	r5,r22
    7cfc:	d9800c04 	addi	r6,sp,48
    7d00:	00065e80 	call	65e8 <__sprint_r>
    7d04:	103c061e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    7d08:	dc800e17 	ldw	r18,56(sp)
    7d0c:	dc400d17 	ldw	r17,52(sp)
    7d10:	d8c01904 	addi	r3,sp,100
    7d14:	003fee06 	br	7cd0 <___vfprintf_internal_r+0x1690>
    7d18:	3c000017 	ldw	r16,0(r7)
    7d1c:	0023883a 	mov	r17,zero
    7d20:	39c00104 	addi	r7,r7,4
    7d24:	d9c14015 	stw	r7,1280(sp)
    7d28:	003e9206 	br	7774 <___vfprintf_internal_r+0x1134>
    7d2c:	d9401904 	addi	r5,sp,100
    7d30:	dd000f04 	addi	r20,sp,60
    7d34:	d9414115 	stw	r5,1284(sp)
    7d38:	d9814417 	ldw	r6,1296(sp)
    7d3c:	880a973a 	slli	r5,r17,28
    7d40:	8004d13a 	srli	r2,r16,4
    7d44:	810003cc 	andi	r4,r16,15
    7d48:	3109883a 	add	r4,r6,r4
    7d4c:	2884b03a 	or	r2,r5,r2
    7d50:	21400003 	ldbu	r5,0(r4)
    7d54:	d9014117 	ldw	r4,1284(sp)
    7d58:	8806d13a 	srli	r3,r17,4
    7d5c:	1021883a 	mov	r16,r2
    7d60:	213fffc4 	addi	r4,r4,-1
    7d64:	d9014115 	stw	r4,1284(sp)
    7d68:	d9814117 	ldw	r6,1284(sp)
    7d6c:	10c8b03a 	or	r4,r2,r3
    7d70:	1823883a 	mov	r17,r3
    7d74:	31400005 	stb	r5,0(r6)
    7d78:	203fef1e 	bne	r4,zero,7d38 <___vfprintf_internal_r+0x16f8>
    7d7c:	003ccb06 	br	70ac <___vfprintf_internal_r+0xa6c>
    7d80:	00800c04 	movi	r2,48
    7d84:	d98018c4 	addi	r6,sp,99
    7d88:	dd000f04 	addi	r20,sp,60
    7d8c:	d88018c5 	stb	r2,99(sp)
    7d90:	d9814115 	stw	r6,1284(sp)
    7d94:	003cc506 	br	70ac <___vfprintf_internal_r+0xa6c>
    7d98:	dc400d17 	ldw	r17,52(sp)
    7d9c:	07000074 	movhi	fp,1
    7da0:	e7007984 	addi	fp,fp,486
    7da4:	003bc706 	br	6cc4 <___vfprintf_internal_r+0x684>
    7da8:	d9414c17 	ldw	r5,1328(sp)
    7dac:	2880040c 	andi	r2,r5,16
    7db0:	10007c26 	beq	r2,zero,7fa4 <___vfprintf_internal_r+0x1964>
    7db4:	38800017 	ldw	r2,0(r7)
    7db8:	39c00104 	addi	r7,r7,4
    7dbc:	d9c14015 	stw	r7,1280(sp)
    7dc0:	d9814b17 	ldw	r6,1324(sp)
    7dc4:	d9c14017 	ldw	r7,1280(sp)
    7dc8:	11800015 	stw	r6,0(r2)
    7dcc:	003a7806 	br	67b0 <___vfprintf_internal_r+0x170>
    7dd0:	d9014f17 	ldw	r4,1340(sp)
    7dd4:	b00b883a 	mov	r5,r22
    7dd8:	d9800c04 	addi	r6,sp,48
    7ddc:	00065e80 	call	65e8 <__sprint_r>
    7de0:	103bcf1e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    7de4:	dc800e17 	ldw	r18,56(sp)
    7de8:	dc400d17 	ldw	r17,52(sp)
    7dec:	d8c01904 	addi	r3,sp,100
    7df0:	d9014717 	ldw	r4,1308(sp)
    7df4:	d9414117 	ldw	r5,1284(sp)
    7df8:	8c400044 	addi	r17,r17,1
    7dfc:	9125883a 	add	r18,r18,r4
    7e00:	008001c4 	movi	r2,7
    7e04:	19400015 	stw	r5,0(r3)
    7e08:	19000115 	stw	r4,4(r3)
    7e0c:	dc800e15 	stw	r18,56(sp)
    7e10:	dc400d15 	stw	r17,52(sp)
    7e14:	147cee16 	blt	r2,r17,71d0 <___vfprintf_internal_r+0xb90>
    7e18:	18c00204 	addi	r3,r3,8
    7e1c:	003b8606 	br	6c38 <___vfprintf_internal_r+0x5f8>
    7e20:	38c00017 	ldw	r3,0(r7)
    7e24:	39000204 	addi	r4,r7,8
    7e28:	d9014015 	stw	r4,1280(sp)
    7e2c:	d8c14215 	stw	r3,1288(sp)
    7e30:	39c00117 	ldw	r7,4(r7)
    7e34:	d9c14315 	stw	r7,1292(sp)
    7e38:	003e2006 	br	76bc <___vfprintf_internal_r+0x107c>
    7e3c:	0005883a 	mov	r2,zero
    7e40:	1409c83a 	sub	r4,r2,r16
    7e44:	1105803a 	cmpltu	r2,r2,r4
    7e48:	044bc83a 	sub	r5,zero,r17
    7e4c:	2885c83a 	sub	r2,r5,r2
    7e50:	2021883a 	mov	r16,r4
    7e54:	1023883a 	mov	r17,r2
    7e58:	01000044 	movi	r4,1
    7e5c:	00800b44 	movi	r2,45
    7e60:	d8800405 	stb	r2,16(sp)
    7e64:	003c8406 	br	7078 <___vfprintf_internal_r+0xa38>
    7e68:	d9014f17 	ldw	r4,1340(sp)
    7e6c:	b00b883a 	mov	r5,r22
    7e70:	d9800c04 	addi	r6,sp,48
    7e74:	00065e80 	call	65e8 <__sprint_r>
    7e78:	103ba91e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    7e7c:	dc800e17 	ldw	r18,56(sp)
    7e80:	dc400d17 	ldw	r17,52(sp)
    7e84:	d9000517 	ldw	r4,20(sp)
    7e88:	d9401904 	addi	r5,sp,100
    7e8c:	003da706 	br	752c <___vfprintf_internal_r+0xeec>
    7e90:	d9014f17 	ldw	r4,1340(sp)
    7e94:	b00b883a 	mov	r5,r22
    7e98:	d9800c04 	addi	r6,sp,48
    7e9c:	00065e80 	call	65e8 <__sprint_r>
    7ea0:	103b9f1e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    7ea4:	dc800e17 	ldw	r18,56(sp)
    7ea8:	dc400d17 	ldw	r17,52(sp)
    7eac:	d9000517 	ldw	r4,20(sp)
    7eb0:	d8c01904 	addi	r3,sp,100
    7eb4:	003d9106 	br	74fc <___vfprintf_internal_r+0xebc>
    7eb8:	07000074 	movhi	fp,1
    7ebc:	e7007584 	addi	fp,fp,470
    7ec0:	9425883a 	add	r18,r18,r16
    7ec4:	8c400044 	addi	r17,r17,1
    7ec8:	008001c4 	movi	r2,7
    7ecc:	1f000015 	stw	fp,0(r3)
    7ed0:	1c000115 	stw	r16,4(r3)
    7ed4:	dc800e15 	stw	r18,56(sp)
    7ed8:	dc400d15 	stw	r17,52(sp)
    7edc:	147fbc16 	blt	r2,r17,7dd0 <___vfprintf_internal_r+0x1790>
    7ee0:	18c00204 	addi	r3,r3,8
    7ee4:	003fc206 	br	7df0 <___vfprintf_internal_r+0x17b0>
    7ee8:	d9014f17 	ldw	r4,1340(sp)
    7eec:	b00b883a 	mov	r5,r22
    7ef0:	d9800c04 	addi	r6,sp,48
    7ef4:	00065e80 	call	65e8 <__sprint_r>
    7ef8:	103b891e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    7efc:	dc800e17 	ldw	r18,56(sp)
    7f00:	d9000517 	ldw	r4,20(sp)
    7f04:	d8c01904 	addi	r3,sp,100
    7f08:	003d0206 	br	7314 <___vfprintf_internal_r+0xcd4>
    7f0c:	07000074 	movhi	fp,1
    7f10:	e7007584 	addi	fp,fp,470
    7f14:	003be406 	br	6ea8 <___vfprintf_internal_r+0x868>
    7f18:	00800074 	movhi	r2,1
    7f1c:	10806404 	addi	r2,r2,400
    7f20:	d8814115 	stw	r2,1284(sp)
    7f24:	003df506 	br	76fc <___vfprintf_internal_r+0x10bc>
    7f28:	d9014217 	ldw	r4,1288(sp)
    7f2c:	d9414317 	ldw	r5,1292(sp)
    7f30:	00027c00 	call	27c0 <__isnand>
    7f34:	10003926 	beq	r2,zero,801c <___vfprintf_internal_r+0x19dc>
    7f38:	d9414d17 	ldw	r5,1332(sp)
    7f3c:	008011c4 	movi	r2,71
    7f40:	1140ce16 	blt	r2,r5,827c <___vfprintf_internal_r+0x1c3c>
    7f44:	01800074 	movhi	r6,1
    7f48:	31806504 	addi	r6,r6,404
    7f4c:	d9814115 	stw	r6,1284(sp)
    7f50:	003dea06 	br	76fc <___vfprintf_internal_r+0x10bc>
    7f54:	d9014c17 	ldw	r4,1328(sp)
    7f58:	bdc00044 	addi	r23,r23,1
    7f5c:	b8c00007 	ldb	r3,0(r23)
    7f60:	21000814 	ori	r4,r4,32
    7f64:	d9014c15 	stw	r4,1328(sp)
    7f68:	003a3406 	br	683c <___vfprintf_internal_r+0x1fc>
    7f6c:	dcc14515 	stw	r19,1300(sp)
    7f70:	98011016 	blt	r19,zero,83b4 <___vfprintf_internal_r+0x1d74>
    7f74:	980f883a 	mov	r7,r19
    7f78:	d8014615 	stw	zero,1304(sp)
    7f7c:	003c5206 	br	70c8 <___vfprintf_internal_r+0xa88>
    7f80:	d9014f17 	ldw	r4,1340(sp)
    7f84:	b00b883a 	mov	r5,r22
    7f88:	d9800c04 	addi	r6,sp,48
    7f8c:	00065e80 	call	65e8 <__sprint_r>
    7f90:	103b631e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    7f94:	dc800e17 	ldw	r18,56(sp)
    7f98:	d9000517 	ldw	r4,20(sp)
    7f9c:	d8c01904 	addi	r3,sp,100
    7fa0:	003f2e06 	br	7c5c <___vfprintf_internal_r+0x161c>
    7fa4:	d8c14c17 	ldw	r3,1328(sp)
    7fa8:	1880100c 	andi	r2,r3,64
    7fac:	1000a026 	beq	r2,zero,8230 <___vfprintf_internal_r+0x1bf0>
    7fb0:	38800017 	ldw	r2,0(r7)
    7fb4:	39c00104 	addi	r7,r7,4
    7fb8:	d9c14015 	stw	r7,1280(sp)
    7fbc:	d9014b17 	ldw	r4,1324(sp)
    7fc0:	d9c14017 	ldw	r7,1280(sp)
    7fc4:	1100000d 	sth	r4,0(r2)
    7fc8:	0039f906 	br	67b0 <___vfprintf_internal_r+0x170>
    7fcc:	d9014f17 	ldw	r4,1340(sp)
    7fd0:	b00b883a 	mov	r5,r22
    7fd4:	d9800c04 	addi	r6,sp,48
    7fd8:	00065e80 	call	65e8 <__sprint_r>
    7fdc:	103b501e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    7fe0:	dc800e17 	ldw	r18,56(sp)
    7fe4:	dc400d17 	ldw	r17,52(sp)
    7fe8:	d9000517 	ldw	r4,20(sp)
    7fec:	d8c01904 	addi	r3,sp,100
    7ff0:	003f2d06 	br	7ca8 <___vfprintf_internal_r+0x1668>
    7ff4:	00800184 	movi	r2,6
    7ff8:	14c09a36 	bltu	r2,r19,8264 <___vfprintf_internal_r+0x1c24>
    7ffc:	dcc14515 	stw	r19,1300(sp)
    8000:	9800010e 	bge	r19,zero,8008 <___vfprintf_internal_r+0x19c8>
    8004:	d8014515 	stw	zero,1300(sp)
    8008:	00800074 	movhi	r2,1
    800c:	10806704 	addi	r2,r2,412
    8010:	980f883a 	mov	r7,r19
    8014:	d8814115 	stw	r2,1284(sp)
    8018:	003a7806 	br	69fc <___vfprintf_internal_r+0x3bc>
    801c:	00bfffc4 	movi	r2,-1
    8020:	9880e226 	beq	r19,r2,83ac <___vfprintf_internal_r+0x1d6c>
    8024:	d9414d17 	ldw	r5,1332(sp)
    8028:	008019c4 	movi	r2,103
    802c:	2880dc26 	beq	r5,r2,83a0 <___vfprintf_internal_r+0x1d60>
    8030:	008011c4 	movi	r2,71
    8034:	2880da26 	beq	r5,r2,83a0 <___vfprintf_internal_r+0x1d60>
    8038:	d9414c17 	ldw	r5,1328(sp)
    803c:	d9014317 	ldw	r4,1292(sp)
    8040:	d9814217 	ldw	r6,1288(sp)
    8044:	29404014 	ori	r5,r5,256
    8048:	d9414c15 	stw	r5,1328(sp)
    804c:	2000cc16 	blt	r4,zero,8380 <___vfprintf_internal_r+0x1d40>
    8050:	3021883a 	mov	r16,r6
    8054:	2023883a 	mov	r17,r4
    8058:	0039883a 	mov	fp,zero
    805c:	d9414d17 	ldw	r5,1332(sp)
    8060:	00801984 	movi	r2,102
    8064:	2880b726 	beq	r5,r2,8344 <___vfprintf_internal_r+0x1d04>
    8068:	00801184 	movi	r2,70
    806c:	2880b526 	beq	r5,r2,8344 <___vfprintf_internal_r+0x1d04>
    8070:	00801944 	movi	r2,101
    8074:	2880c826 	beq	r5,r2,8398 <___vfprintf_internal_r+0x1d58>
    8078:	00801144 	movi	r2,69
    807c:	2880c626 	beq	r5,r2,8398 <___vfprintf_internal_r+0x1d58>
    8080:	9829883a 	mov	r20,r19
    8084:	d9014f17 	ldw	r4,1340(sp)
    8088:	d8800504 	addi	r2,sp,20
    808c:	880d883a 	mov	r6,r17
    8090:	d8800115 	stw	r2,4(sp)
    8094:	d8c00604 	addi	r3,sp,24
    8098:	d8800704 	addi	r2,sp,28
    809c:	800b883a 	mov	r5,r16
    80a0:	01c00084 	movi	r7,2
    80a4:	d8c00215 	stw	r3,8(sp)
    80a8:	d8800315 	stw	r2,12(sp)
    80ac:	dd000015 	stw	r20,0(sp)
    80b0:	0008a980 	call	8a98 <_dtoa_r>
    80b4:	d9814d17 	ldw	r6,1332(sp)
    80b8:	d8814115 	stw	r2,1284(sp)
    80bc:	008019c4 	movi	r2,103
    80c0:	30809526 	beq	r6,r2,8318 <___vfprintf_internal_r+0x1cd8>
    80c4:	d8c14d17 	ldw	r3,1332(sp)
    80c8:	008011c4 	movi	r2,71
    80cc:	18809226 	beq	r3,r2,8318 <___vfprintf_internal_r+0x1cd8>
    80d0:	d9414117 	ldw	r5,1284(sp)
    80d4:	d9814d17 	ldw	r6,1332(sp)
    80d8:	00801984 	movi	r2,102
    80dc:	2d25883a 	add	r18,r5,r20
    80e0:	30808626 	beq	r6,r2,82fc <___vfprintf_internal_r+0x1cbc>
    80e4:	00801184 	movi	r2,70
    80e8:	30808426 	beq	r6,r2,82fc <___vfprintf_internal_r+0x1cbc>
    80ec:	000d883a 	mov	r6,zero
    80f0:	000f883a 	mov	r7,zero
    80f4:	880b883a 	mov	r5,r17
    80f8:	8009883a 	mov	r4,r16
    80fc:	000cd080 	call	cd08 <__eqdf2>
    8100:	1000751e 	bne	r2,zero,82d8 <___vfprintf_internal_r+0x1c98>
    8104:	9005883a 	mov	r2,r18
    8108:	dc800715 	stw	r18,28(sp)
    810c:	d9014117 	ldw	r4,1284(sp)
    8110:	d9414d17 	ldw	r5,1332(sp)
    8114:	00c019c4 	movi	r3,103
    8118:	1125c83a 	sub	r18,r2,r4
    811c:	28c06826 	beq	r5,r3,82c0 <___vfprintf_internal_r+0x1c80>
    8120:	008011c4 	movi	r2,71
    8124:	28806626 	beq	r5,r2,82c0 <___vfprintf_internal_r+0x1c80>
    8128:	d9000517 	ldw	r4,20(sp)
    812c:	d8c14d17 	ldw	r3,1332(sp)
    8130:	00801944 	movi	r2,101
    8134:	10c05516 	blt	r2,r3,828c <___vfprintf_internal_r+0x1c4c>
    8138:	213fffc4 	addi	r4,r4,-1
    813c:	d9000515 	stw	r4,20(sp)
    8140:	d8c00805 	stb	r3,32(sp)
    8144:	2021883a 	mov	r16,r4
    8148:	2000c116 	blt	r4,zero,8450 <___vfprintf_internal_r+0x1e10>
    814c:	00800ac4 	movi	r2,43
    8150:	d8800845 	stb	r2,33(sp)
    8154:	00800244 	movi	r2,9
    8158:	1400af0e 	bge	r2,r16,8418 <___vfprintf_internal_r+0x1dd8>
    815c:	1027883a 	mov	r19,r2
    8160:	dc400b84 	addi	r17,sp,46
    8164:	8009883a 	mov	r4,r16
    8168:	01400284 	movi	r5,10
    816c:	000d1100 	call	d110 <__modsi3>
    8170:	10800c04 	addi	r2,r2,48
    8174:	8c7fffc4 	addi	r17,r17,-1
    8178:	8009883a 	mov	r4,r16
    817c:	01400284 	movi	r5,10
    8180:	88800005 	stb	r2,0(r17)
    8184:	000d0b00 	call	d0b0 <__divsi3>
    8188:	1021883a 	mov	r16,r2
    818c:	98bff516 	blt	r19,r2,8164 <___vfprintf_internal_r+0x1b24>
    8190:	10c00c04 	addi	r3,r2,48
    8194:	d88009c4 	addi	r2,sp,39
    8198:	108001c4 	addi	r2,r2,7
    819c:	897fffc4 	addi	r5,r17,-1
    81a0:	88ffffc5 	stb	r3,-1(r17)
    81a4:	2880a72e 	bgeu	r5,r2,8444 <___vfprintf_internal_r+0x1e04>
    81a8:	1009883a 	mov	r4,r2
    81ac:	d9800804 	addi	r6,sp,32
    81b0:	d8c00884 	addi	r3,sp,34
    81b4:	28800003 	ldbu	r2,0(r5)
    81b8:	29400044 	addi	r5,r5,1
    81bc:	18800005 	stb	r2,0(r3)
    81c0:	18c00044 	addi	r3,r3,1
    81c4:	293ffb36 	bltu	r5,r4,81b4 <___vfprintf_internal_r+0x1b74>
    81c8:	1987c83a 	sub	r3,r3,r6
    81cc:	00800044 	movi	r2,1
    81d0:	d8c14815 	stw	r3,1312(sp)
    81d4:	90cf883a 	add	r7,r18,r3
    81d8:	1480960e 	bge	r2,r18,8434 <___vfprintf_internal_r+0x1df4>
    81dc:	39c00044 	addi	r7,r7,1
    81e0:	d9c14515 	stw	r7,1300(sp)
    81e4:	38003416 	blt	r7,zero,82b8 <___vfprintf_internal_r+0x1c78>
    81e8:	e0803fcc 	andi	r2,fp,255
    81ec:	1080201c 	xori	r2,r2,128
    81f0:	10bfe004 	addi	r2,r2,-128
    81f4:	10004e26 	beq	r2,zero,8330 <___vfprintf_internal_r+0x1cf0>
    81f8:	00800b44 	movi	r2,45
    81fc:	dc814715 	stw	r18,1308(sp)
    8200:	d8014615 	stw	zero,1304(sp)
    8204:	d8800405 	stb	r2,16(sp)
    8208:	003bb106 	br	70d0 <___vfprintf_internal_r+0xa90>
    820c:	00800b44 	movi	r2,45
    8210:	d8800405 	stb	r2,16(sp)
    8214:	003d3306 	br	76e4 <___vfprintf_internal_r+0x10a4>
    8218:	d9014f17 	ldw	r4,1340(sp)
    821c:	b00b883a 	mov	r5,r22
    8220:	d9800c04 	addi	r6,sp,48
    8224:	00065e80 	call	65e8 <__sprint_r>
    8228:	103abd1e 	bne	r2,zero,6d20 <___vfprintf_internal_r+0x6e0>
    822c:	003abb06 	br	6d1c <___vfprintf_internal_r+0x6dc>
    8230:	38800017 	ldw	r2,0(r7)
    8234:	39c00104 	addi	r7,r7,4
    8238:	d9c14015 	stw	r7,1280(sp)
    823c:	d9414b17 	ldw	r5,1324(sp)
    8240:	d9c14017 	ldw	r7,1280(sp)
    8244:	11400015 	stw	r5,0(r2)
    8248:	00395906 	br	67b0 <___vfprintf_internal_r+0x170>
    824c:	980f883a 	mov	r7,r19
    8250:	dcc14515 	stw	r19,1300(sp)
    8254:	d8014615 	stw	zero,1304(sp)
    8258:	003b9b06 	br	70c8 <___vfprintf_internal_r+0xa88>
    825c:	0027883a 	mov	r19,zero
    8260:	00397806 	br	6844 <___vfprintf_internal_r+0x204>
    8264:	00c00074 	movhi	r3,1
    8268:	18c06704 	addi	r3,r3,412
    826c:	100f883a 	mov	r7,r2
    8270:	d8814515 	stw	r2,1300(sp)
    8274:	d8c14115 	stw	r3,1284(sp)
    8278:	0039e006 	br	69fc <___vfprintf_internal_r+0x3bc>
    827c:	00800074 	movhi	r2,1
    8280:	10806604 	addi	r2,r2,408
    8284:	d8814115 	stw	r2,1284(sp)
    8288:	003d1c06 	br	76fc <___vfprintf_internal_r+0x10bc>
    828c:	d9414d17 	ldw	r5,1332(sp)
    8290:	00801984 	movi	r2,102
    8294:	28804926 	beq	r5,r2,83bc <___vfprintf_internal_r+0x1d7c>
    8298:	200f883a 	mov	r7,r4
    829c:	24805716 	blt	r4,r18,83fc <___vfprintf_internal_r+0x1dbc>
    82a0:	d9414c17 	ldw	r5,1328(sp)
    82a4:	2880004c 	andi	r2,r5,1
    82a8:	10000126 	beq	r2,zero,82b0 <___vfprintf_internal_r+0x1c70>
    82ac:	21c00044 	addi	r7,r4,1
    82b0:	d9c14515 	stw	r7,1300(sp)
    82b4:	383fcc0e 	bge	r7,zero,81e8 <___vfprintf_internal_r+0x1ba8>
    82b8:	d8014515 	stw	zero,1300(sp)
    82bc:	003fca06 	br	81e8 <___vfprintf_internal_r+0x1ba8>
    82c0:	d9000517 	ldw	r4,20(sp)
    82c4:	00bfff04 	movi	r2,-4
    82c8:	1100480e 	bge	r2,r4,83ec <___vfprintf_internal_r+0x1dac>
    82cc:	99004716 	blt	r19,r4,83ec <___vfprintf_internal_r+0x1dac>
    82d0:	d8c14d15 	stw	r3,1332(sp)
    82d4:	003ff006 	br	8298 <___vfprintf_internal_r+0x1c58>
    82d8:	d8800717 	ldw	r2,28(sp)
    82dc:	14bf8b2e 	bgeu	r2,r18,810c <___vfprintf_internal_r+0x1acc>
    82e0:	9007883a 	mov	r3,r18
    82e4:	01000c04 	movi	r4,48
    82e8:	11000005 	stb	r4,0(r2)
    82ec:	10800044 	addi	r2,r2,1
    82f0:	d8800715 	stw	r2,28(sp)
    82f4:	18bffc1e 	bne	r3,r2,82e8 <___vfprintf_internal_r+0x1ca8>
    82f8:	003f8406 	br	810c <___vfprintf_internal_r+0x1acc>
    82fc:	d8814117 	ldw	r2,1284(sp)
    8300:	10c00007 	ldb	r3,0(r2)
    8304:	00800c04 	movi	r2,48
    8308:	18805b26 	beq	r3,r2,8478 <___vfprintf_internal_r+0x1e38>
    830c:	d9000517 	ldw	r4,20(sp)
    8310:	9125883a 	add	r18,r18,r4
    8314:	003f7506 	br	80ec <___vfprintf_internal_r+0x1aac>
    8318:	d9014c17 	ldw	r4,1328(sp)
    831c:	2080004c 	andi	r2,r4,1
    8320:	1005003a 	cmpeq	r2,r2,zero
    8324:	103f6a26 	beq	r2,zero,80d0 <___vfprintf_internal_r+0x1a90>
    8328:	d8800717 	ldw	r2,28(sp)
    832c:	003f7706 	br	810c <___vfprintf_internal_r+0x1acc>
    8330:	d9c14515 	stw	r7,1300(sp)
    8334:	38004d16 	blt	r7,zero,846c <___vfprintf_internal_r+0x1e2c>
    8338:	dc814715 	stw	r18,1308(sp)
    833c:	d8014615 	stw	zero,1304(sp)
    8340:	003b6106 	br	70c8 <___vfprintf_internal_r+0xa88>
    8344:	d9014f17 	ldw	r4,1340(sp)
    8348:	d8800504 	addi	r2,sp,20
    834c:	d8800115 	stw	r2,4(sp)
    8350:	d8c00604 	addi	r3,sp,24
    8354:	d8800704 	addi	r2,sp,28
    8358:	800b883a 	mov	r5,r16
    835c:	880d883a 	mov	r6,r17
    8360:	01c000c4 	movi	r7,3
    8364:	d8c00215 	stw	r3,8(sp)
    8368:	d8800315 	stw	r2,12(sp)
    836c:	dcc00015 	stw	r19,0(sp)
    8370:	9829883a 	mov	r20,r19
    8374:	0008a980 	call	8a98 <_dtoa_r>
    8378:	d8814115 	stw	r2,1284(sp)
    837c:	003f5106 	br	80c4 <___vfprintf_internal_r+0x1a84>
    8380:	d8c14217 	ldw	r3,1288(sp)
    8384:	d9014317 	ldw	r4,1292(sp)
    8388:	07000b44 	movi	fp,45
    838c:	1821883a 	mov	r16,r3
    8390:	2460003c 	xorhi	r17,r4,32768
    8394:	003f3106 	br	805c <___vfprintf_internal_r+0x1a1c>
    8398:	9d000044 	addi	r20,r19,1
    839c:	003f3906 	br	8084 <___vfprintf_internal_r+0x1a44>
    83a0:	983f251e 	bne	r19,zero,8038 <___vfprintf_internal_r+0x19f8>
    83a4:	04c00044 	movi	r19,1
    83a8:	003f2306 	br	8038 <___vfprintf_internal_r+0x19f8>
    83ac:	04c00184 	movi	r19,6
    83b0:	003f2106 	br	8038 <___vfprintf_internal_r+0x19f8>
    83b4:	d8014515 	stw	zero,1300(sp)
    83b8:	003eee06 	br	7f74 <___vfprintf_internal_r+0x1934>
    83bc:	200f883a 	mov	r7,r4
    83c0:	0100370e 	bge	zero,r4,84a0 <___vfprintf_internal_r+0x1e60>
    83c4:	9800031e 	bne	r19,zero,83d4 <___vfprintf_internal_r+0x1d94>
    83c8:	d9814c17 	ldw	r6,1328(sp)
    83cc:	3080004c 	andi	r2,r6,1
    83d0:	103fb726 	beq	r2,zero,82b0 <___vfprintf_internal_r+0x1c70>
    83d4:	20800044 	addi	r2,r4,1
    83d8:	98a7883a 	add	r19,r19,r2
    83dc:	dcc14515 	stw	r19,1300(sp)
    83e0:	980f883a 	mov	r7,r19
    83e4:	983f800e 	bge	r19,zero,81e8 <___vfprintf_internal_r+0x1ba8>
    83e8:	003fb306 	br	82b8 <___vfprintf_internal_r+0x1c78>
    83ec:	d9814d17 	ldw	r6,1332(sp)
    83f0:	31bfff84 	addi	r6,r6,-2
    83f4:	d9814d15 	stw	r6,1332(sp)
    83f8:	003f4c06 	br	812c <___vfprintf_internal_r+0x1aec>
    83fc:	0100180e 	bge	zero,r4,8460 <___vfprintf_internal_r+0x1e20>
    8400:	00800044 	movi	r2,1
    8404:	1485883a 	add	r2,r2,r18
    8408:	d8814515 	stw	r2,1300(sp)
    840c:	100f883a 	mov	r7,r2
    8410:	103f750e 	bge	r2,zero,81e8 <___vfprintf_internal_r+0x1ba8>
    8414:	003fa806 	br	82b8 <___vfprintf_internal_r+0x1c78>
    8418:	80c00c04 	addi	r3,r16,48
    841c:	00800c04 	movi	r2,48
    8420:	d8c008c5 	stb	r3,35(sp)
    8424:	d9800804 	addi	r6,sp,32
    8428:	d8c00904 	addi	r3,sp,36
    842c:	d8800885 	stb	r2,34(sp)
    8430:	003f6506 	br	81c8 <___vfprintf_internal_r+0x1b88>
    8434:	d9014c17 	ldw	r4,1328(sp)
    8438:	2084703a 	and	r2,r4,r2
    843c:	103f9c26 	beq	r2,zero,82b0 <___vfprintf_internal_r+0x1c70>
    8440:	003f6606 	br	81dc <___vfprintf_internal_r+0x1b9c>
    8444:	d9800804 	addi	r6,sp,32
    8448:	d8c00884 	addi	r3,sp,34
    844c:	003f5e06 	br	81c8 <___vfprintf_internal_r+0x1b88>
    8450:	00800b44 	movi	r2,45
    8454:	0121c83a 	sub	r16,zero,r4
    8458:	d8800845 	stb	r2,33(sp)
    845c:	003f3d06 	br	8154 <___vfprintf_internal_r+0x1b14>
    8460:	00800084 	movi	r2,2
    8464:	1105c83a 	sub	r2,r2,r4
    8468:	003fe606 	br	8404 <___vfprintf_internal_r+0x1dc4>
    846c:	d8014515 	stw	zero,1300(sp)
    8470:	dc814715 	stw	r18,1308(sp)
    8474:	003fb106 	br	833c <___vfprintf_internal_r+0x1cfc>
    8478:	000d883a 	mov	r6,zero
    847c:	000f883a 	mov	r7,zero
    8480:	8009883a 	mov	r4,r16
    8484:	880b883a 	mov	r5,r17
    8488:	000cd900 	call	cd90 <__nedf2>
    848c:	103f9f26 	beq	r2,zero,830c <___vfprintf_internal_r+0x1ccc>
    8490:	00800044 	movi	r2,1
    8494:	1509c83a 	sub	r4,r2,r20
    8498:	d9000515 	stw	r4,20(sp)
    849c:	003f9b06 	br	830c <___vfprintf_internal_r+0x1ccc>
    84a0:	98000d1e 	bne	r19,zero,84d8 <___vfprintf_internal_r+0x1e98>
    84a4:	d8c14c17 	ldw	r3,1328(sp)
    84a8:	1880004c 	andi	r2,r3,1
    84ac:	10000a1e 	bne	r2,zero,84d8 <___vfprintf_internal_r+0x1e98>
    84b0:	01000044 	movi	r4,1
    84b4:	200f883a 	mov	r7,r4
    84b8:	d9014515 	stw	r4,1300(sp)
    84bc:	003f4a06 	br	81e8 <___vfprintf_internal_r+0x1ba8>
    84c0:	3cc00017 	ldw	r19,0(r7)
    84c4:	39c00104 	addi	r7,r7,4
    84c8:	983d0e0e 	bge	r19,zero,7904 <___vfprintf_internal_r+0x12c4>
    84cc:	b8c00007 	ldb	r3,0(r23)
    84d0:	04ffffc4 	movi	r19,-1
    84d4:	0038d906 	br	683c <___vfprintf_internal_r+0x1fc>
    84d8:	9cc00084 	addi	r19,r19,2
    84dc:	dcc14515 	stw	r19,1300(sp)
    84e0:	980f883a 	mov	r7,r19
    84e4:	983f400e 	bge	r19,zero,81e8 <___vfprintf_internal_r+0x1ba8>
    84e8:	003f7306 	br	82b8 <___vfprintf_internal_r+0x1c78>

000084ec <__vfprintf_internal>:
    84ec:	00800074 	movhi	r2,1
    84f0:	10890804 	addi	r2,r2,9248
    84f4:	2013883a 	mov	r9,r4
    84f8:	11000017 	ldw	r4,0(r2)
    84fc:	2805883a 	mov	r2,r5
    8500:	300f883a 	mov	r7,r6
    8504:	480b883a 	mov	r5,r9
    8508:	100d883a 	mov	r6,r2
    850c:	00066401 	jmpi	6640 <___vfprintf_internal_r>

00008510 <__swbuf_r>:
    8510:	defffc04 	addi	sp,sp,-16
    8514:	dc400215 	stw	r17,8(sp)
    8518:	dc000115 	stw	r16,4(sp)
    851c:	dfc00315 	stw	ra,12(sp)
    8520:	2023883a 	mov	r17,r4
    8524:	2821883a 	mov	r16,r5
    8528:	20000226 	beq	r4,zero,8534 <__swbuf_r+0x24>
    852c:	20800e17 	ldw	r2,56(r4)
    8530:	10002f26 	beq	r2,zero,85f0 <__swbuf_r+0xe0>
    8534:	3080030b 	ldhu	r2,12(r6)
    8538:	30c00617 	ldw	r3,24(r6)
    853c:	1080020c 	andi	r2,r2,8
    8540:	30c00215 	stw	r3,8(r6)
    8544:	10002226 	beq	r2,zero,85d0 <__swbuf_r+0xc0>
    8548:	30c00417 	ldw	r3,16(r6)
    854c:	18002026 	beq	r3,zero,85d0 <__swbuf_r+0xc0>
    8550:	31000017 	ldw	r4,0(r6)
    8554:	30800517 	ldw	r2,20(r6)
    8558:	20c7c83a 	sub	r3,r4,r3
    855c:	18802f0e 	bge	r3,r2,861c <__swbuf_r+0x10c>
    8560:	19400044 	addi	r5,r3,1
    8564:	30800217 	ldw	r2,8(r6)
    8568:	84003fcc 	andi	r16,r16,255
    856c:	20c00044 	addi	r3,r4,1
    8570:	10bfffc4 	addi	r2,r2,-1
    8574:	30800215 	stw	r2,8(r6)
    8578:	24000005 	stb	r16,0(r4)
    857c:	30800517 	ldw	r2,20(r6)
    8580:	30c00015 	stw	r3,0(r6)
    8584:	11400c26 	beq	r2,r5,85b8 <__swbuf_r+0xa8>
    8588:	3080030b 	ldhu	r2,12(r6)
    858c:	1080004c 	andi	r2,r2,1
    8590:	1005003a 	cmpeq	r2,r2,zero
    8594:	10000626 	beq	r2,zero,85b0 <__swbuf_r+0xa0>
    8598:	8005883a 	mov	r2,r16
    859c:	dfc00317 	ldw	ra,12(sp)
    85a0:	dc400217 	ldw	r17,8(sp)
    85a4:	dc000117 	ldw	r16,4(sp)
    85a8:	dec00404 	addi	sp,sp,16
    85ac:	f800283a 	ret
    85b0:	00800284 	movi	r2,10
    85b4:	80bff81e 	bne	r16,r2,8598 <__swbuf_r+0x88>
    85b8:	8809883a 	mov	r4,r17
    85bc:	300b883a 	mov	r5,r6
    85c0:	00041540 	call	4154 <_fflush_r>
    85c4:	103ff426 	beq	r2,zero,8598 <__swbuf_r+0x88>
    85c8:	043fffc4 	movi	r16,-1
    85cc:	003ff206 	br	8598 <__swbuf_r+0x88>
    85d0:	300b883a 	mov	r5,r6
    85d4:	8809883a 	mov	r4,r17
    85d8:	d9800015 	stw	r6,0(sp)
    85dc:	00086d40 	call	86d4 <__swsetup_r>
    85e0:	d9800017 	ldw	r6,0(sp)
    85e4:	1000061e 	bne	r2,zero,8600 <__swbuf_r+0xf0>
    85e8:	30c00417 	ldw	r3,16(r6)
    85ec:	003fd806 	br	8550 <__swbuf_r+0x40>
    85f0:	d9800015 	stw	r6,0(sp)
    85f4:	00043ec0 	call	43ec <__sinit>
    85f8:	d9800017 	ldw	r6,0(sp)
    85fc:	003fcd06 	br	8534 <__swbuf_r+0x24>
    8600:	3080030b 	ldhu	r2,12(r6)
    8604:	00c00244 	movi	r3,9
    8608:	043fffc4 	movi	r16,-1
    860c:	10801014 	ori	r2,r2,64
    8610:	3080030d 	sth	r2,12(r6)
    8614:	88c00015 	stw	r3,0(r17)
    8618:	003fdf06 	br	8598 <__swbuf_r+0x88>
    861c:	300b883a 	mov	r5,r6
    8620:	8809883a 	mov	r4,r17
    8624:	d9800015 	stw	r6,0(sp)
    8628:	00041540 	call	4154 <_fflush_r>
    862c:	d9800017 	ldw	r6,0(sp)
    8630:	103fe51e 	bne	r2,zero,85c8 <__swbuf_r+0xb8>
    8634:	31000017 	ldw	r4,0(r6)
    8638:	01400044 	movi	r5,1
    863c:	003fc906 	br	8564 <__swbuf_r+0x54>

00008640 <__swbuf>:
    8640:	01800074 	movhi	r6,1
    8644:	31890804 	addi	r6,r6,9248
    8648:	2007883a 	mov	r3,r4
    864c:	31000017 	ldw	r4,0(r6)
    8650:	280d883a 	mov	r6,r5
    8654:	180b883a 	mov	r5,r3
    8658:	00085101 	jmpi	8510 <__swbuf_r>

0000865c <_write_r>:
    865c:	defffd04 	addi	sp,sp,-12
    8660:	dc000015 	stw	r16,0(sp)
    8664:	04000074 	movhi	r16,1
    8668:	8410e504 	addi	r16,r16,17300
    866c:	dc400115 	stw	r17,4(sp)
    8670:	80000015 	stw	zero,0(r16)
    8674:	2023883a 	mov	r17,r4
    8678:	2809883a 	mov	r4,r5
    867c:	300b883a 	mov	r5,r6
    8680:	380d883a 	mov	r6,r7
    8684:	dfc00215 	stw	ra,8(sp)
    8688:	000db000 	call	db00 <write>
    868c:	1007883a 	mov	r3,r2
    8690:	00bfffc4 	movi	r2,-1
    8694:	18800626 	beq	r3,r2,86b0 <_write_r+0x54>
    8698:	1805883a 	mov	r2,r3
    869c:	dfc00217 	ldw	ra,8(sp)
    86a0:	dc400117 	ldw	r17,4(sp)
    86a4:	dc000017 	ldw	r16,0(sp)
    86a8:	dec00304 	addi	sp,sp,12
    86ac:	f800283a 	ret
    86b0:	80800017 	ldw	r2,0(r16)
    86b4:	103ff826 	beq	r2,zero,8698 <_write_r+0x3c>
    86b8:	88800015 	stw	r2,0(r17)
    86bc:	1805883a 	mov	r2,r3
    86c0:	dfc00217 	ldw	ra,8(sp)
    86c4:	dc400117 	ldw	r17,4(sp)
    86c8:	dc000017 	ldw	r16,0(sp)
    86cc:	dec00304 	addi	sp,sp,12
    86d0:	f800283a 	ret

000086d4 <__swsetup_r>:
    86d4:	00800074 	movhi	r2,1
    86d8:	10890804 	addi	r2,r2,9248
    86dc:	10c00017 	ldw	r3,0(r2)
    86e0:	defffd04 	addi	sp,sp,-12
    86e4:	dc400115 	stw	r17,4(sp)
    86e8:	dc000015 	stw	r16,0(sp)
    86ec:	dfc00215 	stw	ra,8(sp)
    86f0:	2023883a 	mov	r17,r4
    86f4:	2821883a 	mov	r16,r5
    86f8:	18000226 	beq	r3,zero,8704 <__swsetup_r+0x30>
    86fc:	18800e17 	ldw	r2,56(r3)
    8700:	10001f26 	beq	r2,zero,8780 <__swsetup_r+0xac>
    8704:	8100030b 	ldhu	r4,12(r16)
    8708:	2080020c 	andi	r2,r4,8
    870c:	10002826 	beq	r2,zero,87b0 <__swsetup_r+0xdc>
    8710:	81400417 	ldw	r5,16(r16)
    8714:	28001d26 	beq	r5,zero,878c <__swsetup_r+0xb8>
    8718:	2080004c 	andi	r2,r4,1
    871c:	1005003a 	cmpeq	r2,r2,zero
    8720:	10000b26 	beq	r2,zero,8750 <__swsetup_r+0x7c>
    8724:	2080008c 	andi	r2,r4,2
    8728:	10001226 	beq	r2,zero,8774 <__swsetup_r+0xa0>
    872c:	0005883a 	mov	r2,zero
    8730:	80800215 	stw	r2,8(r16)
    8734:	28000b26 	beq	r5,zero,8764 <__swsetup_r+0x90>
    8738:	0005883a 	mov	r2,zero
    873c:	dfc00217 	ldw	ra,8(sp)
    8740:	dc400117 	ldw	r17,4(sp)
    8744:	dc000017 	ldw	r16,0(sp)
    8748:	dec00304 	addi	sp,sp,12
    874c:	f800283a 	ret
    8750:	80800517 	ldw	r2,20(r16)
    8754:	80000215 	stw	zero,8(r16)
    8758:	0085c83a 	sub	r2,zero,r2
    875c:	80800615 	stw	r2,24(r16)
    8760:	283ff51e 	bne	r5,zero,8738 <__swsetup_r+0x64>
    8764:	2080200c 	andi	r2,r4,128
    8768:	103ff326 	beq	r2,zero,8738 <__swsetup_r+0x64>
    876c:	00bfffc4 	movi	r2,-1
    8770:	003ff206 	br	873c <__swsetup_r+0x68>
    8774:	80800517 	ldw	r2,20(r16)
    8778:	80800215 	stw	r2,8(r16)
    877c:	003fed06 	br	8734 <__swsetup_r+0x60>
    8780:	1809883a 	mov	r4,r3
    8784:	00043ec0 	call	43ec <__sinit>
    8788:	003fde06 	br	8704 <__swsetup_r+0x30>
    878c:	20c0a00c 	andi	r3,r4,640
    8790:	00808004 	movi	r2,512
    8794:	18bfe026 	beq	r3,r2,8718 <__swsetup_r+0x44>
    8798:	8809883a 	mov	r4,r17
    879c:	800b883a 	mov	r5,r16
    87a0:	00053e00 	call	53e0 <__smakebuf_r>
    87a4:	8100030b 	ldhu	r4,12(r16)
    87a8:	81400417 	ldw	r5,16(r16)
    87ac:	003fda06 	br	8718 <__swsetup_r+0x44>
    87b0:	2080040c 	andi	r2,r4,16
    87b4:	103fed26 	beq	r2,zero,876c <__swsetup_r+0x98>
    87b8:	2080010c 	andi	r2,r4,4
    87bc:	10001226 	beq	r2,zero,8808 <__swsetup_r+0x134>
    87c0:	81400c17 	ldw	r5,48(r16)
    87c4:	28000526 	beq	r5,zero,87dc <__swsetup_r+0x108>
    87c8:	80801004 	addi	r2,r16,64
    87cc:	28800226 	beq	r5,r2,87d8 <__swsetup_r+0x104>
    87d0:	8809883a 	mov	r4,r17
    87d4:	000499c0 	call	499c <_free_r>
    87d8:	80000c15 	stw	zero,48(r16)
    87dc:	8080030b 	ldhu	r2,12(r16)
    87e0:	81400417 	ldw	r5,16(r16)
    87e4:	80000115 	stw	zero,4(r16)
    87e8:	10bff6cc 	andi	r2,r2,65499
    87ec:	8080030d 	sth	r2,12(r16)
    87f0:	81400015 	stw	r5,0(r16)
    87f4:	8080030b 	ldhu	r2,12(r16)
    87f8:	10800214 	ori	r2,r2,8
    87fc:	113fffcc 	andi	r4,r2,65535
    8800:	8080030d 	sth	r2,12(r16)
    8804:	003fc306 	br	8714 <__swsetup_r+0x40>
    8808:	81400417 	ldw	r5,16(r16)
    880c:	003ff906 	br	87f4 <__swsetup_r+0x120>

00008810 <_close_r>:
    8810:	defffd04 	addi	sp,sp,-12
    8814:	dc000015 	stw	r16,0(sp)
    8818:	04000074 	movhi	r16,1
    881c:	8410e504 	addi	r16,r16,17300
    8820:	dc400115 	stw	r17,4(sp)
    8824:	80000015 	stw	zero,0(r16)
    8828:	2023883a 	mov	r17,r4
    882c:	2809883a 	mov	r4,r5
    8830:	dfc00215 	stw	ra,8(sp)
    8834:	000d1800 	call	d180 <close>
    8838:	1007883a 	mov	r3,r2
    883c:	00bfffc4 	movi	r2,-1
    8840:	18800626 	beq	r3,r2,885c <_close_r+0x4c>
    8844:	1805883a 	mov	r2,r3
    8848:	dfc00217 	ldw	ra,8(sp)
    884c:	dc400117 	ldw	r17,4(sp)
    8850:	dc000017 	ldw	r16,0(sp)
    8854:	dec00304 	addi	sp,sp,12
    8858:	f800283a 	ret
    885c:	80800017 	ldw	r2,0(r16)
    8860:	103ff826 	beq	r2,zero,8844 <_close_r+0x34>
    8864:	88800015 	stw	r2,0(r17)
    8868:	1805883a 	mov	r2,r3
    886c:	dfc00217 	ldw	ra,8(sp)
    8870:	dc400117 	ldw	r17,4(sp)
    8874:	dc000017 	ldw	r16,0(sp)
    8878:	dec00304 	addi	sp,sp,12
    887c:	f800283a 	ret

00008880 <quorem>:
    8880:	28c00417 	ldw	r3,16(r5)
    8884:	20800417 	ldw	r2,16(r4)
    8888:	defff604 	addi	sp,sp,-40
    888c:	ddc00715 	stw	r23,28(sp)
    8890:	dd400515 	stw	r21,20(sp)
    8894:	dfc00915 	stw	ra,36(sp)
    8898:	df000815 	stw	fp,32(sp)
    889c:	dd800615 	stw	r22,24(sp)
    88a0:	dd000415 	stw	r20,16(sp)
    88a4:	dcc00315 	stw	r19,12(sp)
    88a8:	dc800215 	stw	r18,8(sp)
    88ac:	dc400115 	stw	r17,4(sp)
    88b0:	dc000015 	stw	r16,0(sp)
    88b4:	202f883a 	mov	r23,r4
    88b8:	282b883a 	mov	r21,r5
    88bc:	10c07416 	blt	r2,r3,8a90 <quorem+0x210>
    88c0:	1c7fffc4 	addi	r17,r3,-1
    88c4:	8c45883a 	add	r2,r17,r17
    88c8:	1085883a 	add	r2,r2,r2
    88cc:	2c000504 	addi	r16,r5,20
    88d0:	24c00504 	addi	r19,r4,20
    88d4:	14ed883a 	add	r22,r2,r19
    88d8:	80a5883a 	add	r18,r16,r2
    88dc:	b7000017 	ldw	fp,0(r22)
    88e0:	91400017 	ldw	r5,0(r18)
    88e4:	e009883a 	mov	r4,fp
    88e8:	29400044 	addi	r5,r5,1
    88ec:	000d1700 	call	d170 <__udivsi3>
    88f0:	1029883a 	mov	r20,r2
    88f4:	10003c1e 	bne	r2,zero,89e8 <quorem+0x168>
    88f8:	a80b883a 	mov	r5,r21
    88fc:	b809883a 	mov	r4,r23
    8900:	000aac80 	call	aac8 <__mcmp>
    8904:	10002b16 	blt	r2,zero,89b4 <quorem+0x134>
    8908:	a5000044 	addi	r20,r20,1
    890c:	980f883a 	mov	r7,r19
    8910:	0011883a 	mov	r8,zero
    8914:	0009883a 	mov	r4,zero
    8918:	81400017 	ldw	r5,0(r16)
    891c:	38c00017 	ldw	r3,0(r7)
    8920:	84000104 	addi	r16,r16,4
    8924:	28bfffcc 	andi	r2,r5,65535
    8928:	2085883a 	add	r2,r4,r2
    892c:	11bfffcc 	andi	r6,r2,65535
    8930:	193fffcc 	andi	r4,r3,65535
    8934:	1004d43a 	srli	r2,r2,16
    8938:	280ad43a 	srli	r5,r5,16
    893c:	2189c83a 	sub	r4,r4,r6
    8940:	2209883a 	add	r4,r4,r8
    8944:	1806d43a 	srli	r3,r3,16
    8948:	288b883a 	add	r5,r5,r2
    894c:	200dd43a 	srai	r6,r4,16
    8950:	28bfffcc 	andi	r2,r5,65535
    8954:	1887c83a 	sub	r3,r3,r2
    8958:	1987883a 	add	r3,r3,r6
    895c:	3900000d 	sth	r4,0(r7)
    8960:	38c0008d 	sth	r3,2(r7)
    8964:	2808d43a 	srli	r4,r5,16
    8968:	39c00104 	addi	r7,r7,4
    896c:	1811d43a 	srai	r8,r3,16
    8970:	943fe92e 	bgeu	r18,r16,8918 <quorem+0x98>
    8974:	8c45883a 	add	r2,r17,r17
    8978:	1085883a 	add	r2,r2,r2
    897c:	9885883a 	add	r2,r19,r2
    8980:	10c00017 	ldw	r3,0(r2)
    8984:	18000b1e 	bne	r3,zero,89b4 <quorem+0x134>
    8988:	113fff04 	addi	r4,r2,-4
    898c:	9900082e 	bgeu	r19,r4,89b0 <quorem+0x130>
    8990:	10bfff17 	ldw	r2,-4(r2)
    8994:	10000326 	beq	r2,zero,89a4 <quorem+0x124>
    8998:	00000506 	br	89b0 <quorem+0x130>
    899c:	20800017 	ldw	r2,0(r4)
    89a0:	1000031e 	bne	r2,zero,89b0 <quorem+0x130>
    89a4:	213fff04 	addi	r4,r4,-4
    89a8:	8c7fffc4 	addi	r17,r17,-1
    89ac:	993ffb36 	bltu	r19,r4,899c <quorem+0x11c>
    89b0:	bc400415 	stw	r17,16(r23)
    89b4:	a005883a 	mov	r2,r20
    89b8:	dfc00917 	ldw	ra,36(sp)
    89bc:	df000817 	ldw	fp,32(sp)
    89c0:	ddc00717 	ldw	r23,28(sp)
    89c4:	dd800617 	ldw	r22,24(sp)
    89c8:	dd400517 	ldw	r21,20(sp)
    89cc:	dd000417 	ldw	r20,16(sp)
    89d0:	dcc00317 	ldw	r19,12(sp)
    89d4:	dc800217 	ldw	r18,8(sp)
    89d8:	dc400117 	ldw	r17,4(sp)
    89dc:	dc000017 	ldw	r16,0(sp)
    89e0:	dec00a04 	addi	sp,sp,40
    89e4:	f800283a 	ret
    89e8:	980f883a 	mov	r7,r19
    89ec:	8011883a 	mov	r8,r16
    89f0:	0013883a 	mov	r9,zero
    89f4:	000d883a 	mov	r6,zero
    89f8:	40c00017 	ldw	r3,0(r8)
    89fc:	39000017 	ldw	r4,0(r7)
    8a00:	42000104 	addi	r8,r8,4
    8a04:	18bfffcc 	andi	r2,r3,65535
    8a08:	a085383a 	mul	r2,r20,r2
    8a0c:	1806d43a 	srli	r3,r3,16
    8a10:	217fffcc 	andi	r5,r4,65535
    8a14:	3085883a 	add	r2,r6,r2
    8a18:	11bfffcc 	andi	r6,r2,65535
    8a1c:	a0c7383a 	mul	r3,r20,r3
    8a20:	1004d43a 	srli	r2,r2,16
    8a24:	298bc83a 	sub	r5,r5,r6
    8a28:	2a4b883a 	add	r5,r5,r9
    8a2c:	2008d43a 	srli	r4,r4,16
    8a30:	1887883a 	add	r3,r3,r2
    8a34:	280dd43a 	srai	r6,r5,16
    8a38:	18bfffcc 	andi	r2,r3,65535
    8a3c:	2089c83a 	sub	r4,r4,r2
    8a40:	2189883a 	add	r4,r4,r6
    8a44:	3900008d 	sth	r4,2(r7)
    8a48:	3940000d 	sth	r5,0(r7)
    8a4c:	180cd43a 	srli	r6,r3,16
    8a50:	39c00104 	addi	r7,r7,4
    8a54:	2013d43a 	srai	r9,r4,16
    8a58:	923fe72e 	bgeu	r18,r8,89f8 <quorem+0x178>
    8a5c:	e03fa61e 	bne	fp,zero,88f8 <quorem+0x78>
    8a60:	b0ffff04 	addi	r3,r22,-4
    8a64:	98c0082e 	bgeu	r19,r3,8a88 <quorem+0x208>
    8a68:	b0bfff17 	ldw	r2,-4(r22)
    8a6c:	10000326 	beq	r2,zero,8a7c <quorem+0x1fc>
    8a70:	00000506 	br	8a88 <quorem+0x208>
    8a74:	18800017 	ldw	r2,0(r3)
    8a78:	1000031e 	bne	r2,zero,8a88 <quorem+0x208>
    8a7c:	18ffff04 	addi	r3,r3,-4
    8a80:	8c7fffc4 	addi	r17,r17,-1
    8a84:	98fffb36 	bltu	r19,r3,8a74 <quorem+0x1f4>
    8a88:	bc400415 	stw	r17,16(r23)
    8a8c:	003f9a06 	br	88f8 <quorem+0x78>
    8a90:	0005883a 	mov	r2,zero
    8a94:	003fc806 	br	89b8 <quorem+0x138>

00008a98 <_dtoa_r>:
    8a98:	22001017 	ldw	r8,64(r4)
    8a9c:	deffda04 	addi	sp,sp,-152
    8aa0:	dd402115 	stw	r21,132(sp)
    8aa4:	dd002015 	stw	r20,128(sp)
    8aa8:	dc801e15 	stw	r18,120(sp)
    8aac:	dc401d15 	stw	r17,116(sp)
    8ab0:	dfc02515 	stw	ra,148(sp)
    8ab4:	df002415 	stw	fp,144(sp)
    8ab8:	ddc02315 	stw	r23,140(sp)
    8abc:	dd802215 	stw	r22,136(sp)
    8ac0:	dcc01f15 	stw	r19,124(sp)
    8ac4:	dc001c15 	stw	r16,112(sp)
    8ac8:	d9001615 	stw	r4,88(sp)
    8acc:	3023883a 	mov	r17,r6
    8ad0:	2829883a 	mov	r20,r5
    8ad4:	d9c01715 	stw	r7,92(sp)
    8ad8:	dc802817 	ldw	r18,160(sp)
    8adc:	302b883a 	mov	r21,r6
    8ae0:	40000a26 	beq	r8,zero,8b0c <_dtoa_r+0x74>
    8ae4:	20801117 	ldw	r2,68(r4)
    8ae8:	400b883a 	mov	r5,r8
    8aec:	40800115 	stw	r2,4(r8)
    8af0:	20c01117 	ldw	r3,68(r4)
    8af4:	00800044 	movi	r2,1
    8af8:	10c4983a 	sll	r2,r2,r3
    8afc:	40800215 	stw	r2,8(r8)
    8b00:	000a96c0 	call	a96c <_Bfree>
    8b04:	d8c01617 	ldw	r3,88(sp)
    8b08:	18001015 	stw	zero,64(r3)
    8b0c:	8800a316 	blt	r17,zero,8d9c <_dtoa_r+0x304>
    8b10:	90000015 	stw	zero,0(r18)
    8b14:	a8dffc2c 	andhi	r3,r21,32752
    8b18:	009ffc34 	movhi	r2,32752
    8b1c:	18809126 	beq	r3,r2,8d64 <_dtoa_r+0x2cc>
    8b20:	000d883a 	mov	r6,zero
    8b24:	000f883a 	mov	r7,zero
    8b28:	a009883a 	mov	r4,r20
    8b2c:	a80b883a 	mov	r5,r21
    8b30:	dd001215 	stw	r20,72(sp)
    8b34:	dd401315 	stw	r21,76(sp)
    8b38:	000cd900 	call	cd90 <__nedf2>
    8b3c:	1000171e 	bne	r2,zero,8b9c <_dtoa_r+0x104>
    8b40:	d9802717 	ldw	r6,156(sp)
    8b44:	00800044 	movi	r2,1
    8b48:	30800015 	stw	r2,0(r6)
    8b4c:	d8802917 	ldw	r2,164(sp)
    8b50:	10029b26 	beq	r2,zero,95c0 <_dtoa_r+0xb28>
    8b54:	d9002917 	ldw	r4,164(sp)
    8b58:	00800074 	movhi	r2,1
    8b5c:	10807544 	addi	r2,r2,469
    8b60:	10ffffc4 	addi	r3,r2,-1
    8b64:	20800015 	stw	r2,0(r4)
    8b68:	1805883a 	mov	r2,r3
    8b6c:	dfc02517 	ldw	ra,148(sp)
    8b70:	df002417 	ldw	fp,144(sp)
    8b74:	ddc02317 	ldw	r23,140(sp)
    8b78:	dd802217 	ldw	r22,136(sp)
    8b7c:	dd402117 	ldw	r21,132(sp)
    8b80:	dd002017 	ldw	r20,128(sp)
    8b84:	dcc01f17 	ldw	r19,124(sp)
    8b88:	dc801e17 	ldw	r18,120(sp)
    8b8c:	dc401d17 	ldw	r17,116(sp)
    8b90:	dc001c17 	ldw	r16,112(sp)
    8b94:	dec02604 	addi	sp,sp,152
    8b98:	f800283a 	ret
    8b9c:	d9001617 	ldw	r4,88(sp)
    8ba0:	d9401217 	ldw	r5,72(sp)
    8ba4:	d8800104 	addi	r2,sp,4
    8ba8:	a80d883a 	mov	r6,r21
    8bac:	d9c00204 	addi	r7,sp,8
    8bb0:	d8800015 	stw	r2,0(sp)
    8bb4:	000afa80 	call	afa8 <__d2b>
    8bb8:	d8800715 	stw	r2,28(sp)
    8bbc:	a804d53a 	srli	r2,r21,20
    8bc0:	1101ffcc 	andi	r4,r2,2047
    8bc4:	20008626 	beq	r4,zero,8de0 <_dtoa_r+0x348>
    8bc8:	d8c01217 	ldw	r3,72(sp)
    8bcc:	00800434 	movhi	r2,16
    8bd0:	10bfffc4 	addi	r2,r2,-1
    8bd4:	ddc00117 	ldw	r23,4(sp)
    8bd8:	a884703a 	and	r2,r21,r2
    8bdc:	1811883a 	mov	r8,r3
    8be0:	124ffc34 	orhi	r9,r2,16368
    8be4:	25bf0044 	addi	r22,r4,-1023
    8be8:	d8000815 	stw	zero,32(sp)
    8bec:	0005883a 	mov	r2,zero
    8bf0:	00cffe34 	movhi	r3,16376
    8bf4:	480b883a 	mov	r5,r9
    8bf8:	4009883a 	mov	r4,r8
    8bfc:	180f883a 	mov	r7,r3
    8c00:	100d883a 	mov	r6,r2
    8c04:	0002d180 	call	2d18 <__subdf3>
    8c08:	0218dbf4 	movhi	r8,25455
    8c0c:	4210d844 	addi	r8,r8,17249
    8c10:	024ff4f4 	movhi	r9,16339
    8c14:	4a61e9c4 	addi	r9,r9,-30809
    8c18:	480f883a 	mov	r7,r9
    8c1c:	400d883a 	mov	r6,r8
    8c20:	180b883a 	mov	r5,r3
    8c24:	1009883a 	mov	r4,r2
    8c28:	0002e0c0 	call	2e0c <__muldf3>
    8c2c:	0222d874 	movhi	r8,35681
    8c30:	42322cc4 	addi	r8,r8,-14157
    8c34:	024ff1f4 	movhi	r9,16327
    8c38:	4a628a04 	addi	r9,r9,-30168
    8c3c:	480f883a 	mov	r7,r9
    8c40:	400d883a 	mov	r6,r8
    8c44:	180b883a 	mov	r5,r3
    8c48:	1009883a 	mov	r4,r2
    8c4c:	0002d980 	call	2d98 <__adddf3>
    8c50:	b009883a 	mov	r4,r22
    8c54:	1021883a 	mov	r16,r2
    8c58:	1823883a 	mov	r17,r3
    8c5c:	00035380 	call	3538 <__floatsidf>
    8c60:	021427f4 	movhi	r8,20639
    8c64:	421e7ec4 	addi	r8,r8,31227
    8c68:	024ff4f4 	movhi	r9,16339
    8c6c:	4a5104c4 	addi	r9,r9,17427
    8c70:	480f883a 	mov	r7,r9
    8c74:	400d883a 	mov	r6,r8
    8c78:	180b883a 	mov	r5,r3
    8c7c:	1009883a 	mov	r4,r2
    8c80:	0002e0c0 	call	2e0c <__muldf3>
    8c84:	180f883a 	mov	r7,r3
    8c88:	880b883a 	mov	r5,r17
    8c8c:	100d883a 	mov	r6,r2
    8c90:	8009883a 	mov	r4,r16
    8c94:	0002d980 	call	2d98 <__adddf3>
    8c98:	1009883a 	mov	r4,r2
    8c9c:	180b883a 	mov	r5,r3
    8ca0:	1021883a 	mov	r16,r2
    8ca4:	1823883a 	mov	r17,r3
    8ca8:	00036300 	call	3630 <__fixdfsi>
    8cac:	000d883a 	mov	r6,zero
    8cb0:	000f883a 	mov	r7,zero
    8cb4:	8009883a 	mov	r4,r16
    8cb8:	880b883a 	mov	r5,r17
    8cbc:	d8800d15 	stw	r2,52(sp)
    8cc0:	00034b00 	call	34b0 <__ltdf2>
    8cc4:	10031716 	blt	r2,zero,9924 <_dtoa_r+0xe8c>
    8cc8:	d8c00d17 	ldw	r3,52(sp)
    8ccc:	00800584 	movi	r2,22
    8cd0:	10c1482e 	bgeu	r2,r3,91f4 <_dtoa_r+0x75c>
    8cd4:	01000044 	movi	r4,1
    8cd8:	d9000c15 	stw	r4,48(sp)
    8cdc:	bd85c83a 	sub	r2,r23,r22
    8ce0:	11bfffc4 	addi	r6,r2,-1
    8ce4:	30030b16 	blt	r6,zero,9914 <_dtoa_r+0xe7c>
    8ce8:	d9800a15 	stw	r6,40(sp)
    8cec:	d8001115 	stw	zero,68(sp)
    8cf0:	d8c00d17 	ldw	r3,52(sp)
    8cf4:	1802ff16 	blt	r3,zero,98f4 <_dtoa_r+0xe5c>
    8cf8:	d9000a17 	ldw	r4,40(sp)
    8cfc:	d8c00915 	stw	r3,36(sp)
    8d00:	d8001015 	stw	zero,64(sp)
    8d04:	20c9883a 	add	r4,r4,r3
    8d08:	d9000a15 	stw	r4,40(sp)
    8d0c:	d9001717 	ldw	r4,92(sp)
    8d10:	00800244 	movi	r2,9
    8d14:	11004636 	bltu	r2,r4,8e30 <_dtoa_r+0x398>
    8d18:	00800144 	movi	r2,5
    8d1c:	11020416 	blt	r2,r4,9530 <_dtoa_r+0xa98>
    8d20:	04400044 	movi	r17,1
    8d24:	d8c01717 	ldw	r3,92(sp)
    8d28:	00800144 	movi	r2,5
    8d2c:	10c1ed36 	bltu	r2,r3,94e4 <_dtoa_r+0xa4c>
    8d30:	18c5883a 	add	r2,r3,r3
    8d34:	1085883a 	add	r2,r2,r2
    8d38:	00c00074 	movhi	r3,1
    8d3c:	18e35304 	addi	r3,r3,-29364
    8d40:	10c5883a 	add	r2,r2,r3
    8d44:	11000017 	ldw	r4,0(r2)
    8d48:	2000683a 	jmp	r4
    8d4c:	00008e38 	rdprs	zero,zero,568
    8d50:	00008e38 	rdprs	zero,zero,568
    8d54:	00009838 	rdprs	zero,zero,608
    8d58:	00009810 	cmplti	zero,zero,608
    8d5c:	00009854 	movui	zero,609
    8d60:	00009860 	cmpeqi	zero,zero,609
    8d64:	d9002717 	ldw	r4,156(sp)
    8d68:	0089c3c4 	movi	r2,9999
    8d6c:	20800015 	stw	r2,0(r4)
    8d70:	a0001026 	beq	r20,zero,8db4 <_dtoa_r+0x31c>
    8d74:	00c00074 	movhi	r3,1
    8d78:	18c08104 	addi	r3,r3,516
    8d7c:	d9802917 	ldw	r6,164(sp)
    8d80:	303f7926 	beq	r6,zero,8b68 <_dtoa_r+0xd0>
    8d84:	188000c7 	ldb	r2,3(r3)
    8d88:	190000c4 	addi	r4,r3,3
    8d8c:	1000101e 	bne	r2,zero,8dd0 <_dtoa_r+0x338>
    8d90:	d8802917 	ldw	r2,164(sp)
    8d94:	11000015 	stw	r4,0(r2)
    8d98:	003f7306 	br	8b68 <_dtoa_r+0xd0>
    8d9c:	00a00034 	movhi	r2,32768
    8da0:	10bfffc4 	addi	r2,r2,-1
    8da4:	00c00044 	movi	r3,1
    8da8:	88aa703a 	and	r21,r17,r2
    8dac:	90c00015 	stw	r3,0(r18)
    8db0:	003f5806 	br	8b14 <_dtoa_r+0x7c>
    8db4:	00800434 	movhi	r2,16
    8db8:	10bfffc4 	addi	r2,r2,-1
    8dbc:	a884703a 	and	r2,r21,r2
    8dc0:	103fec1e 	bne	r2,zero,8d74 <_dtoa_r+0x2dc>
    8dc4:	00c00074 	movhi	r3,1
    8dc8:	18c07e04 	addi	r3,r3,504
    8dcc:	003feb06 	br	8d7c <_dtoa_r+0x2e4>
    8dd0:	d8802917 	ldw	r2,164(sp)
    8dd4:	19000204 	addi	r4,r3,8
    8dd8:	11000015 	stw	r4,0(r2)
    8ddc:	003f6206 	br	8b68 <_dtoa_r+0xd0>
    8de0:	ddc00117 	ldw	r23,4(sp)
    8de4:	d8800217 	ldw	r2,8(sp)
    8de8:	01000804 	movi	r4,32
    8dec:	b8c10c84 	addi	r3,r23,1074
    8df0:	18a3883a 	add	r17,r3,r2
    8df4:	2441b80e 	bge	r4,r17,94d8 <_dtoa_r+0xa40>
    8df8:	00c01004 	movi	r3,64
    8dfc:	1c47c83a 	sub	r3,r3,r17
    8e00:	88bff804 	addi	r2,r17,-32
    8e04:	a8c6983a 	sll	r3,r21,r3
    8e08:	a084d83a 	srl	r2,r20,r2
    8e0c:	1888b03a 	or	r4,r3,r2
    8e10:	000cea00 	call	cea0 <__floatunsidf>
    8e14:	1011883a 	mov	r8,r2
    8e18:	00bf8434 	movhi	r2,65040
    8e1c:	01000044 	movi	r4,1
    8e20:	10d3883a 	add	r9,r2,r3
    8e24:	8dbef344 	addi	r22,r17,-1075
    8e28:	d9000815 	stw	r4,32(sp)
    8e2c:	003f6f06 	br	8bec <_dtoa_r+0x154>
    8e30:	d8001715 	stw	zero,92(sp)
    8e34:	04400044 	movi	r17,1
    8e38:	00bfffc4 	movi	r2,-1
    8e3c:	00c00044 	movi	r3,1
    8e40:	d8800e15 	stw	r2,56(sp)
    8e44:	d8002615 	stw	zero,152(sp)
    8e48:	d8800f15 	stw	r2,60(sp)
    8e4c:	d8c00b15 	stw	r3,44(sp)
    8e50:	1021883a 	mov	r16,r2
    8e54:	d8801617 	ldw	r2,88(sp)
    8e58:	10001115 	stw	zero,68(r2)
    8e5c:	d8801617 	ldw	r2,88(sp)
    8e60:	11401117 	ldw	r5,68(r2)
    8e64:	1009883a 	mov	r4,r2
    8e68:	000aeec0 	call	aeec <_Balloc>
    8e6c:	d8c01617 	ldw	r3,88(sp)
    8e70:	d8800515 	stw	r2,20(sp)
    8e74:	18801015 	stw	r2,64(r3)
    8e78:	00800384 	movi	r2,14
    8e7c:	14006836 	bltu	r2,r16,9020 <_dtoa_r+0x588>
    8e80:	8805003a 	cmpeq	r2,r17,zero
    8e84:	1000661e 	bne	r2,zero,9020 <_dtoa_r+0x588>
    8e88:	d9000d17 	ldw	r4,52(sp)
    8e8c:	0102300e 	bge	zero,r4,9750 <_dtoa_r+0xcb8>
    8e90:	208003cc 	andi	r2,r4,15
    8e94:	100490fa 	slli	r2,r2,3
    8e98:	2025d13a 	srai	r18,r4,4
    8e9c:	00c00074 	movhi	r3,1
    8ea0:	18c09204 	addi	r3,r3,584
    8ea4:	10c5883a 	add	r2,r2,r3
    8ea8:	90c0040c 	andi	r3,r18,16
    8eac:	14000017 	ldw	r16,0(r2)
    8eb0:	14400117 	ldw	r17,4(r2)
    8eb4:	18036a1e 	bne	r3,zero,9c60 <_dtoa_r+0x11c8>
    8eb8:	05800084 	movi	r22,2
    8ebc:	90001026 	beq	r18,zero,8f00 <_dtoa_r+0x468>
    8ec0:	04c00074 	movhi	r19,1
    8ec4:	9cc0c404 	addi	r19,r19,784
    8ec8:	9080004c 	andi	r2,r18,1
    8ecc:	1005003a 	cmpeq	r2,r2,zero
    8ed0:	1000081e 	bne	r2,zero,8ef4 <_dtoa_r+0x45c>
    8ed4:	99800017 	ldw	r6,0(r19)
    8ed8:	99c00117 	ldw	r7,4(r19)
    8edc:	880b883a 	mov	r5,r17
    8ee0:	8009883a 	mov	r4,r16
    8ee4:	0002e0c0 	call	2e0c <__muldf3>
    8ee8:	1021883a 	mov	r16,r2
    8eec:	b5800044 	addi	r22,r22,1
    8ef0:	1823883a 	mov	r17,r3
    8ef4:	9025d07a 	srai	r18,r18,1
    8ef8:	9cc00204 	addi	r19,r19,8
    8efc:	903ff21e 	bne	r18,zero,8ec8 <_dtoa_r+0x430>
    8f00:	a80b883a 	mov	r5,r21
    8f04:	a009883a 	mov	r4,r20
    8f08:	880f883a 	mov	r7,r17
    8f0c:	800d883a 	mov	r6,r16
    8f10:	00031d00 	call	31d0 <__divdf3>
    8f14:	1029883a 	mov	r20,r2
    8f18:	182b883a 	mov	r21,r3
    8f1c:	d8c00c17 	ldw	r3,48(sp)
    8f20:	1805003a 	cmpeq	r2,r3,zero
    8f24:	1000081e 	bne	r2,zero,8f48 <_dtoa_r+0x4b0>
    8f28:	0005883a 	mov	r2,zero
    8f2c:	00cffc34 	movhi	r3,16368
    8f30:	180f883a 	mov	r7,r3
    8f34:	a009883a 	mov	r4,r20
    8f38:	a80b883a 	mov	r5,r21
    8f3c:	100d883a 	mov	r6,r2
    8f40:	00034b00 	call	34b0 <__ltdf2>
    8f44:	1003fe16 	blt	r2,zero,9f40 <_dtoa_r+0x14a8>
    8f48:	b009883a 	mov	r4,r22
    8f4c:	00035380 	call	3538 <__floatsidf>
    8f50:	180b883a 	mov	r5,r3
    8f54:	1009883a 	mov	r4,r2
    8f58:	a00d883a 	mov	r6,r20
    8f5c:	a80f883a 	mov	r7,r21
    8f60:	0002e0c0 	call	2e0c <__muldf3>
    8f64:	0011883a 	mov	r8,zero
    8f68:	02500734 	movhi	r9,16412
    8f6c:	1009883a 	mov	r4,r2
    8f70:	180b883a 	mov	r5,r3
    8f74:	480f883a 	mov	r7,r9
    8f78:	400d883a 	mov	r6,r8
    8f7c:	0002d980 	call	2d98 <__adddf3>
    8f80:	d9000f17 	ldw	r4,60(sp)
    8f84:	102d883a 	mov	r22,r2
    8f88:	00bf3034 	movhi	r2,64704
    8f8c:	18b9883a 	add	fp,r3,r2
    8f90:	e02f883a 	mov	r23,fp
    8f94:	20028f1e 	bne	r4,zero,99d4 <_dtoa_r+0xf3c>
    8f98:	0005883a 	mov	r2,zero
    8f9c:	00d00534 	movhi	r3,16404
    8fa0:	a009883a 	mov	r4,r20
    8fa4:	a80b883a 	mov	r5,r21
    8fa8:	180f883a 	mov	r7,r3
    8fac:	100d883a 	mov	r6,r2
    8fb0:	0002d180 	call	2d18 <__subdf3>
    8fb4:	1009883a 	mov	r4,r2
    8fb8:	e00f883a 	mov	r7,fp
    8fbc:	180b883a 	mov	r5,r3
    8fc0:	b00d883a 	mov	r6,r22
    8fc4:	1025883a 	mov	r18,r2
    8fc8:	1827883a 	mov	r19,r3
    8fcc:	00034280 	call	3428 <__gtdf2>
    8fd0:	00834f16 	blt	zero,r2,9d10 <_dtoa_r+0x1278>
    8fd4:	e0e0003c 	xorhi	r3,fp,32768
    8fd8:	9009883a 	mov	r4,r18
    8fdc:	980b883a 	mov	r5,r19
    8fe0:	180f883a 	mov	r7,r3
    8fe4:	b00d883a 	mov	r6,r22
    8fe8:	00034b00 	call	34b0 <__ltdf2>
    8fec:	1000080e 	bge	r2,zero,9010 <_dtoa_r+0x578>
    8ff0:	0027883a 	mov	r19,zero
    8ff4:	0025883a 	mov	r18,zero
    8ff8:	d8802617 	ldw	r2,152(sp)
    8ffc:	df000517 	ldw	fp,20(sp)
    9000:	d8000615 	stw	zero,24(sp)
    9004:	0084303a 	nor	r2,zero,r2
    9008:	d8800d15 	stw	r2,52(sp)
    900c:	00019b06 	br	967c <_dtoa_r+0xbe4>
    9010:	d9801217 	ldw	r6,72(sp)
    9014:	d8801317 	ldw	r2,76(sp)
    9018:	3029883a 	mov	r20,r6
    901c:	102b883a 	mov	r21,r2
    9020:	d8c00217 	ldw	r3,8(sp)
    9024:	18008516 	blt	r3,zero,923c <_dtoa_r+0x7a4>
    9028:	d9000d17 	ldw	r4,52(sp)
    902c:	00800384 	movi	r2,14
    9030:	11008216 	blt	r2,r4,923c <_dtoa_r+0x7a4>
    9034:	200490fa 	slli	r2,r4,3
    9038:	d9802617 	ldw	r6,152(sp)
    903c:	00c00074 	movhi	r3,1
    9040:	18c09204 	addi	r3,r3,584
    9044:	10c5883a 	add	r2,r2,r3
    9048:	14800017 	ldw	r18,0(r2)
    904c:	14c00117 	ldw	r19,4(r2)
    9050:	30031e16 	blt	r6,zero,9ccc <_dtoa_r+0x1234>
    9054:	d9000517 	ldw	r4,20(sp)
    9058:	d8c00f17 	ldw	r3,60(sp)
    905c:	a823883a 	mov	r17,r21
    9060:	a021883a 	mov	r16,r20
    9064:	192b883a 	add	r21,r3,r4
    9068:	2039883a 	mov	fp,r4
    906c:	00000f06 	br	90ac <_dtoa_r+0x614>
    9070:	0005883a 	mov	r2,zero
    9074:	00d00934 	movhi	r3,16420
    9078:	5009883a 	mov	r4,r10
    907c:	580b883a 	mov	r5,r11
    9080:	180f883a 	mov	r7,r3
    9084:	100d883a 	mov	r6,r2
    9088:	0002e0c0 	call	2e0c <__muldf3>
    908c:	180b883a 	mov	r5,r3
    9090:	000d883a 	mov	r6,zero
    9094:	000f883a 	mov	r7,zero
    9098:	1009883a 	mov	r4,r2
    909c:	1021883a 	mov	r16,r2
    90a0:	1823883a 	mov	r17,r3
    90a4:	000cd900 	call	cd90 <__nedf2>
    90a8:	10004526 	beq	r2,zero,91c0 <_dtoa_r+0x728>
    90ac:	900d883a 	mov	r6,r18
    90b0:	980f883a 	mov	r7,r19
    90b4:	8009883a 	mov	r4,r16
    90b8:	880b883a 	mov	r5,r17
    90bc:	00031d00 	call	31d0 <__divdf3>
    90c0:	180b883a 	mov	r5,r3
    90c4:	1009883a 	mov	r4,r2
    90c8:	00036300 	call	3630 <__fixdfsi>
    90cc:	1009883a 	mov	r4,r2
    90d0:	1029883a 	mov	r20,r2
    90d4:	00035380 	call	3538 <__floatsidf>
    90d8:	180f883a 	mov	r7,r3
    90dc:	9009883a 	mov	r4,r18
    90e0:	980b883a 	mov	r5,r19
    90e4:	100d883a 	mov	r6,r2
    90e8:	0002e0c0 	call	2e0c <__muldf3>
    90ec:	180f883a 	mov	r7,r3
    90f0:	880b883a 	mov	r5,r17
    90f4:	8009883a 	mov	r4,r16
    90f8:	100d883a 	mov	r6,r2
    90fc:	0002d180 	call	2d18 <__subdf3>
    9100:	1015883a 	mov	r10,r2
    9104:	a0800c04 	addi	r2,r20,48
    9108:	e0800005 	stb	r2,0(fp)
    910c:	e7000044 	addi	fp,fp,1
    9110:	1817883a 	mov	r11,r3
    9114:	e57fd61e 	bne	fp,r21,9070 <_dtoa_r+0x5d8>
    9118:	500d883a 	mov	r6,r10
    911c:	180f883a 	mov	r7,r3
    9120:	5009883a 	mov	r4,r10
    9124:	180b883a 	mov	r5,r3
    9128:	0002d980 	call	2d98 <__adddf3>
    912c:	100d883a 	mov	r6,r2
    9130:	9009883a 	mov	r4,r18
    9134:	980b883a 	mov	r5,r19
    9138:	180f883a 	mov	r7,r3
    913c:	1021883a 	mov	r16,r2
    9140:	1823883a 	mov	r17,r3
    9144:	00034b00 	call	34b0 <__ltdf2>
    9148:	10000816 	blt	r2,zero,916c <_dtoa_r+0x6d4>
    914c:	980b883a 	mov	r5,r19
    9150:	800d883a 	mov	r6,r16
    9154:	880f883a 	mov	r7,r17
    9158:	9009883a 	mov	r4,r18
    915c:	000cd080 	call	cd08 <__eqdf2>
    9160:	1000171e 	bne	r2,zero,91c0 <_dtoa_r+0x728>
    9164:	a080004c 	andi	r2,r20,1
    9168:	10001526 	beq	r2,zero,91c0 <_dtoa_r+0x728>
    916c:	d8800d17 	ldw	r2,52(sp)
    9170:	d8800415 	stw	r2,16(sp)
    9174:	e009883a 	mov	r4,fp
    9178:	213fffc4 	addi	r4,r4,-1
    917c:	20c00007 	ldb	r3,0(r4)
    9180:	00800e44 	movi	r2,57
    9184:	1880081e 	bne	r3,r2,91a8 <_dtoa_r+0x710>
    9188:	d8800517 	ldw	r2,20(sp)
    918c:	113ffa1e 	bne	r2,r4,9178 <_dtoa_r+0x6e0>
    9190:	d8c00417 	ldw	r3,16(sp)
    9194:	d9800517 	ldw	r6,20(sp)
    9198:	00800c04 	movi	r2,48
    919c:	18c00044 	addi	r3,r3,1
    91a0:	d8c00415 	stw	r3,16(sp)
    91a4:	30800005 	stb	r2,0(r6)
    91a8:	20800003 	ldbu	r2,0(r4)
    91ac:	d8c00417 	ldw	r3,16(sp)
    91b0:	27000044 	addi	fp,r4,1
    91b4:	10800044 	addi	r2,r2,1
    91b8:	d8c00d15 	stw	r3,52(sp)
    91bc:	20800005 	stb	r2,0(r4)
    91c0:	d9001617 	ldw	r4,88(sp)
    91c4:	d9400717 	ldw	r5,28(sp)
    91c8:	000a96c0 	call	a96c <_Bfree>
    91cc:	e0000005 	stb	zero,0(fp)
    91d0:	d9800d17 	ldw	r6,52(sp)
    91d4:	d8c02717 	ldw	r3,156(sp)
    91d8:	d9002917 	ldw	r4,164(sp)
    91dc:	30800044 	addi	r2,r6,1
    91e0:	18800015 	stw	r2,0(r3)
    91e4:	20029c26 	beq	r4,zero,9c58 <_dtoa_r+0x11c0>
    91e8:	d8c00517 	ldw	r3,20(sp)
    91ec:	27000015 	stw	fp,0(r4)
    91f0:	003e5d06 	br	8b68 <_dtoa_r+0xd0>
    91f4:	d9800d17 	ldw	r6,52(sp)
    91f8:	00c00074 	movhi	r3,1
    91fc:	18c09204 	addi	r3,r3,584
    9200:	d9001217 	ldw	r4,72(sp)
    9204:	300490fa 	slli	r2,r6,3
    9208:	d9401317 	ldw	r5,76(sp)
    920c:	10c5883a 	add	r2,r2,r3
    9210:	12000017 	ldw	r8,0(r2)
    9214:	12400117 	ldw	r9,4(r2)
    9218:	400d883a 	mov	r6,r8
    921c:	480f883a 	mov	r7,r9
    9220:	00034b00 	call	34b0 <__ltdf2>
    9224:	1000030e 	bge	r2,zero,9234 <_dtoa_r+0x79c>
    9228:	d8800d17 	ldw	r2,52(sp)
    922c:	10bfffc4 	addi	r2,r2,-1
    9230:	d8800d15 	stw	r2,52(sp)
    9234:	d8000c15 	stw	zero,48(sp)
    9238:	003ea806 	br	8cdc <_dtoa_r+0x244>
    923c:	d9000b17 	ldw	r4,44(sp)
    9240:	202cc03a 	cmpne	r22,r4,zero
    9244:	b000c71e 	bne	r22,zero,9564 <_dtoa_r+0xacc>
    9248:	dc001117 	ldw	r16,68(sp)
    924c:	dc801017 	ldw	r18,64(sp)
    9250:	0027883a 	mov	r19,zero
    9254:	04000b0e 	bge	zero,r16,9284 <_dtoa_r+0x7ec>
    9258:	d8c00a17 	ldw	r3,40(sp)
    925c:	00c0090e 	bge	zero,r3,9284 <_dtoa_r+0x7ec>
    9260:	8005883a 	mov	r2,r16
    9264:	1c011316 	blt	r3,r16,96b4 <_dtoa_r+0xc1c>
    9268:	d9000a17 	ldw	r4,40(sp)
    926c:	d9801117 	ldw	r6,68(sp)
    9270:	80a1c83a 	sub	r16,r16,r2
    9274:	2089c83a 	sub	r4,r4,r2
    9278:	308dc83a 	sub	r6,r6,r2
    927c:	d9000a15 	stw	r4,40(sp)
    9280:	d9801115 	stw	r6,68(sp)
    9284:	d8801017 	ldw	r2,64(sp)
    9288:	0080150e 	bge	zero,r2,92e0 <_dtoa_r+0x848>
    928c:	d8c00b17 	ldw	r3,44(sp)
    9290:	1805003a 	cmpeq	r2,r3,zero
    9294:	1001c91e 	bne	r2,zero,99bc <_dtoa_r+0xf24>
    9298:	04800e0e 	bge	zero,r18,92d4 <_dtoa_r+0x83c>
    929c:	d9001617 	ldw	r4,88(sp)
    92a0:	980b883a 	mov	r5,r19
    92a4:	900d883a 	mov	r6,r18
    92a8:	000b7200 	call	b720 <__pow5mult>
    92ac:	d9001617 	ldw	r4,88(sp)
    92b0:	d9800717 	ldw	r6,28(sp)
    92b4:	100b883a 	mov	r5,r2
    92b8:	1027883a 	mov	r19,r2
    92bc:	000b3fc0 	call	b3fc <__multiply>
    92c0:	d9001617 	ldw	r4,88(sp)
    92c4:	d9400717 	ldw	r5,28(sp)
    92c8:	1023883a 	mov	r17,r2
    92cc:	000a96c0 	call	a96c <_Bfree>
    92d0:	dc400715 	stw	r17,28(sp)
    92d4:	d9001017 	ldw	r4,64(sp)
    92d8:	248dc83a 	sub	r6,r4,r18
    92dc:	30010e1e 	bne	r6,zero,9718 <_dtoa_r+0xc80>
    92e0:	d9001617 	ldw	r4,88(sp)
    92e4:	04400044 	movi	r17,1
    92e8:	880b883a 	mov	r5,r17
    92ec:	000b5e40 	call	b5e4 <__i2b>
    92f0:	d9800917 	ldw	r6,36(sp)
    92f4:	1025883a 	mov	r18,r2
    92f8:	0180040e 	bge	zero,r6,930c <_dtoa_r+0x874>
    92fc:	d9001617 	ldw	r4,88(sp)
    9300:	100b883a 	mov	r5,r2
    9304:	000b7200 	call	b720 <__pow5mult>
    9308:	1025883a 	mov	r18,r2
    930c:	d8801717 	ldw	r2,92(sp)
    9310:	8880f30e 	bge	r17,r2,96e0 <_dtoa_r+0xc48>
    9314:	0023883a 	mov	r17,zero
    9318:	d9800917 	ldw	r6,36(sp)
    931c:	30019e1e 	bne	r6,zero,9998 <_dtoa_r+0xf00>
    9320:	00c00044 	movi	r3,1
    9324:	d9000a17 	ldw	r4,40(sp)
    9328:	20c5883a 	add	r2,r4,r3
    932c:	10c007cc 	andi	r3,r2,31
    9330:	1800841e 	bne	r3,zero,9544 <_dtoa_r+0xaac>
    9334:	00800704 	movi	r2,28
    9338:	d9000a17 	ldw	r4,40(sp)
    933c:	d9801117 	ldw	r6,68(sp)
    9340:	80a1883a 	add	r16,r16,r2
    9344:	2089883a 	add	r4,r4,r2
    9348:	308d883a 	add	r6,r6,r2
    934c:	d9000a15 	stw	r4,40(sp)
    9350:	d9801115 	stw	r6,68(sp)
    9354:	d8801117 	ldw	r2,68(sp)
    9358:	0080050e 	bge	zero,r2,9370 <_dtoa_r+0x8d8>
    935c:	d9400717 	ldw	r5,28(sp)
    9360:	d9001617 	ldw	r4,88(sp)
    9364:	100d883a 	mov	r6,r2
    9368:	000b2b00 	call	b2b0 <__lshift>
    936c:	d8800715 	stw	r2,28(sp)
    9370:	d8c00a17 	ldw	r3,40(sp)
    9374:	00c0050e 	bge	zero,r3,938c <_dtoa_r+0x8f4>
    9378:	d9001617 	ldw	r4,88(sp)
    937c:	900b883a 	mov	r5,r18
    9380:	180d883a 	mov	r6,r3
    9384:	000b2b00 	call	b2b0 <__lshift>
    9388:	1025883a 	mov	r18,r2
    938c:	d9000c17 	ldw	r4,48(sp)
    9390:	2005003a 	cmpeq	r2,r4,zero
    9394:	10016f26 	beq	r2,zero,9954 <_dtoa_r+0xebc>
    9398:	d9000f17 	ldw	r4,60(sp)
    939c:	0102170e 	bge	zero,r4,9bfc <_dtoa_r+0x1164>
    93a0:	d9800b17 	ldw	r6,44(sp)
    93a4:	3005003a 	cmpeq	r2,r6,zero
    93a8:	1000881e 	bne	r2,zero,95cc <_dtoa_r+0xb34>
    93ac:	0400050e 	bge	zero,r16,93c4 <_dtoa_r+0x92c>
    93b0:	d9001617 	ldw	r4,88(sp)
    93b4:	980b883a 	mov	r5,r19
    93b8:	800d883a 	mov	r6,r16
    93bc:	000b2b00 	call	b2b0 <__lshift>
    93c0:	1027883a 	mov	r19,r2
    93c4:	8804c03a 	cmpne	r2,r17,zero
    93c8:	1002541e 	bne	r2,zero,9d1c <_dtoa_r+0x1284>
    93cc:	980b883a 	mov	r5,r19
    93d0:	dd800517 	ldw	r22,20(sp)
    93d4:	dcc00615 	stw	r19,24(sp)
    93d8:	a700004c 	andi	fp,r20,1
    93dc:	2827883a 	mov	r19,r5
    93e0:	d9000717 	ldw	r4,28(sp)
    93e4:	900b883a 	mov	r5,r18
    93e8:	00088800 	call	8880 <quorem>
    93ec:	d9000717 	ldw	r4,28(sp)
    93f0:	d9400617 	ldw	r5,24(sp)
    93f4:	1023883a 	mov	r17,r2
    93f8:	8dc00c04 	addi	r23,r17,48
    93fc:	000aac80 	call	aac8 <__mcmp>
    9400:	d9001617 	ldw	r4,88(sp)
    9404:	900b883a 	mov	r5,r18
    9408:	980d883a 	mov	r6,r19
    940c:	1029883a 	mov	r20,r2
    9410:	000b1240 	call	b124 <__mdiff>
    9414:	102b883a 	mov	r21,r2
    9418:	10800317 	ldw	r2,12(r2)
    941c:	1001281e 	bne	r2,zero,98c0 <_dtoa_r+0xe28>
    9420:	d9000717 	ldw	r4,28(sp)
    9424:	a80b883a 	mov	r5,r21
    9428:	000aac80 	call	aac8 <__mcmp>
    942c:	d9001617 	ldw	r4,88(sp)
    9430:	1021883a 	mov	r16,r2
    9434:	a80b883a 	mov	r5,r21
    9438:	000a96c0 	call	a96c <_Bfree>
    943c:	8000041e 	bne	r16,zero,9450 <_dtoa_r+0x9b8>
    9440:	d8801717 	ldw	r2,92(sp)
    9444:	1000021e 	bne	r2,zero,9450 <_dtoa_r+0x9b8>
    9448:	e004c03a 	cmpne	r2,fp,zero
    944c:	10011726 	beq	r2,zero,98ac <_dtoa_r+0xe14>
    9450:	a0010616 	blt	r20,zero,986c <_dtoa_r+0xdd4>
    9454:	a000041e 	bne	r20,zero,9468 <_dtoa_r+0x9d0>
    9458:	d8c01717 	ldw	r3,92(sp)
    945c:	1800021e 	bne	r3,zero,9468 <_dtoa_r+0x9d0>
    9460:	e004c03a 	cmpne	r2,fp,zero
    9464:	10010126 	beq	r2,zero,986c <_dtoa_r+0xdd4>
    9468:	04023d16 	blt	zero,r16,9d60 <_dtoa_r+0x12c8>
    946c:	b5c00005 	stb	r23,0(r22)
    9470:	d9800517 	ldw	r6,20(sp)
    9474:	d9000f17 	ldw	r4,60(sp)
    9478:	b5800044 	addi	r22,r22,1
    947c:	3105883a 	add	r2,r6,r4
    9480:	b0806526 	beq	r22,r2,9618 <_dtoa_r+0xb80>
    9484:	d9400717 	ldw	r5,28(sp)
    9488:	d9001617 	ldw	r4,88(sp)
    948c:	01800284 	movi	r6,10
    9490:	000f883a 	mov	r7,zero
    9494:	000b6200 	call	b620 <__multadd>
    9498:	d8800715 	stw	r2,28(sp)
    949c:	d8800617 	ldw	r2,24(sp)
    94a0:	14c10c26 	beq	r2,r19,98d4 <_dtoa_r+0xe3c>
    94a4:	d9400617 	ldw	r5,24(sp)
    94a8:	d9001617 	ldw	r4,88(sp)
    94ac:	01800284 	movi	r6,10
    94b0:	000f883a 	mov	r7,zero
    94b4:	000b6200 	call	b620 <__multadd>
    94b8:	d9001617 	ldw	r4,88(sp)
    94bc:	980b883a 	mov	r5,r19
    94c0:	01800284 	movi	r6,10
    94c4:	000f883a 	mov	r7,zero
    94c8:	d8800615 	stw	r2,24(sp)
    94cc:	000b6200 	call	b620 <__multadd>
    94d0:	1027883a 	mov	r19,r2
    94d4:	003fc206 	br	93e0 <_dtoa_r+0x948>
    94d8:	2445c83a 	sub	r2,r4,r17
    94dc:	a088983a 	sll	r4,r20,r2
    94e0:	003e4b06 	br	8e10 <_dtoa_r+0x378>
    94e4:	01bfffc4 	movi	r6,-1
    94e8:	00800044 	movi	r2,1
    94ec:	d9800e15 	stw	r6,56(sp)
    94f0:	d9800f15 	stw	r6,60(sp)
    94f4:	d8800b15 	stw	r2,44(sp)
    94f8:	d8c01617 	ldw	r3,88(sp)
    94fc:	008005c4 	movi	r2,23
    9500:	18001115 	stw	zero,68(r3)
    9504:	1580082e 	bgeu	r2,r22,9528 <_dtoa_r+0xa90>
    9508:	00c00104 	movi	r3,4
    950c:	0009883a 	mov	r4,zero
    9510:	18c7883a 	add	r3,r3,r3
    9514:	18800504 	addi	r2,r3,20
    9518:	21000044 	addi	r4,r4,1
    951c:	b0bffc2e 	bgeu	r22,r2,9510 <_dtoa_r+0xa78>
    9520:	d9801617 	ldw	r6,88(sp)
    9524:	31001115 	stw	r4,68(r6)
    9528:	dc000f17 	ldw	r16,60(sp)
    952c:	003e4b06 	br	8e5c <_dtoa_r+0x3c4>
    9530:	d9801717 	ldw	r6,92(sp)
    9534:	0023883a 	mov	r17,zero
    9538:	31bfff04 	addi	r6,r6,-4
    953c:	d9801715 	stw	r6,92(sp)
    9540:	003df806 	br	8d24 <_dtoa_r+0x28c>
    9544:	00800804 	movi	r2,32
    9548:	10c9c83a 	sub	r4,r2,r3
    954c:	00c00104 	movi	r3,4
    9550:	19005a16 	blt	r3,r4,96bc <_dtoa_r+0xc24>
    9554:	008000c4 	movi	r2,3
    9558:	113f7e16 	blt	r2,r4,9354 <_dtoa_r+0x8bc>
    955c:	20800704 	addi	r2,r4,28
    9560:	003f7506 	br	9338 <_dtoa_r+0x8a0>
    9564:	d9801717 	ldw	r6,92(sp)
    9568:	00800044 	movi	r2,1
    956c:	1180a10e 	bge	r2,r6,97f4 <_dtoa_r+0xd5c>
    9570:	d9800f17 	ldw	r6,60(sp)
    9574:	d8c01017 	ldw	r3,64(sp)
    9578:	30bfffc4 	addi	r2,r6,-1
    957c:	1881c616 	blt	r3,r2,9c98 <_dtoa_r+0x1200>
    9580:	18a5c83a 	sub	r18,r3,r2
    9584:	d8800f17 	ldw	r2,60(sp)
    9588:	10026216 	blt	r2,zero,9f14 <_dtoa_r+0x147c>
    958c:	dc001117 	ldw	r16,68(sp)
    9590:	1007883a 	mov	r3,r2
    9594:	d9800a17 	ldw	r6,40(sp)
    9598:	d8801117 	ldw	r2,68(sp)
    959c:	d9001617 	ldw	r4,88(sp)
    95a0:	30cd883a 	add	r6,r6,r3
    95a4:	10c5883a 	add	r2,r2,r3
    95a8:	01400044 	movi	r5,1
    95ac:	d9800a15 	stw	r6,40(sp)
    95b0:	d8801115 	stw	r2,68(sp)
    95b4:	000b5e40 	call	b5e4 <__i2b>
    95b8:	1027883a 	mov	r19,r2
    95bc:	003f2506 	br	9254 <_dtoa_r+0x7bc>
    95c0:	00c00074 	movhi	r3,1
    95c4:	18c07504 	addi	r3,r3,468
    95c8:	003d6706 	br	8b68 <_dtoa_r+0xd0>
    95cc:	dd800517 	ldw	r22,20(sp)
    95d0:	04000044 	movi	r16,1
    95d4:	00000706 	br	95f4 <_dtoa_r+0xb5c>
    95d8:	d9400717 	ldw	r5,28(sp)
    95dc:	d9001617 	ldw	r4,88(sp)
    95e0:	01800284 	movi	r6,10
    95e4:	000f883a 	mov	r7,zero
    95e8:	000b6200 	call	b620 <__multadd>
    95ec:	d8800715 	stw	r2,28(sp)
    95f0:	84000044 	addi	r16,r16,1
    95f4:	d9000717 	ldw	r4,28(sp)
    95f8:	900b883a 	mov	r5,r18
    95fc:	00088800 	call	8880 <quorem>
    9600:	15c00c04 	addi	r23,r2,48
    9604:	b5c00005 	stb	r23,0(r22)
    9608:	d8c00f17 	ldw	r3,60(sp)
    960c:	b5800044 	addi	r22,r22,1
    9610:	80fff116 	blt	r16,r3,95d8 <_dtoa_r+0xb40>
    9614:	d8000615 	stw	zero,24(sp)
    9618:	d9400717 	ldw	r5,28(sp)
    961c:	d9001617 	ldw	r4,88(sp)
    9620:	01800044 	movi	r6,1
    9624:	000b2b00 	call	b2b0 <__lshift>
    9628:	1009883a 	mov	r4,r2
    962c:	900b883a 	mov	r5,r18
    9630:	d8800715 	stw	r2,28(sp)
    9634:	000aac80 	call	aac8 <__mcmp>
    9638:	00803c0e 	bge	zero,r2,972c <_dtoa_r+0xc94>
    963c:	b009883a 	mov	r4,r22
    9640:	213fffc4 	addi	r4,r4,-1
    9644:	21400003 	ldbu	r5,0(r4)
    9648:	00800e44 	movi	r2,57
    964c:	28c03fcc 	andi	r3,r5,255
    9650:	18c0201c 	xori	r3,r3,128
    9654:	18ffe004 	addi	r3,r3,-128
    9658:	1881981e 	bne	r3,r2,9cbc <_dtoa_r+0x1224>
    965c:	d9800517 	ldw	r6,20(sp)
    9660:	21bff71e 	bne	r4,r6,9640 <_dtoa_r+0xba8>
    9664:	d8800d17 	ldw	r2,52(sp)
    9668:	37000044 	addi	fp,r6,1
    966c:	10800044 	addi	r2,r2,1
    9670:	d8800d15 	stw	r2,52(sp)
    9674:	00800c44 	movi	r2,49
    9678:	30800005 	stb	r2,0(r6)
    967c:	d9001617 	ldw	r4,88(sp)
    9680:	900b883a 	mov	r5,r18
    9684:	000a96c0 	call	a96c <_Bfree>
    9688:	983ecd26 	beq	r19,zero,91c0 <_dtoa_r+0x728>
    968c:	d8c00617 	ldw	r3,24(sp)
    9690:	18000426 	beq	r3,zero,96a4 <_dtoa_r+0xc0c>
    9694:	1cc00326 	beq	r3,r19,96a4 <_dtoa_r+0xc0c>
    9698:	d9001617 	ldw	r4,88(sp)
    969c:	180b883a 	mov	r5,r3
    96a0:	000a96c0 	call	a96c <_Bfree>
    96a4:	d9001617 	ldw	r4,88(sp)
    96a8:	980b883a 	mov	r5,r19
    96ac:	000a96c0 	call	a96c <_Bfree>
    96b0:	003ec306 	br	91c0 <_dtoa_r+0x728>
    96b4:	1805883a 	mov	r2,r3
    96b8:	003eeb06 	br	9268 <_dtoa_r+0x7d0>
    96bc:	d9800a17 	ldw	r6,40(sp)
    96c0:	d8c01117 	ldw	r3,68(sp)
    96c4:	20bfff04 	addi	r2,r4,-4
    96c8:	308d883a 	add	r6,r6,r2
    96cc:	1887883a 	add	r3,r3,r2
    96d0:	80a1883a 	add	r16,r16,r2
    96d4:	d9800a15 	stw	r6,40(sp)
    96d8:	d8c01115 	stw	r3,68(sp)
    96dc:	003f1d06 	br	9354 <_dtoa_r+0x8bc>
    96e0:	a03f0c1e 	bne	r20,zero,9314 <_dtoa_r+0x87c>
    96e4:	00800434 	movhi	r2,16
    96e8:	10bfffc4 	addi	r2,r2,-1
    96ec:	a884703a 	and	r2,r21,r2
    96f0:	103f081e 	bne	r2,zero,9314 <_dtoa_r+0x87c>
    96f4:	a89ffc2c 	andhi	r2,r21,32752
    96f8:	103f0626 	beq	r2,zero,9314 <_dtoa_r+0x87c>
    96fc:	d8c01117 	ldw	r3,68(sp)
    9700:	d9000a17 	ldw	r4,40(sp)
    9704:	18c00044 	addi	r3,r3,1
    9708:	21000044 	addi	r4,r4,1
    970c:	d8c01115 	stw	r3,68(sp)
    9710:	d9000a15 	stw	r4,40(sp)
    9714:	003f0006 	br	9318 <_dtoa_r+0x880>
    9718:	d9400717 	ldw	r5,28(sp)
    971c:	d9001617 	ldw	r4,88(sp)
    9720:	000b7200 	call	b720 <__pow5mult>
    9724:	d8800715 	stw	r2,28(sp)
    9728:	003eed06 	br	92e0 <_dtoa_r+0x848>
    972c:	1000021e 	bne	r2,zero,9738 <_dtoa_r+0xca0>
    9730:	b880004c 	andi	r2,r23,1
    9734:	103fc11e 	bne	r2,zero,963c <_dtoa_r+0xba4>
    9738:	b5bfffc4 	addi	r22,r22,-1
    973c:	b0c00007 	ldb	r3,0(r22)
    9740:	00800c04 	movi	r2,48
    9744:	18bffc26 	beq	r3,r2,9738 <_dtoa_r+0xca0>
    9748:	b7000044 	addi	fp,r22,1
    974c:	003fcb06 	br	967c <_dtoa_r+0xbe4>
    9750:	d9800d17 	ldw	r6,52(sp)
    9754:	018fc83a 	sub	r7,zero,r6
    9758:	3801f726 	beq	r7,zero,9f38 <_dtoa_r+0x14a0>
    975c:	398003cc 	andi	r6,r7,15
    9760:	300c90fa 	slli	r6,r6,3
    9764:	01400074 	movhi	r5,1
    9768:	29409204 	addi	r5,r5,584
    976c:	d9001217 	ldw	r4,72(sp)
    9770:	314d883a 	add	r6,r6,r5
    9774:	30c00117 	ldw	r3,4(r6)
    9778:	30800017 	ldw	r2,0(r6)
    977c:	d9401317 	ldw	r5,76(sp)
    9780:	3821d13a 	srai	r16,r7,4
    9784:	100d883a 	mov	r6,r2
    9788:	180f883a 	mov	r7,r3
    978c:	0002e0c0 	call	2e0c <__muldf3>
    9790:	1011883a 	mov	r8,r2
    9794:	1813883a 	mov	r9,r3
    9798:	1029883a 	mov	r20,r2
    979c:	182b883a 	mov	r21,r3
    97a0:	8001e526 	beq	r16,zero,9f38 <_dtoa_r+0x14a0>
    97a4:	05800084 	movi	r22,2
    97a8:	04400074 	movhi	r17,1
    97ac:	8c40c404 	addi	r17,r17,784
    97b0:	8080004c 	andi	r2,r16,1
    97b4:	1005003a 	cmpeq	r2,r2,zero
    97b8:	1000081e 	bne	r2,zero,97dc <_dtoa_r+0xd44>
    97bc:	89800017 	ldw	r6,0(r17)
    97c0:	89c00117 	ldw	r7,4(r17)
    97c4:	480b883a 	mov	r5,r9
    97c8:	4009883a 	mov	r4,r8
    97cc:	0002e0c0 	call	2e0c <__muldf3>
    97d0:	1011883a 	mov	r8,r2
    97d4:	b5800044 	addi	r22,r22,1
    97d8:	1813883a 	mov	r9,r3
    97dc:	8021d07a 	srai	r16,r16,1
    97e0:	8c400204 	addi	r17,r17,8
    97e4:	803ff21e 	bne	r16,zero,97b0 <_dtoa_r+0xd18>
    97e8:	4029883a 	mov	r20,r8
    97ec:	482b883a 	mov	r21,r9
    97f0:	003dca06 	br	8f1c <_dtoa_r+0x484>
    97f4:	d9000817 	ldw	r4,32(sp)
    97f8:	2005003a 	cmpeq	r2,r4,zero
    97fc:	1001f61e 	bne	r2,zero,9fd8 <_dtoa_r+0x1540>
    9800:	dc001117 	ldw	r16,68(sp)
    9804:	dc801017 	ldw	r18,64(sp)
    9808:	18c10cc4 	addi	r3,r3,1075
    980c:	003f6106 	br	9594 <_dtoa_r+0xafc>
    9810:	d8000b15 	stw	zero,44(sp)
    9814:	d9802617 	ldw	r6,152(sp)
    9818:	d8c00d17 	ldw	r3,52(sp)
    981c:	30800044 	addi	r2,r6,1
    9820:	18ad883a 	add	r22,r3,r2
    9824:	b13fffc4 	addi	r4,r22,-1
    9828:	d9000e15 	stw	r4,56(sp)
    982c:	0581f60e 	bge	zero,r22,a008 <_dtoa_r+0x1570>
    9830:	dd800f15 	stw	r22,60(sp)
    9834:	003f3006 	br	94f8 <_dtoa_r+0xa60>
    9838:	d8000b15 	stw	zero,44(sp)
    983c:	d9002617 	ldw	r4,152(sp)
    9840:	0101eb0e 	bge	zero,r4,9ff0 <_dtoa_r+0x1558>
    9844:	202d883a 	mov	r22,r4
    9848:	d9000e15 	stw	r4,56(sp)
    984c:	d9000f15 	stw	r4,60(sp)
    9850:	003f2906 	br	94f8 <_dtoa_r+0xa60>
    9854:	01800044 	movi	r6,1
    9858:	d9800b15 	stw	r6,44(sp)
    985c:	003ff706 	br	983c <_dtoa_r+0xda4>
    9860:	01000044 	movi	r4,1
    9864:	d9000b15 	stw	r4,44(sp)
    9868:	003fea06 	br	9814 <_dtoa_r+0xd7c>
    986c:	04000c0e 	bge	zero,r16,98a0 <_dtoa_r+0xe08>
    9870:	d9400717 	ldw	r5,28(sp)
    9874:	d9001617 	ldw	r4,88(sp)
    9878:	01800044 	movi	r6,1
    987c:	000b2b00 	call	b2b0 <__lshift>
    9880:	1009883a 	mov	r4,r2
    9884:	900b883a 	mov	r5,r18
    9888:	d8800715 	stw	r2,28(sp)
    988c:	000aac80 	call	aac8 <__mcmp>
    9890:	0081e00e 	bge	zero,r2,a014 <_dtoa_r+0x157c>
    9894:	bdc00044 	addi	r23,r23,1
    9898:	00800e84 	movi	r2,58
    989c:	b881a226 	beq	r23,r2,9f28 <_dtoa_r+0x1490>
    98a0:	b7000044 	addi	fp,r22,1
    98a4:	b5c00005 	stb	r23,0(r22)
    98a8:	003f7406 	br	967c <_dtoa_r+0xbe4>
    98ac:	00800e44 	movi	r2,57
    98b0:	b8819d26 	beq	r23,r2,9f28 <_dtoa_r+0x1490>
    98b4:	053ffa0e 	bge	zero,r20,98a0 <_dtoa_r+0xe08>
    98b8:	8dc00c44 	addi	r23,r17,49
    98bc:	003ff806 	br	98a0 <_dtoa_r+0xe08>
    98c0:	d9001617 	ldw	r4,88(sp)
    98c4:	a80b883a 	mov	r5,r21
    98c8:	04000044 	movi	r16,1
    98cc:	000a96c0 	call	a96c <_Bfree>
    98d0:	003edf06 	br	9450 <_dtoa_r+0x9b8>
    98d4:	d9001617 	ldw	r4,88(sp)
    98d8:	980b883a 	mov	r5,r19
    98dc:	01800284 	movi	r6,10
    98e0:	000f883a 	mov	r7,zero
    98e4:	000b6200 	call	b620 <__multadd>
    98e8:	1027883a 	mov	r19,r2
    98ec:	d8800615 	stw	r2,24(sp)
    98f0:	003ebb06 	br	93e0 <_dtoa_r+0x948>
    98f4:	d9801117 	ldw	r6,68(sp)
    98f8:	d8800d17 	ldw	r2,52(sp)
    98fc:	d8000915 	stw	zero,36(sp)
    9900:	308dc83a 	sub	r6,r6,r2
    9904:	0087c83a 	sub	r3,zero,r2
    9908:	d9801115 	stw	r6,68(sp)
    990c:	d8c01015 	stw	r3,64(sp)
    9910:	003cfe06 	br	8d0c <_dtoa_r+0x274>
    9914:	018dc83a 	sub	r6,zero,r6
    9918:	d9801115 	stw	r6,68(sp)
    991c:	d8000a15 	stw	zero,40(sp)
    9920:	003cf306 	br	8cf0 <_dtoa_r+0x258>
    9924:	d9000d17 	ldw	r4,52(sp)
    9928:	00035380 	call	3538 <__floatsidf>
    992c:	880b883a 	mov	r5,r17
    9930:	8009883a 	mov	r4,r16
    9934:	180f883a 	mov	r7,r3
    9938:	100d883a 	mov	r6,r2
    993c:	000cd900 	call	cd90 <__nedf2>
    9940:	103ce126 	beq	r2,zero,8cc8 <_dtoa_r+0x230>
    9944:	d9800d17 	ldw	r6,52(sp)
    9948:	31bfffc4 	addi	r6,r6,-1
    994c:	d9800d15 	stw	r6,52(sp)
    9950:	003cdd06 	br	8cc8 <_dtoa_r+0x230>
    9954:	d9000717 	ldw	r4,28(sp)
    9958:	900b883a 	mov	r5,r18
    995c:	000aac80 	call	aac8 <__mcmp>
    9960:	103e8d0e 	bge	r2,zero,9398 <_dtoa_r+0x900>
    9964:	d9400717 	ldw	r5,28(sp)
    9968:	d9001617 	ldw	r4,88(sp)
    996c:	01800284 	movi	r6,10
    9970:	000f883a 	mov	r7,zero
    9974:	000b6200 	call	b620 <__multadd>
    9978:	d9800d17 	ldw	r6,52(sp)
    997c:	d8800715 	stw	r2,28(sp)
    9980:	31bfffc4 	addi	r6,r6,-1
    9984:	d9800d15 	stw	r6,52(sp)
    9988:	b001a71e 	bne	r22,zero,a028 <_dtoa_r+0x1590>
    998c:	d8800e17 	ldw	r2,56(sp)
    9990:	d8800f15 	stw	r2,60(sp)
    9994:	003e8006 	br	9398 <_dtoa_r+0x900>
    9998:	90800417 	ldw	r2,16(r18)
    999c:	1085883a 	add	r2,r2,r2
    99a0:	1085883a 	add	r2,r2,r2
    99a4:	1485883a 	add	r2,r2,r18
    99a8:	11000417 	ldw	r4,16(r2)
    99ac:	000a9940 	call	a994 <__hi0bits>
    99b0:	00c00804 	movi	r3,32
    99b4:	1887c83a 	sub	r3,r3,r2
    99b8:	003e5a06 	br	9324 <_dtoa_r+0x88c>
    99bc:	d9400717 	ldw	r5,28(sp)
    99c0:	d9801017 	ldw	r6,64(sp)
    99c4:	d9001617 	ldw	r4,88(sp)
    99c8:	000b7200 	call	b720 <__pow5mult>
    99cc:	d8800715 	stw	r2,28(sp)
    99d0:	003e4306 	br	92e0 <_dtoa_r+0x848>
    99d4:	d9800f17 	ldw	r6,60(sp)
    99d8:	d8800d17 	ldw	r2,52(sp)
    99dc:	d9800315 	stw	r6,12(sp)
    99e0:	d8800415 	stw	r2,16(sp)
    99e4:	d8c00b17 	ldw	r3,44(sp)
    99e8:	1805003a 	cmpeq	r2,r3,zero
    99ec:	1000e21e 	bne	r2,zero,9d78 <_dtoa_r+0x12e0>
    99f0:	d9000317 	ldw	r4,12(sp)
    99f4:	0005883a 	mov	r2,zero
    99f8:	00cff834 	movhi	r3,16352
    99fc:	200c90fa 	slli	r6,r4,3
    9a00:	01000074 	movhi	r4,1
    9a04:	21009204 	addi	r4,r4,584
    9a08:	180b883a 	mov	r5,r3
    9a0c:	310d883a 	add	r6,r6,r4
    9a10:	327fff17 	ldw	r9,-4(r6)
    9a14:	323ffe17 	ldw	r8,-8(r6)
    9a18:	1009883a 	mov	r4,r2
    9a1c:	480f883a 	mov	r7,r9
    9a20:	400d883a 	mov	r6,r8
    9a24:	00031d00 	call	31d0 <__divdf3>
    9a28:	180b883a 	mov	r5,r3
    9a2c:	b00d883a 	mov	r6,r22
    9a30:	b80f883a 	mov	r7,r23
    9a34:	1009883a 	mov	r4,r2
    9a38:	0002d180 	call	2d18 <__subdf3>
    9a3c:	a80b883a 	mov	r5,r21
    9a40:	a009883a 	mov	r4,r20
    9a44:	d8c01915 	stw	r3,100(sp)
    9a48:	d8801815 	stw	r2,96(sp)
    9a4c:	00036300 	call	3630 <__fixdfsi>
    9a50:	1009883a 	mov	r4,r2
    9a54:	1027883a 	mov	r19,r2
    9a58:	00035380 	call	3538 <__floatsidf>
    9a5c:	a80b883a 	mov	r5,r21
    9a60:	a009883a 	mov	r4,r20
    9a64:	180f883a 	mov	r7,r3
    9a68:	100d883a 	mov	r6,r2
    9a6c:	0002d180 	call	2d18 <__subdf3>
    9a70:	d9801817 	ldw	r6,96(sp)
    9a74:	1823883a 	mov	r17,r3
    9a78:	d8801415 	stw	r2,80(sp)
    9a7c:	302d883a 	mov	r22,r6
    9a80:	d9800517 	ldw	r6,20(sp)
    9a84:	9cc00c04 	addi	r19,r19,48
    9a88:	dc401515 	stw	r17,84(sp)
    9a8c:	d8c01917 	ldw	r3,100(sp)
    9a90:	34c00005 	stb	r19,0(r6)
    9a94:	d8800517 	ldw	r2,20(sp)
    9a98:	d9401917 	ldw	r5,100(sp)
    9a9c:	d9801417 	ldw	r6,80(sp)
    9aa0:	b009883a 	mov	r4,r22
    9aa4:	880f883a 	mov	r7,r17
    9aa8:	182f883a 	mov	r23,r3
    9aac:	17000044 	addi	fp,r2,1
    9ab0:	00034280 	call	3428 <__gtdf2>
    9ab4:	00804e16 	blt	zero,r2,9bf0 <_dtoa_r+0x1158>
    9ab8:	d9801417 	ldw	r6,80(sp)
    9abc:	0005883a 	mov	r2,zero
    9ac0:	00cffc34 	movhi	r3,16368
    9ac4:	180b883a 	mov	r5,r3
    9ac8:	880f883a 	mov	r7,r17
    9acc:	1009883a 	mov	r4,r2
    9ad0:	0002d180 	call	2d18 <__subdf3>
    9ad4:	d9401917 	ldw	r5,100(sp)
    9ad8:	180f883a 	mov	r7,r3
    9adc:	b009883a 	mov	r4,r22
    9ae0:	100d883a 	mov	r6,r2
    9ae4:	00034280 	call	3428 <__gtdf2>
    9ae8:	00bda216 	blt	zero,r2,9174 <_dtoa_r+0x6dc>
    9aec:	d8c00317 	ldw	r3,12(sp)
    9af0:	00800044 	movi	r2,1
    9af4:	10c01216 	blt	r2,r3,9b40 <_dtoa_r+0x10a8>
    9af8:	003d4506 	br	9010 <_dtoa_r+0x578>
    9afc:	d9801417 	ldw	r6,80(sp)
    9b00:	0005883a 	mov	r2,zero
    9b04:	00cffc34 	movhi	r3,16368
    9b08:	180b883a 	mov	r5,r3
    9b0c:	880f883a 	mov	r7,r17
    9b10:	1009883a 	mov	r4,r2
    9b14:	0002d180 	call	2d18 <__subdf3>
    9b18:	d9c01b17 	ldw	r7,108(sp)
    9b1c:	180b883a 	mov	r5,r3
    9b20:	1009883a 	mov	r4,r2
    9b24:	b00d883a 	mov	r6,r22
    9b28:	00034b00 	call	34b0 <__ltdf2>
    9b2c:	103d9116 	blt	r2,zero,9174 <_dtoa_r+0x6dc>
    9b30:	d9800517 	ldw	r6,20(sp)
    9b34:	d9000317 	ldw	r4,12(sp)
    9b38:	3105883a 	add	r2,r6,r4
    9b3c:	e0bd3426 	beq	fp,r2,9010 <_dtoa_r+0x578>
    9b40:	04500934 	movhi	r17,16420
    9b44:	0021883a 	mov	r16,zero
    9b48:	b80b883a 	mov	r5,r23
    9b4c:	b009883a 	mov	r4,r22
    9b50:	800d883a 	mov	r6,r16
    9b54:	880f883a 	mov	r7,r17
    9b58:	0002e0c0 	call	2e0c <__muldf3>
    9b5c:	d9401517 	ldw	r5,84(sp)
    9b60:	d9001417 	ldw	r4,80(sp)
    9b64:	880f883a 	mov	r7,r17
    9b68:	000d883a 	mov	r6,zero
    9b6c:	d8801a15 	stw	r2,104(sp)
    9b70:	d8c01b15 	stw	r3,108(sp)
    9b74:	0002e0c0 	call	2e0c <__muldf3>
    9b78:	180b883a 	mov	r5,r3
    9b7c:	1009883a 	mov	r4,r2
    9b80:	1823883a 	mov	r17,r3
    9b84:	1021883a 	mov	r16,r2
    9b88:	00036300 	call	3630 <__fixdfsi>
    9b8c:	1009883a 	mov	r4,r2
    9b90:	102b883a 	mov	r21,r2
    9b94:	00035380 	call	3538 <__floatsidf>
    9b98:	880b883a 	mov	r5,r17
    9b9c:	8009883a 	mov	r4,r16
    9ba0:	180f883a 	mov	r7,r3
    9ba4:	100d883a 	mov	r6,r2
    9ba8:	0002d180 	call	2d18 <__subdf3>
    9bac:	1021883a 	mov	r16,r2
    9bb0:	d9001b17 	ldw	r4,108(sp)
    9bb4:	1823883a 	mov	r17,r3
    9bb8:	dc001415 	stw	r16,80(sp)
    9bbc:	ad400c04 	addi	r21,r21,48
    9bc0:	dc401515 	stw	r17,84(sp)
    9bc4:	d8801a17 	ldw	r2,104(sp)
    9bc8:	e5400005 	stb	r21,0(fp)
    9bcc:	202f883a 	mov	r23,r4
    9bd0:	d9c01b17 	ldw	r7,108(sp)
    9bd4:	d9001417 	ldw	r4,80(sp)
    9bd8:	880b883a 	mov	r5,r17
    9bdc:	100d883a 	mov	r6,r2
    9be0:	102d883a 	mov	r22,r2
    9be4:	e7000044 	addi	fp,fp,1
    9be8:	00034b00 	call	34b0 <__ltdf2>
    9bec:	103fc30e 	bge	r2,zero,9afc <_dtoa_r+0x1064>
    9bf0:	d9000417 	ldw	r4,16(sp)
    9bf4:	d9000d15 	stw	r4,52(sp)
    9bf8:	003d7106 	br	91c0 <_dtoa_r+0x728>
    9bfc:	d9801717 	ldw	r6,92(sp)
    9c00:	00800084 	movi	r2,2
    9c04:	11bde60e 	bge	r2,r6,93a0 <_dtoa_r+0x908>
    9c08:	203cfb1e 	bne	r4,zero,8ff8 <_dtoa_r+0x560>
    9c0c:	d9001617 	ldw	r4,88(sp)
    9c10:	900b883a 	mov	r5,r18
    9c14:	01800144 	movi	r6,5
    9c18:	000f883a 	mov	r7,zero
    9c1c:	000b6200 	call	b620 <__multadd>
    9c20:	d9000717 	ldw	r4,28(sp)
    9c24:	100b883a 	mov	r5,r2
    9c28:	1025883a 	mov	r18,r2
    9c2c:	000aac80 	call	aac8 <__mcmp>
    9c30:	00bcf10e 	bge	zero,r2,8ff8 <_dtoa_r+0x560>
    9c34:	d8c00d17 	ldw	r3,52(sp)
    9c38:	d9000517 	ldw	r4,20(sp)
    9c3c:	d8000615 	stw	zero,24(sp)
    9c40:	18c00044 	addi	r3,r3,1
    9c44:	d8c00d15 	stw	r3,52(sp)
    9c48:	00800c44 	movi	r2,49
    9c4c:	27000044 	addi	fp,r4,1
    9c50:	20800005 	stb	r2,0(r4)
    9c54:	003e8906 	br	967c <_dtoa_r+0xbe4>
    9c58:	d8c00517 	ldw	r3,20(sp)
    9c5c:	003bc206 	br	8b68 <_dtoa_r+0xd0>
    9c60:	01800074 	movhi	r6,1
    9c64:	3180c404 	addi	r6,r6,784
    9c68:	30c00917 	ldw	r3,36(r6)
    9c6c:	30800817 	ldw	r2,32(r6)
    9c70:	d9001217 	ldw	r4,72(sp)
    9c74:	d9401317 	ldw	r5,76(sp)
    9c78:	180f883a 	mov	r7,r3
    9c7c:	100d883a 	mov	r6,r2
    9c80:	00031d00 	call	31d0 <__divdf3>
    9c84:	948003cc 	andi	r18,r18,15
    9c88:	058000c4 	movi	r22,3
    9c8c:	1029883a 	mov	r20,r2
    9c90:	182b883a 	mov	r21,r3
    9c94:	003c8906 	br	8ebc <_dtoa_r+0x424>
    9c98:	d9001017 	ldw	r4,64(sp)
    9c9c:	d9800917 	ldw	r6,36(sp)
    9ca0:	0025883a 	mov	r18,zero
    9ca4:	1105c83a 	sub	r2,r2,r4
    9ca8:	2089883a 	add	r4,r4,r2
    9cac:	308d883a 	add	r6,r6,r2
    9cb0:	d9001015 	stw	r4,64(sp)
    9cb4:	d9800915 	stw	r6,36(sp)
    9cb8:	003e3206 	br	9584 <_dtoa_r+0xaec>
    9cbc:	28800044 	addi	r2,r5,1
    9cc0:	27000044 	addi	fp,r4,1
    9cc4:	20800005 	stb	r2,0(r4)
    9cc8:	003e6c06 	br	967c <_dtoa_r+0xbe4>
    9ccc:	d8800f17 	ldw	r2,60(sp)
    9cd0:	00bce016 	blt	zero,r2,9054 <_dtoa_r+0x5bc>
    9cd4:	d9800f17 	ldw	r6,60(sp)
    9cd8:	303cc51e 	bne	r6,zero,8ff0 <_dtoa_r+0x558>
    9cdc:	0005883a 	mov	r2,zero
    9ce0:	00d00534 	movhi	r3,16404
    9ce4:	980b883a 	mov	r5,r19
    9ce8:	180f883a 	mov	r7,r3
    9cec:	9009883a 	mov	r4,r18
    9cf0:	100d883a 	mov	r6,r2
    9cf4:	0002e0c0 	call	2e0c <__muldf3>
    9cf8:	180b883a 	mov	r5,r3
    9cfc:	a80f883a 	mov	r7,r21
    9d00:	1009883a 	mov	r4,r2
    9d04:	a00d883a 	mov	r6,r20
    9d08:	000ce180 	call	ce18 <__gedf2>
    9d0c:	103cb80e 	bge	r2,zero,8ff0 <_dtoa_r+0x558>
    9d10:	0027883a 	mov	r19,zero
    9d14:	0025883a 	mov	r18,zero
    9d18:	003fc606 	br	9c34 <_dtoa_r+0x119c>
    9d1c:	99400117 	ldw	r5,4(r19)
    9d20:	d9001617 	ldw	r4,88(sp)
    9d24:	000aeec0 	call	aeec <_Balloc>
    9d28:	99800417 	ldw	r6,16(r19)
    9d2c:	11000304 	addi	r4,r2,12
    9d30:	99400304 	addi	r5,r19,12
    9d34:	318d883a 	add	r6,r6,r6
    9d38:	318d883a 	add	r6,r6,r6
    9d3c:	31800204 	addi	r6,r6,8
    9d40:	1023883a 	mov	r17,r2
    9d44:	0005cb40 	call	5cb4 <memcpy>
    9d48:	d9001617 	ldw	r4,88(sp)
    9d4c:	880b883a 	mov	r5,r17
    9d50:	01800044 	movi	r6,1
    9d54:	000b2b00 	call	b2b0 <__lshift>
    9d58:	100b883a 	mov	r5,r2
    9d5c:	003d9c06 	br	93d0 <_dtoa_r+0x938>
    9d60:	00800e44 	movi	r2,57
    9d64:	b8807026 	beq	r23,r2,9f28 <_dtoa_r+0x1490>
    9d68:	b8800044 	addi	r2,r23,1
    9d6c:	b7000044 	addi	fp,r22,1
    9d70:	b0800005 	stb	r2,0(r22)
    9d74:	003e4106 	br	967c <_dtoa_r+0xbe4>
    9d78:	d8800317 	ldw	r2,12(sp)
    9d7c:	01800074 	movhi	r6,1
    9d80:	31809204 	addi	r6,r6,584
    9d84:	b009883a 	mov	r4,r22
    9d88:	100e90fa 	slli	r7,r2,3
    9d8c:	b80b883a 	mov	r5,r23
    9d90:	398f883a 	add	r7,r7,r6
    9d94:	38bffe17 	ldw	r2,-8(r7)
    9d98:	d9800517 	ldw	r6,20(sp)
    9d9c:	38ffff17 	ldw	r3,-4(r7)
    9da0:	37000044 	addi	fp,r6,1
    9da4:	180f883a 	mov	r7,r3
    9da8:	100d883a 	mov	r6,r2
    9dac:	0002e0c0 	call	2e0c <__muldf3>
    9db0:	a80b883a 	mov	r5,r21
    9db4:	a009883a 	mov	r4,r20
    9db8:	182f883a 	mov	r23,r3
    9dbc:	102d883a 	mov	r22,r2
    9dc0:	00036300 	call	3630 <__fixdfsi>
    9dc4:	1009883a 	mov	r4,r2
    9dc8:	1027883a 	mov	r19,r2
    9dcc:	00035380 	call	3538 <__floatsidf>
    9dd0:	a80b883a 	mov	r5,r21
    9dd4:	a009883a 	mov	r4,r20
    9dd8:	180f883a 	mov	r7,r3
    9ddc:	100d883a 	mov	r6,r2
    9de0:	0002d180 	call	2d18 <__subdf3>
    9de4:	180b883a 	mov	r5,r3
    9de8:	d8c00517 	ldw	r3,20(sp)
    9dec:	9cc00c04 	addi	r19,r19,48
    9df0:	1009883a 	mov	r4,r2
    9df4:	1cc00005 	stb	r19,0(r3)
    9df8:	2021883a 	mov	r16,r4
    9dfc:	d9000317 	ldw	r4,12(sp)
    9e00:	00800044 	movi	r2,1
    9e04:	2823883a 	mov	r17,r5
    9e08:	20802226 	beq	r4,r2,9e94 <_dtoa_r+0x13fc>
    9e0c:	1029883a 	mov	r20,r2
    9e10:	0005883a 	mov	r2,zero
    9e14:	00d00934 	movhi	r3,16420
    9e18:	180f883a 	mov	r7,r3
    9e1c:	100d883a 	mov	r6,r2
    9e20:	880b883a 	mov	r5,r17
    9e24:	8009883a 	mov	r4,r16
    9e28:	0002e0c0 	call	2e0c <__muldf3>
    9e2c:	180b883a 	mov	r5,r3
    9e30:	1009883a 	mov	r4,r2
    9e34:	1823883a 	mov	r17,r3
    9e38:	1021883a 	mov	r16,r2
    9e3c:	00036300 	call	3630 <__fixdfsi>
    9e40:	1009883a 	mov	r4,r2
    9e44:	102b883a 	mov	r21,r2
    9e48:	00035380 	call	3538 <__floatsidf>
    9e4c:	880b883a 	mov	r5,r17
    9e50:	8009883a 	mov	r4,r16
    9e54:	180f883a 	mov	r7,r3
    9e58:	100d883a 	mov	r6,r2
    9e5c:	0002d180 	call	2d18 <__subdf3>
    9e60:	180b883a 	mov	r5,r3
    9e64:	d8c00517 	ldw	r3,20(sp)
    9e68:	1009883a 	mov	r4,r2
    9e6c:	ad400c04 	addi	r21,r21,48
    9e70:	1d05883a 	add	r2,r3,r20
    9e74:	15400005 	stb	r21,0(r2)
    9e78:	2021883a 	mov	r16,r4
    9e7c:	d9000317 	ldw	r4,12(sp)
    9e80:	a5000044 	addi	r20,r20,1
    9e84:	2823883a 	mov	r17,r5
    9e88:	a13fe11e 	bne	r20,r4,9e10 <_dtoa_r+0x1378>
    9e8c:	e505883a 	add	r2,fp,r20
    9e90:	173fffc4 	addi	fp,r2,-1
    9e94:	0025883a 	mov	r18,zero
    9e98:	04cff834 	movhi	r19,16352
    9e9c:	b009883a 	mov	r4,r22
    9ea0:	b80b883a 	mov	r5,r23
    9ea4:	900d883a 	mov	r6,r18
    9ea8:	980f883a 	mov	r7,r19
    9eac:	0002d980 	call	2d98 <__adddf3>
    9eb0:	180b883a 	mov	r5,r3
    9eb4:	1009883a 	mov	r4,r2
    9eb8:	800d883a 	mov	r6,r16
    9ebc:	880f883a 	mov	r7,r17
    9ec0:	00034b00 	call	34b0 <__ltdf2>
    9ec4:	103cab16 	blt	r2,zero,9174 <_dtoa_r+0x6dc>
    9ec8:	0009883a 	mov	r4,zero
    9ecc:	980b883a 	mov	r5,r19
    9ed0:	b80f883a 	mov	r7,r23
    9ed4:	b00d883a 	mov	r6,r22
    9ed8:	0002d180 	call	2d18 <__subdf3>
    9edc:	180b883a 	mov	r5,r3
    9ee0:	880f883a 	mov	r7,r17
    9ee4:	1009883a 	mov	r4,r2
    9ee8:	800d883a 	mov	r6,r16
    9eec:	00034280 	call	3428 <__gtdf2>
    9ef0:	00bc470e 	bge	zero,r2,9010 <_dtoa_r+0x578>
    9ef4:	00c00c04 	movi	r3,48
    9ef8:	e73fffc4 	addi	fp,fp,-1
    9efc:	e0800007 	ldb	r2,0(fp)
    9f00:	10fffd26 	beq	r2,r3,9ef8 <_dtoa_r+0x1460>
    9f04:	d9800417 	ldw	r6,16(sp)
    9f08:	e7000044 	addi	fp,fp,1
    9f0c:	d9800d15 	stw	r6,52(sp)
    9f10:	003cab06 	br	91c0 <_dtoa_r+0x728>
    9f14:	d8c00f17 	ldw	r3,60(sp)
    9f18:	d9001117 	ldw	r4,68(sp)
    9f1c:	20e1c83a 	sub	r16,r4,r3
    9f20:	0007883a 	mov	r3,zero
    9f24:	003d9b06 	br	9594 <_dtoa_r+0xafc>
    9f28:	00800e44 	movi	r2,57
    9f2c:	b0800005 	stb	r2,0(r22)
    9f30:	b5800044 	addi	r22,r22,1
    9f34:	003dc106 	br	963c <_dtoa_r+0xba4>
    9f38:	05800084 	movi	r22,2
    9f3c:	003bf706 	br	8f1c <_dtoa_r+0x484>
    9f40:	d9000f17 	ldw	r4,60(sp)
    9f44:	013c000e 	bge	zero,r4,8f48 <_dtoa_r+0x4b0>
    9f48:	d9800e17 	ldw	r6,56(sp)
    9f4c:	01bc300e 	bge	zero,r6,9010 <_dtoa_r+0x578>
    9f50:	0005883a 	mov	r2,zero
    9f54:	00d00934 	movhi	r3,16420
    9f58:	a80b883a 	mov	r5,r21
    9f5c:	180f883a 	mov	r7,r3
    9f60:	a009883a 	mov	r4,r20
    9f64:	100d883a 	mov	r6,r2
    9f68:	0002e0c0 	call	2e0c <__muldf3>
    9f6c:	b1000044 	addi	r4,r22,1
    9f70:	1021883a 	mov	r16,r2
    9f74:	1823883a 	mov	r17,r3
    9f78:	00035380 	call	3538 <__floatsidf>
    9f7c:	880b883a 	mov	r5,r17
    9f80:	8009883a 	mov	r4,r16
    9f84:	180f883a 	mov	r7,r3
    9f88:	100d883a 	mov	r6,r2
    9f8c:	0002e0c0 	call	2e0c <__muldf3>
    9f90:	0011883a 	mov	r8,zero
    9f94:	02500734 	movhi	r9,16412
    9f98:	180b883a 	mov	r5,r3
    9f9c:	480f883a 	mov	r7,r9
    9fa0:	1009883a 	mov	r4,r2
    9fa4:	400d883a 	mov	r6,r8
    9fa8:	0002d980 	call	2d98 <__adddf3>
    9fac:	102d883a 	mov	r22,r2
    9fb0:	00bf3034 	movhi	r2,64704
    9fb4:	10ef883a 	add	r23,r2,r3
    9fb8:	d8800d17 	ldw	r2,52(sp)
    9fbc:	d8c00e17 	ldw	r3,56(sp)
    9fc0:	8029883a 	mov	r20,r16
    9fc4:	10bfffc4 	addi	r2,r2,-1
    9fc8:	882b883a 	mov	r21,r17
    9fcc:	d8800415 	stw	r2,16(sp)
    9fd0:	d8c00315 	stw	r3,12(sp)
    9fd4:	003e8306 	br	99e4 <_dtoa_r+0xf4c>
    9fd8:	d8800117 	ldw	r2,4(sp)
    9fdc:	dc001117 	ldw	r16,68(sp)
    9fe0:	dc801017 	ldw	r18,64(sp)
    9fe4:	00c00d84 	movi	r3,54
    9fe8:	1887c83a 	sub	r3,r3,r2
    9fec:	003d6906 	br	9594 <_dtoa_r+0xafc>
    9ff0:	01800044 	movi	r6,1
    9ff4:	3021883a 	mov	r16,r6
    9ff8:	d9800f15 	stw	r6,60(sp)
    9ffc:	d9802615 	stw	r6,152(sp)
    a000:	d9800e15 	stw	r6,56(sp)
    a004:	003b9306 	br	8e54 <_dtoa_r+0x3bc>
    a008:	b021883a 	mov	r16,r22
    a00c:	dd800f15 	stw	r22,60(sp)
    a010:	003b9006 	br	8e54 <_dtoa_r+0x3bc>
    a014:	103e221e 	bne	r2,zero,98a0 <_dtoa_r+0xe08>
    a018:	b880004c 	andi	r2,r23,1
    a01c:	1005003a 	cmpeq	r2,r2,zero
    a020:	103e1f1e 	bne	r2,zero,98a0 <_dtoa_r+0xe08>
    a024:	003e1b06 	br	9894 <_dtoa_r+0xdfc>
    a028:	d9001617 	ldw	r4,88(sp)
    a02c:	980b883a 	mov	r5,r19
    a030:	01800284 	movi	r6,10
    a034:	000f883a 	mov	r7,zero
    a038:	000b6200 	call	b620 <__multadd>
    a03c:	d8c00e17 	ldw	r3,56(sp)
    a040:	1027883a 	mov	r19,r2
    a044:	d8c00f15 	stw	r3,60(sp)
    a048:	003cd306 	br	9398 <_dtoa_r+0x900>

0000a04c <__sflags>:
    a04c:	28c00007 	ldb	r3,0(r5)
    a050:	00801c84 	movi	r2,114
    a054:	18800926 	beq	r3,r2,a07c <__sflags+0x30>
    a058:	00801dc4 	movi	r2,119
    a05c:	18801426 	beq	r3,r2,a0b0 <__sflags+0x64>
    a060:	00801844 	movi	r2,97
    a064:	18801626 	beq	r3,r2,a0c0 <__sflags+0x74>
    a068:	0007883a 	mov	r3,zero
    a06c:	00800584 	movi	r2,22
    a070:	20800015 	stw	r2,0(r4)
    a074:	1805883a 	mov	r2,r3
    a078:	f800283a 	ret
    a07c:	000f883a 	mov	r7,zero
    a080:	0011883a 	mov	r8,zero
    a084:	00c00104 	movi	r3,4
    a088:	28800047 	ldb	r2,1(r5)
    a08c:	10000426 	beq	r2,zero,a0a0 <__sflags+0x54>
    a090:	01000ac4 	movi	r4,43
    a094:	11000e26 	beq	r2,r4,a0d0 <__sflags+0x84>
    a098:	28800087 	ldb	r2,2(r5)
    a09c:	11000c26 	beq	r2,r4,a0d0 <__sflags+0x84>
    a0a0:	3a04b03a 	or	r2,r7,r8
    a0a4:	30800015 	stw	r2,0(r6)
    a0a8:	1805883a 	mov	r2,r3
    a0ac:	f800283a 	ret
    a0b0:	01c00044 	movi	r7,1
    a0b4:	02018004 	movi	r8,1536
    a0b8:	00c00204 	movi	r3,8
    a0bc:	003ff206 	br	a088 <__sflags+0x3c>
    a0c0:	01c00044 	movi	r7,1
    a0c4:	02008204 	movi	r8,520
    a0c8:	00c04204 	movi	r3,264
    a0cc:	003fee06 	br	a088 <__sflags+0x3c>
    a0d0:	00bffcc4 	movi	r2,-13
    a0d4:	1884703a 	and	r2,r3,r2
    a0d8:	01c00084 	movi	r7,2
    a0dc:	10c00414 	ori	r3,r2,16
    a0e0:	3a04b03a 	or	r2,r7,r8
    a0e4:	30800015 	stw	r2,0(r6)
    a0e8:	003fef06 	br	a0a8 <__sflags+0x5c>

0000a0ec <__sfvwrite_r>:
    a0ec:	30800217 	ldw	r2,8(r6)
    a0f0:	defff504 	addi	sp,sp,-44
    a0f4:	df000915 	stw	fp,36(sp)
    a0f8:	dd800715 	stw	r22,28(sp)
    a0fc:	dc800315 	stw	r18,12(sp)
    a100:	dfc00a15 	stw	ra,40(sp)
    a104:	ddc00815 	stw	r23,32(sp)
    a108:	dd400615 	stw	r21,24(sp)
    a10c:	dd000515 	stw	r20,20(sp)
    a110:	dcc00415 	stw	r19,16(sp)
    a114:	dc400215 	stw	r17,8(sp)
    a118:	dc000115 	stw	r16,4(sp)
    a11c:	302d883a 	mov	r22,r6
    a120:	2039883a 	mov	fp,r4
    a124:	2825883a 	mov	r18,r5
    a128:	10001c26 	beq	r2,zero,a19c <__sfvwrite_r+0xb0>
    a12c:	29c0030b 	ldhu	r7,12(r5)
    a130:	3880020c 	andi	r2,r7,8
    a134:	10002726 	beq	r2,zero,a1d4 <__sfvwrite_r+0xe8>
    a138:	28800417 	ldw	r2,16(r5)
    a13c:	10002526 	beq	r2,zero,a1d4 <__sfvwrite_r+0xe8>
    a140:	3880008c 	andi	r2,r7,2
    a144:	b5400017 	ldw	r21,0(r22)
    a148:	10002826 	beq	r2,zero,a1ec <__sfvwrite_r+0x100>
    a14c:	0021883a 	mov	r16,zero
    a150:	0023883a 	mov	r17,zero
    a154:	880d883a 	mov	r6,r17
    a158:	e009883a 	mov	r4,fp
    a15c:	00810004 	movi	r2,1024
    a160:	80006e26 	beq	r16,zero,a31c <__sfvwrite_r+0x230>
    a164:	800f883a 	mov	r7,r16
    a168:	91400717 	ldw	r5,28(r18)
    a16c:	1400012e 	bgeu	r2,r16,a174 <__sfvwrite_r+0x88>
    a170:	100f883a 	mov	r7,r2
    a174:	90c00917 	ldw	r3,36(r18)
    a178:	183ee83a 	callr	r3
    a17c:	1007883a 	mov	r3,r2
    a180:	80a1c83a 	sub	r16,r16,r2
    a184:	88a3883a 	add	r17,r17,r2
    a188:	00806d0e 	bge	zero,r2,a340 <__sfvwrite_r+0x254>
    a18c:	b0800217 	ldw	r2,8(r22)
    a190:	10c5c83a 	sub	r2,r2,r3
    a194:	b0800215 	stw	r2,8(r22)
    a198:	103fee1e 	bne	r2,zero,a154 <__sfvwrite_r+0x68>
    a19c:	0009883a 	mov	r4,zero
    a1a0:	2005883a 	mov	r2,r4
    a1a4:	dfc00a17 	ldw	ra,40(sp)
    a1a8:	df000917 	ldw	fp,36(sp)
    a1ac:	ddc00817 	ldw	r23,32(sp)
    a1b0:	dd800717 	ldw	r22,28(sp)
    a1b4:	dd400617 	ldw	r21,24(sp)
    a1b8:	dd000517 	ldw	r20,20(sp)
    a1bc:	dcc00417 	ldw	r19,16(sp)
    a1c0:	dc800317 	ldw	r18,12(sp)
    a1c4:	dc400217 	ldw	r17,8(sp)
    a1c8:	dc000117 	ldw	r16,4(sp)
    a1cc:	dec00b04 	addi	sp,sp,44
    a1d0:	f800283a 	ret
    a1d4:	00086d40 	call	86d4 <__swsetup_r>
    a1d8:	1000e41e 	bne	r2,zero,a56c <__sfvwrite_r+0x480>
    a1dc:	91c0030b 	ldhu	r7,12(r18)
    a1e0:	b5400017 	ldw	r21,0(r22)
    a1e4:	3880008c 	andi	r2,r7,2
    a1e8:	103fd81e 	bne	r2,zero,a14c <__sfvwrite_r+0x60>
    a1ec:	3880004c 	andi	r2,r7,1
    a1f0:	1005003a 	cmpeq	r2,r2,zero
    a1f4:	10005726 	beq	r2,zero,a354 <__sfvwrite_r+0x268>
    a1f8:	0029883a 	mov	r20,zero
    a1fc:	002f883a 	mov	r23,zero
    a200:	a0004226 	beq	r20,zero,a30c <__sfvwrite_r+0x220>
    a204:	3880800c 	andi	r2,r7,512
    a208:	94000217 	ldw	r16,8(r18)
    a20c:	10008b26 	beq	r2,zero,a43c <__sfvwrite_r+0x350>
    a210:	800d883a 	mov	r6,r16
    a214:	a400a536 	bltu	r20,r16,a4ac <__sfvwrite_r+0x3c0>
    a218:	3881200c 	andi	r2,r7,1152
    a21c:	10002726 	beq	r2,zero,a2bc <__sfvwrite_r+0x1d0>
    a220:	90800517 	ldw	r2,20(r18)
    a224:	92000417 	ldw	r8,16(r18)
    a228:	91400017 	ldw	r5,0(r18)
    a22c:	1087883a 	add	r3,r2,r2
    a230:	1887883a 	add	r3,r3,r2
    a234:	1808d7fa 	srli	r4,r3,31
    a238:	2a21c83a 	sub	r16,r5,r8
    a23c:	80800044 	addi	r2,r16,1
    a240:	20c9883a 	add	r4,r4,r3
    a244:	2027d07a 	srai	r19,r4,1
    a248:	a085883a 	add	r2,r20,r2
    a24c:	980d883a 	mov	r6,r19
    a250:	9880022e 	bgeu	r19,r2,a25c <__sfvwrite_r+0x170>
    a254:	1027883a 	mov	r19,r2
    a258:	100d883a 	mov	r6,r2
    a25c:	3881000c 	andi	r2,r7,1024
    a260:	1000b826 	beq	r2,zero,a544 <__sfvwrite_r+0x458>
    a264:	300b883a 	mov	r5,r6
    a268:	e009883a 	mov	r4,fp
    a26c:	00055740 	call	5574 <_malloc_r>
    a270:	10003126 	beq	r2,zero,a338 <__sfvwrite_r+0x24c>
    a274:	91400417 	ldw	r5,16(r18)
    a278:	1009883a 	mov	r4,r2
    a27c:	800d883a 	mov	r6,r16
    a280:	1023883a 	mov	r17,r2
    a284:	0005cb40 	call	5cb4 <memcpy>
    a288:	90c0030b 	ldhu	r3,12(r18)
    a28c:	00beffc4 	movi	r2,-1025
    a290:	1886703a 	and	r3,r3,r2
    a294:	18c02014 	ori	r3,r3,128
    a298:	90c0030d 	sth	r3,12(r18)
    a29c:	9c07c83a 	sub	r3,r19,r16
    a2a0:	8c05883a 	add	r2,r17,r16
    a2a4:	a00d883a 	mov	r6,r20
    a2a8:	a021883a 	mov	r16,r20
    a2ac:	90800015 	stw	r2,0(r18)
    a2b0:	90c00215 	stw	r3,8(r18)
    a2b4:	94400415 	stw	r17,16(r18)
    a2b8:	94c00515 	stw	r19,20(r18)
    a2bc:	91000017 	ldw	r4,0(r18)
    a2c0:	b80b883a 	mov	r5,r23
    a2c4:	a023883a 	mov	r17,r20
    a2c8:	000a88c0 	call	a88c <memmove>
    a2cc:	90c00217 	ldw	r3,8(r18)
    a2d0:	90800017 	ldw	r2,0(r18)
    a2d4:	a027883a 	mov	r19,r20
    a2d8:	1c07c83a 	sub	r3,r3,r16
    a2dc:	1405883a 	add	r2,r2,r16
    a2e0:	90c00215 	stw	r3,8(r18)
    a2e4:	a021883a 	mov	r16,r20
    a2e8:	90800015 	stw	r2,0(r18)
    a2ec:	b0800217 	ldw	r2,8(r22)
    a2f0:	1405c83a 	sub	r2,r2,r16
    a2f4:	b0800215 	stw	r2,8(r22)
    a2f8:	103fa826 	beq	r2,zero,a19c <__sfvwrite_r+0xb0>
    a2fc:	a469c83a 	sub	r20,r20,r17
    a300:	91c0030b 	ldhu	r7,12(r18)
    a304:	bcef883a 	add	r23,r23,r19
    a308:	a03fbe1e 	bne	r20,zero,a204 <__sfvwrite_r+0x118>
    a30c:	adc00017 	ldw	r23,0(r21)
    a310:	ad000117 	ldw	r20,4(r21)
    a314:	ad400204 	addi	r21,r21,8
    a318:	003fb906 	br	a200 <__sfvwrite_r+0x114>
    a31c:	ac400017 	ldw	r17,0(r21)
    a320:	ac000117 	ldw	r16,4(r21)
    a324:	ad400204 	addi	r21,r21,8
    a328:	003f8a06 	br	a154 <__sfvwrite_r+0x68>
    a32c:	91400417 	ldw	r5,16(r18)
    a330:	e009883a 	mov	r4,fp
    a334:	000499c0 	call	499c <_free_r>
    a338:	00800304 	movi	r2,12
    a33c:	e0800015 	stw	r2,0(fp)
    a340:	9080030b 	ldhu	r2,12(r18)
    a344:	013fffc4 	movi	r4,-1
    a348:	10801014 	ori	r2,r2,64
    a34c:	9080030d 	sth	r2,12(r18)
    a350:	003f9306 	br	a1a0 <__sfvwrite_r+0xb4>
    a354:	0027883a 	mov	r19,zero
    a358:	002f883a 	mov	r23,zero
    a35c:	d8000015 	stw	zero,0(sp)
    a360:	0029883a 	mov	r20,zero
    a364:	98001e26 	beq	r19,zero,a3e0 <__sfvwrite_r+0x2f4>
    a368:	d8c00017 	ldw	r3,0(sp)
    a36c:	1804c03a 	cmpne	r2,r3,zero
    a370:	10005e26 	beq	r2,zero,a4ec <__sfvwrite_r+0x400>
    a374:	9821883a 	mov	r16,r19
    a378:	a4c0012e 	bgeu	r20,r19,a380 <__sfvwrite_r+0x294>
    a37c:	a021883a 	mov	r16,r20
    a380:	91000017 	ldw	r4,0(r18)
    a384:	90800417 	ldw	r2,16(r18)
    a388:	91800217 	ldw	r6,8(r18)
    a38c:	91c00517 	ldw	r7,20(r18)
    a390:	1100022e 	bgeu	r2,r4,a39c <__sfvwrite_r+0x2b0>
    a394:	31e3883a 	add	r17,r6,r7
    a398:	8c001616 	blt	r17,r16,a3f4 <__sfvwrite_r+0x308>
    a39c:	81c03816 	blt	r16,r7,a480 <__sfvwrite_r+0x394>
    a3a0:	90c00917 	ldw	r3,36(r18)
    a3a4:	91400717 	ldw	r5,28(r18)
    a3a8:	e009883a 	mov	r4,fp
    a3ac:	b80d883a 	mov	r6,r23
    a3b0:	183ee83a 	callr	r3
    a3b4:	1023883a 	mov	r17,r2
    a3b8:	00bfe10e 	bge	zero,r2,a340 <__sfvwrite_r+0x254>
    a3bc:	a469c83a 	sub	r20,r20,r17
    a3c0:	a0001826 	beq	r20,zero,a424 <__sfvwrite_r+0x338>
    a3c4:	b0800217 	ldw	r2,8(r22)
    a3c8:	1445c83a 	sub	r2,r2,r17
    a3cc:	b0800215 	stw	r2,8(r22)
    a3d0:	103f7226 	beq	r2,zero,a19c <__sfvwrite_r+0xb0>
    a3d4:	9c67c83a 	sub	r19,r19,r17
    a3d8:	bc6f883a 	add	r23,r23,r17
    a3dc:	983fe21e 	bne	r19,zero,a368 <__sfvwrite_r+0x27c>
    a3e0:	adc00017 	ldw	r23,0(r21)
    a3e4:	acc00117 	ldw	r19,4(r21)
    a3e8:	ad400204 	addi	r21,r21,8
    a3ec:	d8000015 	stw	zero,0(sp)
    a3f0:	003fdc06 	br	a364 <__sfvwrite_r+0x278>
    a3f4:	b80b883a 	mov	r5,r23
    a3f8:	880d883a 	mov	r6,r17
    a3fc:	000a88c0 	call	a88c <memmove>
    a400:	90c00017 	ldw	r3,0(r18)
    a404:	e009883a 	mov	r4,fp
    a408:	900b883a 	mov	r5,r18
    a40c:	1c47883a 	add	r3,r3,r17
    a410:	90c00015 	stw	r3,0(r18)
    a414:	00041540 	call	4154 <_fflush_r>
    a418:	103fc91e 	bne	r2,zero,a340 <__sfvwrite_r+0x254>
    a41c:	a469c83a 	sub	r20,r20,r17
    a420:	a03fe81e 	bne	r20,zero,a3c4 <__sfvwrite_r+0x2d8>
    a424:	e009883a 	mov	r4,fp
    a428:	900b883a 	mov	r5,r18
    a42c:	00041540 	call	4154 <_fflush_r>
    a430:	103fc31e 	bne	r2,zero,a340 <__sfvwrite_r+0x254>
    a434:	d8000015 	stw	zero,0(sp)
    a438:	003fe206 	br	a3c4 <__sfvwrite_r+0x2d8>
    a43c:	91000017 	ldw	r4,0(r18)
    a440:	90800417 	ldw	r2,16(r18)
    a444:	1100022e 	bgeu	r2,r4,a450 <__sfvwrite_r+0x364>
    a448:	8023883a 	mov	r17,r16
    a44c:	85003136 	bltu	r16,r20,a514 <__sfvwrite_r+0x428>
    a450:	91c00517 	ldw	r7,20(r18)
    a454:	a1c01836 	bltu	r20,r7,a4b8 <__sfvwrite_r+0x3cc>
    a458:	90c00917 	ldw	r3,36(r18)
    a45c:	91400717 	ldw	r5,28(r18)
    a460:	e009883a 	mov	r4,fp
    a464:	b80d883a 	mov	r6,r23
    a468:	183ee83a 	callr	r3
    a46c:	1021883a 	mov	r16,r2
    a470:	00bfb30e 	bge	zero,r2,a340 <__sfvwrite_r+0x254>
    a474:	1023883a 	mov	r17,r2
    a478:	1027883a 	mov	r19,r2
    a47c:	003f9b06 	br	a2ec <__sfvwrite_r+0x200>
    a480:	b80b883a 	mov	r5,r23
    a484:	800d883a 	mov	r6,r16
    a488:	000a88c0 	call	a88c <memmove>
    a48c:	90c00217 	ldw	r3,8(r18)
    a490:	90800017 	ldw	r2,0(r18)
    a494:	8023883a 	mov	r17,r16
    a498:	1c07c83a 	sub	r3,r3,r16
    a49c:	1405883a 	add	r2,r2,r16
    a4a0:	90c00215 	stw	r3,8(r18)
    a4a4:	90800015 	stw	r2,0(r18)
    a4a8:	003fc406 	br	a3bc <__sfvwrite_r+0x2d0>
    a4ac:	a00d883a 	mov	r6,r20
    a4b0:	a021883a 	mov	r16,r20
    a4b4:	003f8106 	br	a2bc <__sfvwrite_r+0x1d0>
    a4b8:	b80b883a 	mov	r5,r23
    a4bc:	a00d883a 	mov	r6,r20
    a4c0:	000a88c0 	call	a88c <memmove>
    a4c4:	90c00217 	ldw	r3,8(r18)
    a4c8:	90800017 	ldw	r2,0(r18)
    a4cc:	a021883a 	mov	r16,r20
    a4d0:	1d07c83a 	sub	r3,r3,r20
    a4d4:	1505883a 	add	r2,r2,r20
    a4d8:	a023883a 	mov	r17,r20
    a4dc:	a027883a 	mov	r19,r20
    a4e0:	90c00215 	stw	r3,8(r18)
    a4e4:	90800015 	stw	r2,0(r18)
    a4e8:	003f8006 	br	a2ec <__sfvwrite_r+0x200>
    a4ec:	b809883a 	mov	r4,r23
    a4f0:	01400284 	movi	r5,10
    a4f4:	980d883a 	mov	r6,r19
    a4f8:	000a7a80 	call	a7a8 <memchr>
    a4fc:	10001726 	beq	r2,zero,a55c <__sfvwrite_r+0x470>
    a500:	15c5c83a 	sub	r2,r2,r23
    a504:	15000044 	addi	r20,r2,1
    a508:	00800044 	movi	r2,1
    a50c:	d8800015 	stw	r2,0(sp)
    a510:	003f9806 	br	a374 <__sfvwrite_r+0x288>
    a514:	b80b883a 	mov	r5,r23
    a518:	800d883a 	mov	r6,r16
    a51c:	000a88c0 	call	a88c <memmove>
    a520:	90c00017 	ldw	r3,0(r18)
    a524:	e009883a 	mov	r4,fp
    a528:	900b883a 	mov	r5,r18
    a52c:	1c07883a 	add	r3,r3,r16
    a530:	90c00015 	stw	r3,0(r18)
    a534:	8027883a 	mov	r19,r16
    a538:	00041540 	call	4154 <_fflush_r>
    a53c:	103f6b26 	beq	r2,zero,a2ec <__sfvwrite_r+0x200>
    a540:	003f7f06 	br	a340 <__sfvwrite_r+0x254>
    a544:	400b883a 	mov	r5,r8
    a548:	e009883a 	mov	r4,fp
    a54c:	000b9d80 	call	b9d8 <_realloc_r>
    a550:	103f7626 	beq	r2,zero,a32c <__sfvwrite_r+0x240>
    a554:	1023883a 	mov	r17,r2
    a558:	003f5006 	br	a29c <__sfvwrite_r+0x1b0>
    a55c:	00c00044 	movi	r3,1
    a560:	9d000044 	addi	r20,r19,1
    a564:	d8c00015 	stw	r3,0(sp)
    a568:	003f8206 	br	a374 <__sfvwrite_r+0x288>
    a56c:	9080030b 	ldhu	r2,12(r18)
    a570:	00c00244 	movi	r3,9
    a574:	013fffc4 	movi	r4,-1
    a578:	10801014 	ori	r2,r2,64
    a57c:	9080030d 	sth	r2,12(r18)
    a580:	e0c00015 	stw	r3,0(fp)
    a584:	003f0606 	br	a1a0 <__sfvwrite_r+0xb4>

0000a588 <_gettimeofday_r>:
    a588:	defffd04 	addi	sp,sp,-12
    a58c:	dc000015 	stw	r16,0(sp)
    a590:	04000074 	movhi	r16,1
    a594:	8410e504 	addi	r16,r16,17300
    a598:	dc400115 	stw	r17,4(sp)
    a59c:	80000015 	stw	zero,0(r16)
    a5a0:	2023883a 	mov	r17,r4
    a5a4:	2809883a 	mov	r4,r5
    a5a8:	300b883a 	mov	r5,r6
    a5ac:	dfc00215 	stw	ra,8(sp)
    a5b0:	000d2e40 	call	d2e4 <gettimeofday>
    a5b4:	1007883a 	mov	r3,r2
    a5b8:	00bfffc4 	movi	r2,-1
    a5bc:	18800626 	beq	r3,r2,a5d8 <_gettimeofday_r+0x50>
    a5c0:	1805883a 	mov	r2,r3
    a5c4:	dfc00217 	ldw	ra,8(sp)
    a5c8:	dc400117 	ldw	r17,4(sp)
    a5cc:	dc000017 	ldw	r16,0(sp)
    a5d0:	dec00304 	addi	sp,sp,12
    a5d4:	f800283a 	ret
    a5d8:	80800017 	ldw	r2,0(r16)
    a5dc:	103ff826 	beq	r2,zero,a5c0 <_gettimeofday_r+0x38>
    a5e0:	88800015 	stw	r2,0(r17)
    a5e4:	1805883a 	mov	r2,r3
    a5e8:	dfc00217 	ldw	ra,8(sp)
    a5ec:	dc400117 	ldw	r17,4(sp)
    a5f0:	dc000017 	ldw	r16,0(sp)
    a5f4:	dec00304 	addi	sp,sp,12
    a5f8:	f800283a 	ret

0000a5fc <_isatty_r>:
    a5fc:	defffd04 	addi	sp,sp,-12
    a600:	dc000015 	stw	r16,0(sp)
    a604:	04000074 	movhi	r16,1
    a608:	8410e504 	addi	r16,r16,17300
    a60c:	dc400115 	stw	r17,4(sp)
    a610:	80000015 	stw	zero,0(r16)
    a614:	2023883a 	mov	r17,r4
    a618:	2809883a 	mov	r4,r5
    a61c:	dfc00215 	stw	ra,8(sp)
    a620:	000d5000 	call	d500 <isatty>
    a624:	1007883a 	mov	r3,r2
    a628:	00bfffc4 	movi	r2,-1
    a62c:	18800626 	beq	r3,r2,a648 <_isatty_r+0x4c>
    a630:	1805883a 	mov	r2,r3
    a634:	dfc00217 	ldw	ra,8(sp)
    a638:	dc400117 	ldw	r17,4(sp)
    a63c:	dc000017 	ldw	r16,0(sp)
    a640:	dec00304 	addi	sp,sp,12
    a644:	f800283a 	ret
    a648:	80800017 	ldw	r2,0(r16)
    a64c:	103ff826 	beq	r2,zero,a630 <_isatty_r+0x34>
    a650:	88800015 	stw	r2,0(r17)
    a654:	1805883a 	mov	r2,r3
    a658:	dfc00217 	ldw	ra,8(sp)
    a65c:	dc400117 	ldw	r17,4(sp)
    a660:	dc000017 	ldw	r16,0(sp)
    a664:	dec00304 	addi	sp,sp,12
    a668:	f800283a 	ret

0000a66c <__locale_charset>:
    a66c:	d0a01717 	ldw	r2,-32676(gp)
    a670:	f800283a 	ret

0000a674 <_localeconv_r>:
    a674:	00800074 	movhi	r2,1
    a678:	10808604 	addi	r2,r2,536
    a67c:	f800283a 	ret

0000a680 <localeconv>:
    a680:	00800074 	movhi	r2,1
    a684:	10890804 	addi	r2,r2,9248
    a688:	11000017 	ldw	r4,0(r2)
    a68c:	000a6741 	jmpi	a674 <_localeconv_r>

0000a690 <_setlocale_r>:
    a690:	defffc04 	addi	sp,sp,-16
    a694:	00c00074 	movhi	r3,1
    a698:	18ff9604 	addi	r3,r3,-424
    a69c:	dc800215 	stw	r18,8(sp)
    a6a0:	dc400115 	stw	r17,4(sp)
    a6a4:	dc000015 	stw	r16,0(sp)
    a6a8:	2023883a 	mov	r17,r4
    a6ac:	2825883a 	mov	r18,r5
    a6b0:	dfc00315 	stw	ra,12(sp)
    a6b4:	3021883a 	mov	r16,r6
    a6b8:	3009883a 	mov	r4,r6
    a6bc:	180b883a 	mov	r5,r3
    a6c0:	30000926 	beq	r6,zero,a6e8 <_setlocale_r+0x58>
    a6c4:	000c00c0 	call	c00c <strcmp>
    a6c8:	8009883a 	mov	r4,r16
    a6cc:	01400074 	movhi	r5,1
    a6d0:	297fee04 	addi	r5,r5,-72
    a6d4:	10000b1e 	bne	r2,zero,a704 <_setlocale_r+0x74>
    a6d8:	8c000d15 	stw	r16,52(r17)
    a6dc:	8c800c15 	stw	r18,48(r17)
    a6e0:	00c00074 	movhi	r3,1
    a6e4:	18ff9604 	addi	r3,r3,-424
    a6e8:	1805883a 	mov	r2,r3
    a6ec:	dfc00317 	ldw	ra,12(sp)
    a6f0:	dc800217 	ldw	r18,8(sp)
    a6f4:	dc400117 	ldw	r17,4(sp)
    a6f8:	dc000017 	ldw	r16,0(sp)
    a6fc:	dec00404 	addi	sp,sp,16
    a700:	f800283a 	ret
    a704:	000c00c0 	call	c00c <strcmp>
    a708:	0007883a 	mov	r3,zero
    a70c:	103ff226 	beq	r2,zero,a6d8 <_setlocale_r+0x48>
    a710:	003ff506 	br	a6e8 <_setlocale_r+0x58>

0000a714 <setlocale>:
    a714:	01800074 	movhi	r6,1
    a718:	31890804 	addi	r6,r6,9248
    a71c:	2007883a 	mov	r3,r4
    a720:	31000017 	ldw	r4,0(r6)
    a724:	280d883a 	mov	r6,r5
    a728:	180b883a 	mov	r5,r3
    a72c:	000a6901 	jmpi	a690 <_setlocale_r>

0000a730 <_lseek_r>:
    a730:	defffd04 	addi	sp,sp,-12
    a734:	dc000015 	stw	r16,0(sp)
    a738:	04000074 	movhi	r16,1
    a73c:	8410e504 	addi	r16,r16,17300
    a740:	dc400115 	stw	r17,4(sp)
    a744:	80000015 	stw	zero,0(r16)
    a748:	2023883a 	mov	r17,r4
    a74c:	2809883a 	mov	r4,r5
    a750:	300b883a 	mov	r5,r6
    a754:	380d883a 	mov	r6,r7
    a758:	dfc00215 	stw	ra,8(sp)
    a75c:	000d6480 	call	d648 <lseek>
    a760:	1007883a 	mov	r3,r2
    a764:	00bfffc4 	movi	r2,-1
    a768:	18800626 	beq	r3,r2,a784 <_lseek_r+0x54>
    a76c:	1805883a 	mov	r2,r3
    a770:	dfc00217 	ldw	ra,8(sp)
    a774:	dc400117 	ldw	r17,4(sp)
    a778:	dc000017 	ldw	r16,0(sp)
    a77c:	dec00304 	addi	sp,sp,12
    a780:	f800283a 	ret
    a784:	80800017 	ldw	r2,0(r16)
    a788:	103ff826 	beq	r2,zero,a76c <_lseek_r+0x3c>
    a78c:	88800015 	stw	r2,0(r17)
    a790:	1805883a 	mov	r2,r3
    a794:	dfc00217 	ldw	ra,8(sp)
    a798:	dc400117 	ldw	r17,4(sp)
    a79c:	dc000017 	ldw	r16,0(sp)
    a7a0:	dec00304 	addi	sp,sp,12
    a7a4:	f800283a 	ret

0000a7a8 <memchr>:
    a7a8:	008000c4 	movi	r2,3
    a7ac:	29403fcc 	andi	r5,r5,255
    a7b0:	2007883a 	mov	r3,r4
    a7b4:	1180022e 	bgeu	r2,r6,a7c0 <memchr+0x18>
    a7b8:	2084703a 	and	r2,r4,r2
    a7bc:	10000b26 	beq	r2,zero,a7ec <memchr+0x44>
    a7c0:	313fffc4 	addi	r4,r6,-1
    a7c4:	3000051e 	bne	r6,zero,a7dc <memchr+0x34>
    a7c8:	00002c06 	br	a87c <memchr+0xd4>
    a7cc:	213fffc4 	addi	r4,r4,-1
    a7d0:	00bfffc4 	movi	r2,-1
    a7d4:	18c00044 	addi	r3,r3,1
    a7d8:	20802826 	beq	r4,r2,a87c <memchr+0xd4>
    a7dc:	18800003 	ldbu	r2,0(r3)
    a7e0:	28bffa1e 	bne	r5,r2,a7cc <memchr+0x24>
    a7e4:	1805883a 	mov	r2,r3
    a7e8:	f800283a 	ret
    a7ec:	0011883a 	mov	r8,zero
    a7f0:	0007883a 	mov	r3,zero
    a7f4:	01c00104 	movi	r7,4
    a7f8:	4004923a 	slli	r2,r8,8
    a7fc:	18c00044 	addi	r3,r3,1
    a800:	1151883a 	add	r8,r2,r5
    a804:	19fffc1e 	bne	r3,r7,a7f8 <memchr+0x50>
    a808:	02bfbff4 	movhi	r10,65279
    a80c:	52bfbfc4 	addi	r10,r10,-257
    a810:	02602074 	movhi	r9,32897
    a814:	4a602004 	addi	r9,r9,-32640
    a818:	02c000c4 	movi	r11,3
    a81c:	20800017 	ldw	r2,0(r4)
    a820:	31bfff04 	addi	r6,r6,-4
    a824:	200f883a 	mov	r7,r4
    a828:	1204f03a 	xor	r2,r2,r8
    a82c:	1287883a 	add	r3,r2,r10
    a830:	1a46703a 	and	r3,r3,r9
    a834:	0084303a 	nor	r2,zero,r2
    a838:	10c4703a 	and	r2,r2,r3
    a83c:	10000b26 	beq	r2,zero,a86c <memchr+0xc4>
    a840:	20800003 	ldbu	r2,0(r4)
    a844:	28800f26 	beq	r5,r2,a884 <memchr+0xdc>
    a848:	20800043 	ldbu	r2,1(r4)
    a84c:	21c00044 	addi	r7,r4,1
    a850:	28800c26 	beq	r5,r2,a884 <memchr+0xdc>
    a854:	20800083 	ldbu	r2,2(r4)
    a858:	21c00084 	addi	r7,r4,2
    a85c:	28800926 	beq	r5,r2,a884 <memchr+0xdc>
    a860:	208000c3 	ldbu	r2,3(r4)
    a864:	21c000c4 	addi	r7,r4,3
    a868:	28800626 	beq	r5,r2,a884 <memchr+0xdc>
    a86c:	21000104 	addi	r4,r4,4
    a870:	59bfea36 	bltu	r11,r6,a81c <memchr+0x74>
    a874:	2007883a 	mov	r3,r4
    a878:	003fd106 	br	a7c0 <memchr+0x18>
    a87c:	0005883a 	mov	r2,zero
    a880:	f800283a 	ret
    a884:	3805883a 	mov	r2,r7
    a888:	f800283a 	ret

0000a88c <memmove>:
    a88c:	2807883a 	mov	r3,r5
    a890:	2011883a 	mov	r8,r4
    a894:	29000c2e 	bgeu	r5,r4,a8c8 <memmove+0x3c>
    a898:	298f883a 	add	r7,r5,r6
    a89c:	21c00a2e 	bgeu	r4,r7,a8c8 <memmove+0x3c>
    a8a0:	30000726 	beq	r6,zero,a8c0 <memmove+0x34>
    a8a4:	2187883a 	add	r3,r4,r6
    a8a8:	198dc83a 	sub	r6,r3,r6
    a8ac:	39ffffc4 	addi	r7,r7,-1
    a8b0:	38800003 	ldbu	r2,0(r7)
    a8b4:	18ffffc4 	addi	r3,r3,-1
    a8b8:	18800005 	stb	r2,0(r3)
    a8bc:	19bffb1e 	bne	r3,r6,a8ac <memmove+0x20>
    a8c0:	2005883a 	mov	r2,r4
    a8c4:	f800283a 	ret
    a8c8:	01c003c4 	movi	r7,15
    a8cc:	39800a36 	bltu	r7,r6,a8f8 <memmove+0x6c>
    a8d0:	303ffb26 	beq	r6,zero,a8c0 <memmove+0x34>
    a8d4:	400f883a 	mov	r7,r8
    a8d8:	320d883a 	add	r6,r6,r8
    a8dc:	28800003 	ldbu	r2,0(r5)
    a8e0:	29400044 	addi	r5,r5,1
    a8e4:	38800005 	stb	r2,0(r7)
    a8e8:	39c00044 	addi	r7,r7,1
    a8ec:	39bffb1e 	bne	r7,r6,a8dc <memmove+0x50>
    a8f0:	2005883a 	mov	r2,r4
    a8f4:	f800283a 	ret
    a8f8:	1904b03a 	or	r2,r3,r4
    a8fc:	108000cc 	andi	r2,r2,3
    a900:	103ff31e 	bne	r2,zero,a8d0 <memmove+0x44>
    a904:	3811883a 	mov	r8,r7
    a908:	180b883a 	mov	r5,r3
    a90c:	200f883a 	mov	r7,r4
    a910:	28c00017 	ldw	r3,0(r5)
    a914:	31bffc04 	addi	r6,r6,-16
    a918:	38c00015 	stw	r3,0(r7)
    a91c:	28800117 	ldw	r2,4(r5)
    a920:	38800115 	stw	r2,4(r7)
    a924:	28c00217 	ldw	r3,8(r5)
    a928:	38c00215 	stw	r3,8(r7)
    a92c:	28800317 	ldw	r2,12(r5)
    a930:	29400404 	addi	r5,r5,16
    a934:	38800315 	stw	r2,12(r7)
    a938:	39c00404 	addi	r7,r7,16
    a93c:	41bff436 	bltu	r8,r6,a910 <memmove+0x84>
    a940:	008000c4 	movi	r2,3
    a944:	1180072e 	bgeu	r2,r6,a964 <memmove+0xd8>
    a948:	1007883a 	mov	r3,r2
    a94c:	28800017 	ldw	r2,0(r5)
    a950:	31bfff04 	addi	r6,r6,-4
    a954:	29400104 	addi	r5,r5,4
    a958:	38800015 	stw	r2,0(r7)
    a95c:	39c00104 	addi	r7,r7,4
    a960:	19bffa36 	bltu	r3,r6,a94c <memmove+0xc0>
    a964:	3811883a 	mov	r8,r7
    a968:	003fd906 	br	a8d0 <memmove+0x44>

0000a96c <_Bfree>:
    a96c:	28000826 	beq	r5,zero,a990 <_Bfree+0x24>
    a970:	28800117 	ldw	r2,4(r5)
    a974:	21001317 	ldw	r4,76(r4)
    a978:	1085883a 	add	r2,r2,r2
    a97c:	1085883a 	add	r2,r2,r2
    a980:	1105883a 	add	r2,r2,r4
    a984:	10c00017 	ldw	r3,0(r2)
    a988:	28c00015 	stw	r3,0(r5)
    a98c:	11400015 	stw	r5,0(r2)
    a990:	f800283a 	ret

0000a994 <__hi0bits>:
    a994:	20bfffec 	andhi	r2,r4,65535
    a998:	10001426 	beq	r2,zero,a9ec <__hi0bits+0x58>
    a99c:	0007883a 	mov	r3,zero
    a9a0:	20bfc02c 	andhi	r2,r4,65280
    a9a4:	1000021e 	bne	r2,zero,a9b0 <__hi0bits+0x1c>
    a9a8:	2008923a 	slli	r4,r4,8
    a9ac:	18c00204 	addi	r3,r3,8
    a9b0:	20bc002c 	andhi	r2,r4,61440
    a9b4:	1000021e 	bne	r2,zero,a9c0 <__hi0bits+0x2c>
    a9b8:	2008913a 	slli	r4,r4,4
    a9bc:	18c00104 	addi	r3,r3,4
    a9c0:	20b0002c 	andhi	r2,r4,49152
    a9c4:	1000031e 	bne	r2,zero,a9d4 <__hi0bits+0x40>
    a9c8:	2105883a 	add	r2,r4,r4
    a9cc:	18c00084 	addi	r3,r3,2
    a9d0:	1089883a 	add	r4,r2,r2
    a9d4:	20000316 	blt	r4,zero,a9e4 <__hi0bits+0x50>
    a9d8:	2090002c 	andhi	r2,r4,16384
    a9dc:	10000626 	beq	r2,zero,a9f8 <__hi0bits+0x64>
    a9e0:	18c00044 	addi	r3,r3,1
    a9e4:	1805883a 	mov	r2,r3
    a9e8:	f800283a 	ret
    a9ec:	2008943a 	slli	r4,r4,16
    a9f0:	00c00404 	movi	r3,16
    a9f4:	003fea06 	br	a9a0 <__hi0bits+0xc>
    a9f8:	00c00804 	movi	r3,32
    a9fc:	1805883a 	mov	r2,r3
    aa00:	f800283a 	ret

0000aa04 <__lo0bits>:
    aa04:	20c00017 	ldw	r3,0(r4)
    aa08:	188001cc 	andi	r2,r3,7
    aa0c:	10000a26 	beq	r2,zero,aa38 <__lo0bits+0x34>
    aa10:	1880004c 	andi	r2,r3,1
    aa14:	1005003a 	cmpeq	r2,r2,zero
    aa18:	10002126 	beq	r2,zero,aaa0 <__lo0bits+0x9c>
    aa1c:	1880008c 	andi	r2,r3,2
    aa20:	1000251e 	bne	r2,zero,aab8 <__lo0bits+0xb4>
    aa24:	1804d0ba 	srli	r2,r3,2
    aa28:	01400084 	movi	r5,2
    aa2c:	20800015 	stw	r2,0(r4)
    aa30:	2805883a 	mov	r2,r5
    aa34:	f800283a 	ret
    aa38:	18bfffcc 	andi	r2,r3,65535
    aa3c:	10001526 	beq	r2,zero,aa94 <__lo0bits+0x90>
    aa40:	000b883a 	mov	r5,zero
    aa44:	18803fcc 	andi	r2,r3,255
    aa48:	1000021e 	bne	r2,zero,aa54 <__lo0bits+0x50>
    aa4c:	1806d23a 	srli	r3,r3,8
    aa50:	29400204 	addi	r5,r5,8
    aa54:	188003cc 	andi	r2,r3,15
    aa58:	1000021e 	bne	r2,zero,aa64 <__lo0bits+0x60>
    aa5c:	1806d13a 	srli	r3,r3,4
    aa60:	29400104 	addi	r5,r5,4
    aa64:	188000cc 	andi	r2,r3,3
    aa68:	1000021e 	bne	r2,zero,aa74 <__lo0bits+0x70>
    aa6c:	1806d0ba 	srli	r3,r3,2
    aa70:	29400084 	addi	r5,r5,2
    aa74:	1880004c 	andi	r2,r3,1
    aa78:	1000031e 	bne	r2,zero,aa88 <__lo0bits+0x84>
    aa7c:	1806d07a 	srli	r3,r3,1
    aa80:	18000a26 	beq	r3,zero,aaac <__lo0bits+0xa8>
    aa84:	29400044 	addi	r5,r5,1
    aa88:	2805883a 	mov	r2,r5
    aa8c:	20c00015 	stw	r3,0(r4)
    aa90:	f800283a 	ret
    aa94:	1806d43a 	srli	r3,r3,16
    aa98:	01400404 	movi	r5,16
    aa9c:	003fe906 	br	aa44 <__lo0bits+0x40>
    aaa0:	000b883a 	mov	r5,zero
    aaa4:	2805883a 	mov	r2,r5
    aaa8:	f800283a 	ret
    aaac:	01400804 	movi	r5,32
    aab0:	2805883a 	mov	r2,r5
    aab4:	f800283a 	ret
    aab8:	1804d07a 	srli	r2,r3,1
    aabc:	01400044 	movi	r5,1
    aac0:	20800015 	stw	r2,0(r4)
    aac4:	003fda06 	br	aa30 <__lo0bits+0x2c>

0000aac8 <__mcmp>:
    aac8:	20800417 	ldw	r2,16(r4)
    aacc:	28c00417 	ldw	r3,16(r5)
    aad0:	10cfc83a 	sub	r7,r2,r3
    aad4:	38000c1e 	bne	r7,zero,ab08 <__mcmp+0x40>
    aad8:	18c5883a 	add	r2,r3,r3
    aadc:	1085883a 	add	r2,r2,r2
    aae0:	10c00504 	addi	r3,r2,20
    aae4:	21000504 	addi	r4,r4,20
    aae8:	28cb883a 	add	r5,r5,r3
    aaec:	2085883a 	add	r2,r4,r2
    aaf0:	10bfff04 	addi	r2,r2,-4
    aaf4:	297fff04 	addi	r5,r5,-4
    aaf8:	11800017 	ldw	r6,0(r2)
    aafc:	28c00017 	ldw	r3,0(r5)
    ab00:	30c0031e 	bne	r6,r3,ab10 <__mcmp+0x48>
    ab04:	20bffa36 	bltu	r4,r2,aaf0 <__mcmp+0x28>
    ab08:	3805883a 	mov	r2,r7
    ab0c:	f800283a 	ret
    ab10:	30c00336 	bltu	r6,r3,ab20 <__mcmp+0x58>
    ab14:	01c00044 	movi	r7,1
    ab18:	3805883a 	mov	r2,r7
    ab1c:	f800283a 	ret
    ab20:	01ffffc4 	movi	r7,-1
    ab24:	003ff806 	br	ab08 <__mcmp+0x40>

0000ab28 <__ulp>:
    ab28:	295ffc2c 	andhi	r5,r5,32752
    ab2c:	013f3034 	movhi	r4,64704
    ab30:	290b883a 	add	r5,r5,r4
    ab34:	0145c83a 	sub	r2,zero,r5
    ab38:	1007d53a 	srai	r3,r2,20
    ab3c:	000d883a 	mov	r6,zero
    ab40:	0140040e 	bge	zero,r5,ab54 <__ulp+0x2c>
    ab44:	280f883a 	mov	r7,r5
    ab48:	3807883a 	mov	r3,r7
    ab4c:	3005883a 	mov	r2,r6
    ab50:	f800283a 	ret
    ab54:	008004c4 	movi	r2,19
    ab58:	193ffb04 	addi	r4,r3,-20
    ab5c:	10c00c0e 	bge	r2,r3,ab90 <__ulp+0x68>
    ab60:	008007c4 	movi	r2,31
    ab64:	1107c83a 	sub	r3,r2,r4
    ab68:	00800784 	movi	r2,30
    ab6c:	01400044 	movi	r5,1
    ab70:	11000216 	blt	r2,r4,ab7c <__ulp+0x54>
    ab74:	00800044 	movi	r2,1
    ab78:	10ca983a 	sll	r5,r2,r3
    ab7c:	000f883a 	mov	r7,zero
    ab80:	280d883a 	mov	r6,r5
    ab84:	3807883a 	mov	r3,r7
    ab88:	3005883a 	mov	r2,r6
    ab8c:	f800283a 	ret
    ab90:	00800234 	movhi	r2,8
    ab94:	10cfd83a 	sra	r7,r2,r3
    ab98:	000d883a 	mov	r6,zero
    ab9c:	3005883a 	mov	r2,r6
    aba0:	3807883a 	mov	r3,r7
    aba4:	f800283a 	ret

0000aba8 <__b2d>:
    aba8:	20800417 	ldw	r2,16(r4)
    abac:	defff904 	addi	sp,sp,-28
    abb0:	dd000415 	stw	r20,16(sp)
    abb4:	1085883a 	add	r2,r2,r2
    abb8:	25000504 	addi	r20,r4,20
    abbc:	1085883a 	add	r2,r2,r2
    abc0:	dc000015 	stw	r16,0(sp)
    abc4:	a0a1883a 	add	r16,r20,r2
    abc8:	dd400515 	stw	r21,20(sp)
    abcc:	857fff17 	ldw	r21,-4(r16)
    abd0:	dc400115 	stw	r17,4(sp)
    abd4:	dfc00615 	stw	ra,24(sp)
    abd8:	a809883a 	mov	r4,r21
    abdc:	2823883a 	mov	r17,r5
    abe0:	dcc00315 	stw	r19,12(sp)
    abe4:	dc800215 	stw	r18,8(sp)
    abe8:	000a9940 	call	a994 <__hi0bits>
    abec:	100b883a 	mov	r5,r2
    abf0:	00800804 	movi	r2,32
    abf4:	1145c83a 	sub	r2,r2,r5
    abf8:	88800015 	stw	r2,0(r17)
    abfc:	00800284 	movi	r2,10
    ac00:	80ffff04 	addi	r3,r16,-4
    ac04:	11401416 	blt	r2,r5,ac58 <__b2d+0xb0>
    ac08:	008002c4 	movi	r2,11
    ac0c:	1149c83a 	sub	r4,r2,r5
    ac10:	a0c02736 	bltu	r20,r3,acb0 <__b2d+0x108>
    ac14:	000d883a 	mov	r6,zero
    ac18:	28800544 	addi	r2,r5,21
    ac1c:	a906d83a 	srl	r3,r21,r4
    ac20:	a884983a 	sll	r2,r21,r2
    ac24:	1ccffc34 	orhi	r19,r3,16368
    ac28:	11a4b03a 	or	r18,r2,r6
    ac2c:	9005883a 	mov	r2,r18
    ac30:	9807883a 	mov	r3,r19
    ac34:	dfc00617 	ldw	ra,24(sp)
    ac38:	dd400517 	ldw	r21,20(sp)
    ac3c:	dd000417 	ldw	r20,16(sp)
    ac40:	dcc00317 	ldw	r19,12(sp)
    ac44:	dc800217 	ldw	r18,8(sp)
    ac48:	dc400117 	ldw	r17,4(sp)
    ac4c:	dc000017 	ldw	r16,0(sp)
    ac50:	dec00704 	addi	sp,sp,28
    ac54:	f800283a 	ret
    ac58:	a0c00e36 	bltu	r20,r3,ac94 <__b2d+0xec>
    ac5c:	293ffd44 	addi	r4,r5,-11
    ac60:	000d883a 	mov	r6,zero
    ac64:	20000f26 	beq	r4,zero,aca4 <__b2d+0xfc>
    ac68:	00800804 	movi	r2,32
    ac6c:	110bc83a 	sub	r5,r2,r4
    ac70:	a0c01236 	bltu	r20,r3,acbc <__b2d+0x114>
    ac74:	000f883a 	mov	r7,zero
    ac78:	a904983a 	sll	r2,r21,r4
    ac7c:	3146d83a 	srl	r3,r6,r5
    ac80:	3108983a 	sll	r4,r6,r4
    ac84:	108ffc34 	orhi	r2,r2,16368
    ac88:	18a6b03a 	or	r19,r3,r2
    ac8c:	3924b03a 	or	r18,r7,r4
    ac90:	003fe606 	br	ac2c <__b2d+0x84>
    ac94:	293ffd44 	addi	r4,r5,-11
    ac98:	81bffe17 	ldw	r6,-8(r16)
    ac9c:	80fffe04 	addi	r3,r16,-8
    aca0:	203ff11e 	bne	r4,zero,ac68 <__b2d+0xc0>
    aca4:	accffc34 	orhi	r19,r21,16368
    aca8:	3025883a 	mov	r18,r6
    acac:	003fdf06 	br	ac2c <__b2d+0x84>
    acb0:	18bfff17 	ldw	r2,-4(r3)
    acb4:	110cd83a 	srl	r6,r2,r4
    acb8:	003fd706 	br	ac18 <__b2d+0x70>
    acbc:	18bfff17 	ldw	r2,-4(r3)
    acc0:	114ed83a 	srl	r7,r2,r5
    acc4:	003fec06 	br	ac78 <__b2d+0xd0>

0000acc8 <__ratio>:
    acc8:	defff904 	addi	sp,sp,-28
    accc:	dc400215 	stw	r17,8(sp)
    acd0:	2823883a 	mov	r17,r5
    acd4:	d80b883a 	mov	r5,sp
    acd8:	dfc00615 	stw	ra,24(sp)
    acdc:	dd000515 	stw	r20,20(sp)
    ace0:	dcc00415 	stw	r19,16(sp)
    ace4:	dc800315 	stw	r18,12(sp)
    ace8:	2025883a 	mov	r18,r4
    acec:	000aba80 	call	aba8 <__b2d>
    acf0:	8809883a 	mov	r4,r17
    acf4:	d9400104 	addi	r5,sp,4
    acf8:	1027883a 	mov	r19,r2
    acfc:	1829883a 	mov	r20,r3
    ad00:	000aba80 	call	aba8 <__b2d>
    ad04:	89000417 	ldw	r4,16(r17)
    ad08:	91c00417 	ldw	r7,16(r18)
    ad0c:	d9800117 	ldw	r6,4(sp)
    ad10:	180b883a 	mov	r5,r3
    ad14:	390fc83a 	sub	r7,r7,r4
    ad18:	1009883a 	mov	r4,r2
    ad1c:	d8800017 	ldw	r2,0(sp)
    ad20:	380e917a 	slli	r7,r7,5
    ad24:	2011883a 	mov	r8,r4
    ad28:	1185c83a 	sub	r2,r2,r6
    ad2c:	11c5883a 	add	r2,r2,r7
    ad30:	1006953a 	slli	r3,r2,20
    ad34:	2813883a 	mov	r9,r5
    ad38:	00800d0e 	bge	zero,r2,ad70 <__ratio+0xa8>
    ad3c:	1d29883a 	add	r20,r3,r20
    ad40:	a00b883a 	mov	r5,r20
    ad44:	480f883a 	mov	r7,r9
    ad48:	9809883a 	mov	r4,r19
    ad4c:	400d883a 	mov	r6,r8
    ad50:	00031d00 	call	31d0 <__divdf3>
    ad54:	dfc00617 	ldw	ra,24(sp)
    ad58:	dd000517 	ldw	r20,20(sp)
    ad5c:	dcc00417 	ldw	r19,16(sp)
    ad60:	dc800317 	ldw	r18,12(sp)
    ad64:	dc400217 	ldw	r17,8(sp)
    ad68:	dec00704 	addi	sp,sp,28
    ad6c:	f800283a 	ret
    ad70:	28d3c83a 	sub	r9,r5,r3
    ad74:	003ff206 	br	ad40 <__ratio+0x78>

0000ad78 <_mprec_log10>:
    ad78:	defffe04 	addi	sp,sp,-8
    ad7c:	008005c4 	movi	r2,23
    ad80:	dc000015 	stw	r16,0(sp)
    ad84:	dfc00115 	stw	ra,4(sp)
    ad88:	2021883a 	mov	r16,r4
    ad8c:	11000c16 	blt	r2,r4,adc0 <_mprec_log10+0x48>
    ad90:	200490fa 	slli	r2,r4,3
    ad94:	00c00074 	movhi	r3,1
    ad98:	18c09204 	addi	r3,r3,584
    ad9c:	10c5883a 	add	r2,r2,r3
    ada0:	12400117 	ldw	r9,4(r2)
    ada4:	12000017 	ldw	r8,0(r2)
    ada8:	4807883a 	mov	r3,r9
    adac:	4005883a 	mov	r2,r8
    adb0:	dfc00117 	ldw	ra,4(sp)
    adb4:	dc000017 	ldw	r16,0(sp)
    adb8:	dec00204 	addi	sp,sp,8
    adbc:	f800283a 	ret
    adc0:	0011883a 	mov	r8,zero
    adc4:	024ffc34 	movhi	r9,16368
    adc8:	0005883a 	mov	r2,zero
    adcc:	00d00934 	movhi	r3,16420
    add0:	480b883a 	mov	r5,r9
    add4:	4009883a 	mov	r4,r8
    add8:	180f883a 	mov	r7,r3
    addc:	100d883a 	mov	r6,r2
    ade0:	0002e0c0 	call	2e0c <__muldf3>
    ade4:	843fffc4 	addi	r16,r16,-1
    ade8:	1011883a 	mov	r8,r2
    adec:	1813883a 	mov	r9,r3
    adf0:	803ff51e 	bne	r16,zero,adc8 <_mprec_log10+0x50>
    adf4:	4005883a 	mov	r2,r8
    adf8:	4807883a 	mov	r3,r9
    adfc:	dfc00117 	ldw	ra,4(sp)
    ae00:	dc000017 	ldw	r16,0(sp)
    ae04:	dec00204 	addi	sp,sp,8
    ae08:	f800283a 	ret

0000ae0c <__copybits>:
    ae0c:	297fffc4 	addi	r5,r5,-1
    ae10:	30800417 	ldw	r2,16(r6)
    ae14:	280bd17a 	srai	r5,r5,5
    ae18:	31800504 	addi	r6,r6,20
    ae1c:	1085883a 	add	r2,r2,r2
    ae20:	294b883a 	add	r5,r5,r5
    ae24:	294b883a 	add	r5,r5,r5
    ae28:	1085883a 	add	r2,r2,r2
    ae2c:	290b883a 	add	r5,r5,r4
    ae30:	3087883a 	add	r3,r6,r2
    ae34:	29400104 	addi	r5,r5,4
    ae38:	30c0052e 	bgeu	r6,r3,ae50 <__copybits+0x44>
    ae3c:	30800017 	ldw	r2,0(r6)
    ae40:	31800104 	addi	r6,r6,4
    ae44:	20800015 	stw	r2,0(r4)
    ae48:	21000104 	addi	r4,r4,4
    ae4c:	30fffb36 	bltu	r6,r3,ae3c <__copybits+0x30>
    ae50:	2140032e 	bgeu	r4,r5,ae60 <__copybits+0x54>
    ae54:	20000015 	stw	zero,0(r4)
    ae58:	21000104 	addi	r4,r4,4
    ae5c:	217ffd36 	bltu	r4,r5,ae54 <__copybits+0x48>
    ae60:	f800283a 	ret

0000ae64 <__any_on>:
    ae64:	20800417 	ldw	r2,16(r4)
    ae68:	2807d17a 	srai	r3,r5,5
    ae6c:	21000504 	addi	r4,r4,20
    ae70:	10c00d0e 	bge	r2,r3,aea8 <__any_on+0x44>
    ae74:	1085883a 	add	r2,r2,r2
    ae78:	1085883a 	add	r2,r2,r2
    ae7c:	208d883a 	add	r6,r4,r2
    ae80:	2180182e 	bgeu	r4,r6,aee4 <__any_on+0x80>
    ae84:	30bfff17 	ldw	r2,-4(r6)
    ae88:	30ffff04 	addi	r3,r6,-4
    ae8c:	1000041e 	bne	r2,zero,aea0 <__any_on+0x3c>
    ae90:	20c0142e 	bgeu	r4,r3,aee4 <__any_on+0x80>
    ae94:	18ffff04 	addi	r3,r3,-4
    ae98:	18800017 	ldw	r2,0(r3)
    ae9c:	103ffc26 	beq	r2,zero,ae90 <__any_on+0x2c>
    aea0:	00800044 	movi	r2,1
    aea4:	f800283a 	ret
    aea8:	18800a0e 	bge	r3,r2,aed4 <__any_on+0x70>
    aeac:	294007cc 	andi	r5,r5,31
    aeb0:	28000826 	beq	r5,zero,aed4 <__any_on+0x70>
    aeb4:	18c5883a 	add	r2,r3,r3
    aeb8:	1085883a 	add	r2,r2,r2
    aebc:	208d883a 	add	r6,r4,r2
    aec0:	30c00017 	ldw	r3,0(r6)
    aec4:	1944d83a 	srl	r2,r3,r5
    aec8:	1144983a 	sll	r2,r2,r5
    aecc:	18bff41e 	bne	r3,r2,aea0 <__any_on+0x3c>
    aed0:	003feb06 	br	ae80 <__any_on+0x1c>
    aed4:	18c5883a 	add	r2,r3,r3
    aed8:	1085883a 	add	r2,r2,r2
    aedc:	208d883a 	add	r6,r4,r2
    aee0:	003fe706 	br	ae80 <__any_on+0x1c>
    aee4:	0005883a 	mov	r2,zero
    aee8:	f800283a 	ret

0000aeec <_Balloc>:
    aeec:	20c01317 	ldw	r3,76(r4)
    aef0:	defffb04 	addi	sp,sp,-20
    aef4:	dcc00315 	stw	r19,12(sp)
    aef8:	dc800215 	stw	r18,8(sp)
    aefc:	dfc00415 	stw	ra,16(sp)
    af00:	2825883a 	mov	r18,r5
    af04:	dc400115 	stw	r17,4(sp)
    af08:	dc000015 	stw	r16,0(sp)
    af0c:	2027883a 	mov	r19,r4
    af10:	01800404 	movi	r6,16
    af14:	01400104 	movi	r5,4
    af18:	18001726 	beq	r3,zero,af78 <_Balloc+0x8c>
    af1c:	01400044 	movi	r5,1
    af20:	9485883a 	add	r2,r18,r18
    af24:	2ca2983a 	sll	r17,r5,r18
    af28:	1085883a 	add	r2,r2,r2
    af2c:	10c7883a 	add	r3,r2,r3
    af30:	1c000017 	ldw	r16,0(r3)
    af34:	8c4d883a 	add	r6,r17,r17
    af38:	318d883a 	add	r6,r6,r6
    af3c:	9809883a 	mov	r4,r19
    af40:	31800504 	addi	r6,r6,20
    af44:	80001226 	beq	r16,zero,af90 <_Balloc+0xa4>
    af48:	80800017 	ldw	r2,0(r16)
    af4c:	18800015 	stw	r2,0(r3)
    af50:	80000415 	stw	zero,16(r16)
    af54:	80000315 	stw	zero,12(r16)
    af58:	8005883a 	mov	r2,r16
    af5c:	dfc00417 	ldw	ra,16(sp)
    af60:	dcc00317 	ldw	r19,12(sp)
    af64:	dc800217 	ldw	r18,8(sp)
    af68:	dc400117 	ldw	r17,4(sp)
    af6c:	dc000017 	ldw	r16,0(sp)
    af70:	dec00504 	addi	sp,sp,20
    af74:	f800283a 	ret
    af78:	000c0c80 	call	c0c8 <_calloc_r>
    af7c:	1007883a 	mov	r3,r2
    af80:	0021883a 	mov	r16,zero
    af84:	98801315 	stw	r2,76(r19)
    af88:	103fe41e 	bne	r2,zero,af1c <_Balloc+0x30>
    af8c:	003ff206 	br	af58 <_Balloc+0x6c>
    af90:	000c0c80 	call	c0c8 <_calloc_r>
    af94:	103ff026 	beq	r2,zero,af58 <_Balloc+0x6c>
    af98:	1021883a 	mov	r16,r2
    af9c:	14800115 	stw	r18,4(r2)
    afa0:	14400215 	stw	r17,8(r2)
    afa4:	003fea06 	br	af50 <_Balloc+0x64>

0000afa8 <__d2b>:
    afa8:	defff504 	addi	sp,sp,-44
    afac:	dcc00515 	stw	r19,20(sp)
    afb0:	04c00044 	movi	r19,1
    afb4:	dc000215 	stw	r16,8(sp)
    afb8:	2821883a 	mov	r16,r5
    afbc:	980b883a 	mov	r5,r19
    afc0:	ddc00915 	stw	r23,36(sp)
    afc4:	dd800815 	stw	r22,32(sp)
    afc8:	dd400715 	stw	r21,28(sp)
    afcc:	dd000615 	stw	r20,24(sp)
    afd0:	dc800415 	stw	r18,16(sp)
    afd4:	dc400315 	stw	r17,12(sp)
    afd8:	dfc00a15 	stw	ra,40(sp)
    afdc:	3023883a 	mov	r17,r6
    afe0:	382d883a 	mov	r22,r7
    afe4:	ddc00b17 	ldw	r23,44(sp)
    afe8:	000aeec0 	call	aeec <_Balloc>
    afec:	1025883a 	mov	r18,r2
    aff0:	00a00034 	movhi	r2,32768
    aff4:	10bfffc4 	addi	r2,r2,-1
    aff8:	8888703a 	and	r4,r17,r2
    affc:	202ad53a 	srli	r21,r4,20
    b000:	00800434 	movhi	r2,16
    b004:	10bfffc4 	addi	r2,r2,-1
    b008:	8886703a 	and	r3,r17,r2
    b00c:	a829003a 	cmpeq	r20,r21,zero
    b010:	800b883a 	mov	r5,r16
    b014:	d8c00115 	stw	r3,4(sp)
    b018:	94000504 	addi	r16,r18,20
    b01c:	a000021e 	bne	r20,zero,b028 <__d2b+0x80>
    b020:	18c00434 	orhi	r3,r3,16
    b024:	d8c00115 	stw	r3,4(sp)
    b028:	28002726 	beq	r5,zero,b0c8 <__d2b+0x120>
    b02c:	d809883a 	mov	r4,sp
    b030:	d9400015 	stw	r5,0(sp)
    b034:	000aa040 	call	aa04 <__lo0bits>
    b038:	100d883a 	mov	r6,r2
    b03c:	10003526 	beq	r2,zero,b114 <__d2b+0x16c>
    b040:	d8c00117 	ldw	r3,4(sp)
    b044:	00800804 	movi	r2,32
    b048:	1185c83a 	sub	r2,r2,r6
    b04c:	d9000017 	ldw	r4,0(sp)
    b050:	1886983a 	sll	r3,r3,r2
    b054:	1906b03a 	or	r3,r3,r4
    b058:	90c00515 	stw	r3,20(r18)
    b05c:	d8c00117 	ldw	r3,4(sp)
    b060:	1986d83a 	srl	r3,r3,r6
    b064:	d8c00115 	stw	r3,4(sp)
    b068:	180b003a 	cmpeq	r5,r3,zero
    b06c:	00800084 	movi	r2,2
    b070:	114bc83a 	sub	r5,r2,r5
    b074:	80c00115 	stw	r3,4(r16)
    b078:	91400415 	stw	r5,16(r18)
    b07c:	a0001a1e 	bne	r20,zero,b0e8 <__d2b+0x140>
    b080:	3545883a 	add	r2,r6,r21
    b084:	10bef344 	addi	r2,r2,-1075
    b088:	00c00d44 	movi	r3,53
    b08c:	b0800015 	stw	r2,0(r22)
    b090:	1987c83a 	sub	r3,r3,r6
    b094:	b8c00015 	stw	r3,0(r23)
    b098:	9005883a 	mov	r2,r18
    b09c:	dfc00a17 	ldw	ra,40(sp)
    b0a0:	ddc00917 	ldw	r23,36(sp)
    b0a4:	dd800817 	ldw	r22,32(sp)
    b0a8:	dd400717 	ldw	r21,28(sp)
    b0ac:	dd000617 	ldw	r20,24(sp)
    b0b0:	dcc00517 	ldw	r19,20(sp)
    b0b4:	dc800417 	ldw	r18,16(sp)
    b0b8:	dc400317 	ldw	r17,12(sp)
    b0bc:	dc000217 	ldw	r16,8(sp)
    b0c0:	dec00b04 	addi	sp,sp,44
    b0c4:	f800283a 	ret
    b0c8:	d9000104 	addi	r4,sp,4
    b0cc:	000aa040 	call	aa04 <__lo0bits>
    b0d0:	11800804 	addi	r6,r2,32
    b0d4:	d8800117 	ldw	r2,4(sp)
    b0d8:	94c00415 	stw	r19,16(r18)
    b0dc:	980b883a 	mov	r5,r19
    b0e0:	90800515 	stw	r2,20(r18)
    b0e4:	a03fe626 	beq	r20,zero,b080 <__d2b+0xd8>
    b0e8:	2945883a 	add	r2,r5,r5
    b0ec:	1085883a 	add	r2,r2,r2
    b0f0:	1405883a 	add	r2,r2,r16
    b0f4:	113fff17 	ldw	r4,-4(r2)
    b0f8:	30fef384 	addi	r3,r6,-1074
    b0fc:	2820917a 	slli	r16,r5,5
    b100:	b0c00015 	stw	r3,0(r22)
    b104:	000a9940 	call	a994 <__hi0bits>
    b108:	80a1c83a 	sub	r16,r16,r2
    b10c:	bc000015 	stw	r16,0(r23)
    b110:	003fe106 	br	b098 <__d2b+0xf0>
    b114:	d8800017 	ldw	r2,0(sp)
    b118:	90800515 	stw	r2,20(r18)
    b11c:	d8c00117 	ldw	r3,4(sp)
    b120:	003fd106 	br	b068 <__d2b+0xc0>

0000b124 <__mdiff>:
    b124:	defffb04 	addi	sp,sp,-20
    b128:	dc000015 	stw	r16,0(sp)
    b12c:	2821883a 	mov	r16,r5
    b130:	dc800215 	stw	r18,8(sp)
    b134:	300b883a 	mov	r5,r6
    b138:	2025883a 	mov	r18,r4
    b13c:	8009883a 	mov	r4,r16
    b140:	dc400115 	stw	r17,4(sp)
    b144:	dfc00415 	stw	ra,16(sp)
    b148:	dcc00315 	stw	r19,12(sp)
    b14c:	3023883a 	mov	r17,r6
    b150:	000aac80 	call	aac8 <__mcmp>
    b154:	10004226 	beq	r2,zero,b260 <__mdiff+0x13c>
    b158:	10005016 	blt	r2,zero,b29c <__mdiff+0x178>
    b15c:	0027883a 	mov	r19,zero
    b160:	81400117 	ldw	r5,4(r16)
    b164:	9009883a 	mov	r4,r18
    b168:	000aeec0 	call	aeec <_Balloc>
    b16c:	1019883a 	mov	r12,r2
    b170:	82800417 	ldw	r10,16(r16)
    b174:	88800417 	ldw	r2,16(r17)
    b178:	81800504 	addi	r6,r16,20
    b17c:	5287883a 	add	r3,r10,r10
    b180:	1085883a 	add	r2,r2,r2
    b184:	18c7883a 	add	r3,r3,r3
    b188:	1085883a 	add	r2,r2,r2
    b18c:	8a000504 	addi	r8,r17,20
    b190:	64c00315 	stw	r19,12(r12)
    b194:	30db883a 	add	r13,r6,r3
    b198:	4097883a 	add	r11,r8,r2
    b19c:	61c00504 	addi	r7,r12,20
    b1a0:	0013883a 	mov	r9,zero
    b1a4:	31000017 	ldw	r4,0(r6)
    b1a8:	41400017 	ldw	r5,0(r8)
    b1ac:	42000104 	addi	r8,r8,4
    b1b0:	20bfffcc 	andi	r2,r4,65535
    b1b4:	28ffffcc 	andi	r3,r5,65535
    b1b8:	10c5c83a 	sub	r2,r2,r3
    b1bc:	1245883a 	add	r2,r2,r9
    b1c0:	2008d43a 	srli	r4,r4,16
    b1c4:	280ad43a 	srli	r5,r5,16
    b1c8:	1007d43a 	srai	r3,r2,16
    b1cc:	3880000d 	sth	r2,0(r7)
    b1d0:	2149c83a 	sub	r4,r4,r5
    b1d4:	20c9883a 	add	r4,r4,r3
    b1d8:	3900008d 	sth	r4,2(r7)
    b1dc:	31800104 	addi	r6,r6,4
    b1e0:	39c00104 	addi	r7,r7,4
    b1e4:	2013d43a 	srai	r9,r4,16
    b1e8:	42ffee36 	bltu	r8,r11,b1a4 <__mdiff+0x80>
    b1ec:	33400c2e 	bgeu	r6,r13,b220 <__mdiff+0xfc>
    b1f0:	30800017 	ldw	r2,0(r6)
    b1f4:	31800104 	addi	r6,r6,4
    b1f8:	10ffffcc 	andi	r3,r2,65535
    b1fc:	1a47883a 	add	r3,r3,r9
    b200:	1004d43a 	srli	r2,r2,16
    b204:	1809d43a 	srai	r4,r3,16
    b208:	38c0000d 	sth	r3,0(r7)
    b20c:	1105883a 	add	r2,r2,r4
    b210:	3880008d 	sth	r2,2(r7)
    b214:	1013d43a 	srai	r9,r2,16
    b218:	39c00104 	addi	r7,r7,4
    b21c:	337ff436 	bltu	r6,r13,b1f0 <__mdiff+0xcc>
    b220:	38bfff17 	ldw	r2,-4(r7)
    b224:	38ffff04 	addi	r3,r7,-4
    b228:	1000041e 	bne	r2,zero,b23c <__mdiff+0x118>
    b22c:	18ffff04 	addi	r3,r3,-4
    b230:	18800017 	ldw	r2,0(r3)
    b234:	52bfffc4 	addi	r10,r10,-1
    b238:	103ffc26 	beq	r2,zero,b22c <__mdiff+0x108>
    b23c:	6005883a 	mov	r2,r12
    b240:	62800415 	stw	r10,16(r12)
    b244:	dfc00417 	ldw	ra,16(sp)
    b248:	dcc00317 	ldw	r19,12(sp)
    b24c:	dc800217 	ldw	r18,8(sp)
    b250:	dc400117 	ldw	r17,4(sp)
    b254:	dc000017 	ldw	r16,0(sp)
    b258:	dec00504 	addi	sp,sp,20
    b25c:	f800283a 	ret
    b260:	9009883a 	mov	r4,r18
    b264:	000b883a 	mov	r5,zero
    b268:	000aeec0 	call	aeec <_Balloc>
    b26c:	1019883a 	mov	r12,r2
    b270:	00800044 	movi	r2,1
    b274:	60800415 	stw	r2,16(r12)
    b278:	6005883a 	mov	r2,r12
    b27c:	60000515 	stw	zero,20(r12)
    b280:	dfc00417 	ldw	ra,16(sp)
    b284:	dcc00317 	ldw	r19,12(sp)
    b288:	dc800217 	ldw	r18,8(sp)
    b28c:	dc400117 	ldw	r17,4(sp)
    b290:	dc000017 	ldw	r16,0(sp)
    b294:	dec00504 	addi	sp,sp,20
    b298:	f800283a 	ret
    b29c:	880d883a 	mov	r6,r17
    b2a0:	04c00044 	movi	r19,1
    b2a4:	8023883a 	mov	r17,r16
    b2a8:	3021883a 	mov	r16,r6
    b2ac:	003fac06 	br	b160 <__mdiff+0x3c>

0000b2b0 <__lshift>:
    b2b0:	defff904 	addi	sp,sp,-28
    b2b4:	28800417 	ldw	r2,16(r5)
    b2b8:	dc000015 	stw	r16,0(sp)
    b2bc:	3021d17a 	srai	r16,r6,5
    b2c0:	28c00217 	ldw	r3,8(r5)
    b2c4:	10800044 	addi	r2,r2,1
    b2c8:	dc400115 	stw	r17,4(sp)
    b2cc:	80a3883a 	add	r17,r16,r2
    b2d0:	dd400515 	stw	r21,20(sp)
    b2d4:	dd000415 	stw	r20,16(sp)
    b2d8:	dc800215 	stw	r18,8(sp)
    b2dc:	dfc00615 	stw	ra,24(sp)
    b2e0:	2825883a 	mov	r18,r5
    b2e4:	dcc00315 	stw	r19,12(sp)
    b2e8:	3029883a 	mov	r20,r6
    b2ec:	202b883a 	mov	r21,r4
    b2f0:	29400117 	ldw	r5,4(r5)
    b2f4:	1c40030e 	bge	r3,r17,b304 <__lshift+0x54>
    b2f8:	18c7883a 	add	r3,r3,r3
    b2fc:	29400044 	addi	r5,r5,1
    b300:	1c7ffd16 	blt	r3,r17,b2f8 <__lshift+0x48>
    b304:	a809883a 	mov	r4,r21
    b308:	000aeec0 	call	aeec <_Balloc>
    b30c:	1027883a 	mov	r19,r2
    b310:	11400504 	addi	r5,r2,20
    b314:	0400090e 	bge	zero,r16,b33c <__lshift+0x8c>
    b318:	2805883a 	mov	r2,r5
    b31c:	0007883a 	mov	r3,zero
    b320:	18c00044 	addi	r3,r3,1
    b324:	10000015 	stw	zero,0(r2)
    b328:	10800104 	addi	r2,r2,4
    b32c:	80fffc1e 	bne	r16,r3,b320 <__lshift+0x70>
    b330:	8405883a 	add	r2,r16,r16
    b334:	1085883a 	add	r2,r2,r2
    b338:	288b883a 	add	r5,r5,r2
    b33c:	90800417 	ldw	r2,16(r18)
    b340:	91000504 	addi	r4,r18,20
    b344:	a18007cc 	andi	r6,r20,31
    b348:	1085883a 	add	r2,r2,r2
    b34c:	1085883a 	add	r2,r2,r2
    b350:	208f883a 	add	r7,r4,r2
    b354:	30001e26 	beq	r6,zero,b3d0 <__lshift+0x120>
    b358:	00800804 	movi	r2,32
    b35c:	1191c83a 	sub	r8,r2,r6
    b360:	0007883a 	mov	r3,zero
    b364:	20800017 	ldw	r2,0(r4)
    b368:	1184983a 	sll	r2,r2,r6
    b36c:	1884b03a 	or	r2,r3,r2
    b370:	28800015 	stw	r2,0(r5)
    b374:	20c00017 	ldw	r3,0(r4)
    b378:	21000104 	addi	r4,r4,4
    b37c:	29400104 	addi	r5,r5,4
    b380:	1a06d83a 	srl	r3,r3,r8
    b384:	21fff736 	bltu	r4,r7,b364 <__lshift+0xb4>
    b388:	28c00015 	stw	r3,0(r5)
    b38c:	18000126 	beq	r3,zero,b394 <__lshift+0xe4>
    b390:	8c400044 	addi	r17,r17,1
    b394:	88bfffc4 	addi	r2,r17,-1
    b398:	98800415 	stw	r2,16(r19)
    b39c:	a809883a 	mov	r4,r21
    b3a0:	900b883a 	mov	r5,r18
    b3a4:	000a96c0 	call	a96c <_Bfree>
    b3a8:	9805883a 	mov	r2,r19
    b3ac:	dfc00617 	ldw	ra,24(sp)
    b3b0:	dd400517 	ldw	r21,20(sp)
    b3b4:	dd000417 	ldw	r20,16(sp)
    b3b8:	dcc00317 	ldw	r19,12(sp)
    b3bc:	dc800217 	ldw	r18,8(sp)
    b3c0:	dc400117 	ldw	r17,4(sp)
    b3c4:	dc000017 	ldw	r16,0(sp)
    b3c8:	dec00704 	addi	sp,sp,28
    b3cc:	f800283a 	ret
    b3d0:	20800017 	ldw	r2,0(r4)
    b3d4:	21000104 	addi	r4,r4,4
    b3d8:	28800015 	stw	r2,0(r5)
    b3dc:	29400104 	addi	r5,r5,4
    b3e0:	21ffec2e 	bgeu	r4,r7,b394 <__lshift+0xe4>
    b3e4:	20800017 	ldw	r2,0(r4)
    b3e8:	21000104 	addi	r4,r4,4
    b3ec:	28800015 	stw	r2,0(r5)
    b3f0:	29400104 	addi	r5,r5,4
    b3f4:	21fff636 	bltu	r4,r7,b3d0 <__lshift+0x120>
    b3f8:	003fe606 	br	b394 <__lshift+0xe4>

0000b3fc <__multiply>:
    b3fc:	defff904 	addi	sp,sp,-28
    b400:	dcc00315 	stw	r19,12(sp)
    b404:	dc800215 	stw	r18,8(sp)
    b408:	2cc00417 	ldw	r19,16(r5)
    b40c:	34800417 	ldw	r18,16(r6)
    b410:	dd000415 	stw	r20,16(sp)
    b414:	dc400115 	stw	r17,4(sp)
    b418:	dfc00615 	stw	ra,24(sp)
    b41c:	dd400515 	stw	r21,20(sp)
    b420:	dc000015 	stw	r16,0(sp)
    b424:	2823883a 	mov	r17,r5
    b428:	3029883a 	mov	r20,r6
    b42c:	9c80040e 	bge	r19,r18,b440 <__multiply+0x44>
    b430:	9027883a 	mov	r19,r18
    b434:	2c800417 	ldw	r18,16(r5)
    b438:	2829883a 	mov	r20,r5
    b43c:	3023883a 	mov	r17,r6
    b440:	88800217 	ldw	r2,8(r17)
    b444:	9ca1883a 	add	r16,r19,r18
    b448:	89400117 	ldw	r5,4(r17)
    b44c:	1400010e 	bge	r2,r16,b454 <__multiply+0x58>
    b450:	29400044 	addi	r5,r5,1
    b454:	000aeec0 	call	aeec <_Balloc>
    b458:	102b883a 	mov	r21,r2
    b45c:	8405883a 	add	r2,r16,r16
    b460:	1085883a 	add	r2,r2,r2
    b464:	a9000504 	addi	r4,r21,20
    b468:	209d883a 	add	r14,r4,r2
    b46c:	2380042e 	bgeu	r4,r14,b480 <__multiply+0x84>
    b470:	2005883a 	mov	r2,r4
    b474:	10000015 	stw	zero,0(r2)
    b478:	10800104 	addi	r2,r2,4
    b47c:	13bffd36 	bltu	r2,r14,b474 <__multiply+0x78>
    b480:	9485883a 	add	r2,r18,r18
    b484:	9cc7883a 	add	r3,r19,r19
    b488:	a1800504 	addi	r6,r20,20
    b48c:	1085883a 	add	r2,r2,r2
    b490:	8b400504 	addi	r13,r17,20
    b494:	18c7883a 	add	r3,r3,r3
    b498:	309f883a 	add	r15,r6,r2
    b49c:	68d7883a 	add	r11,r13,r3
    b4a0:	33c03b2e 	bgeu	r6,r15,b590 <__multiply+0x194>
    b4a4:	2019883a 	mov	r12,r4
    b4a8:	30800017 	ldw	r2,0(r6)
    b4ac:	127fffcc 	andi	r9,r2,65535
    b4b0:	48001826 	beq	r9,zero,b514 <__multiply+0x118>
    b4b4:	6811883a 	mov	r8,r13
    b4b8:	600f883a 	mov	r7,r12
    b4bc:	0015883a 	mov	r10,zero
    b4c0:	40c00017 	ldw	r3,0(r8)
    b4c4:	39400017 	ldw	r5,0(r7)
    b4c8:	42000104 	addi	r8,r8,4
    b4cc:	193fffcc 	andi	r4,r3,65535
    b4d0:	4909383a 	mul	r4,r9,r4
    b4d4:	1806d43a 	srli	r3,r3,16
    b4d8:	28bfffcc 	andi	r2,r5,65535
    b4dc:	5085883a 	add	r2,r10,r2
    b4e0:	2089883a 	add	r4,r4,r2
    b4e4:	48c7383a 	mul	r3,r9,r3
    b4e8:	280ad43a 	srli	r5,r5,16
    b4ec:	2004d43a 	srli	r2,r4,16
    b4f0:	3900000d 	sth	r4,0(r7)
    b4f4:	1947883a 	add	r3,r3,r5
    b4f8:	10c5883a 	add	r2,r2,r3
    b4fc:	3880008d 	sth	r2,2(r7)
    b500:	1014d43a 	srli	r10,r2,16
    b504:	39c00104 	addi	r7,r7,4
    b508:	42ffed36 	bltu	r8,r11,b4c0 <__multiply+0xc4>
    b50c:	3a800015 	stw	r10,0(r7)
    b510:	30800017 	ldw	r2,0(r6)
    b514:	1012d43a 	srli	r9,r2,16
    b518:	48001926 	beq	r9,zero,b580 <__multiply+0x184>
    b51c:	60800017 	ldw	r2,0(r12)
    b520:	6811883a 	mov	r8,r13
    b524:	600f883a 	mov	r7,r12
    b528:	0015883a 	mov	r10,zero
    b52c:	100b883a 	mov	r5,r2
    b530:	41000017 	ldw	r4,0(r8)
    b534:	2806d43a 	srli	r3,r5,16
    b538:	3880000d 	sth	r2,0(r7)
    b53c:	20bfffcc 	andi	r2,r4,65535
    b540:	4885383a 	mul	r2,r9,r2
    b544:	50c7883a 	add	r3,r10,r3
    b548:	2008d43a 	srli	r4,r4,16
    b54c:	10c5883a 	add	r2,r2,r3
    b550:	3880008d 	sth	r2,2(r7)
    b554:	39c00104 	addi	r7,r7,4
    b558:	39400017 	ldw	r5,0(r7)
    b55c:	4909383a 	mul	r4,r9,r4
    b560:	1004d43a 	srli	r2,r2,16
    b564:	28ffffcc 	andi	r3,r5,65535
    b568:	20c9883a 	add	r4,r4,r3
    b56c:	1105883a 	add	r2,r2,r4
    b570:	42000104 	addi	r8,r8,4
    b574:	1014d43a 	srli	r10,r2,16
    b578:	42ffed36 	bltu	r8,r11,b530 <__multiply+0x134>
    b57c:	38800015 	stw	r2,0(r7)
    b580:	31800104 	addi	r6,r6,4
    b584:	33c0022e 	bgeu	r6,r15,b590 <__multiply+0x194>
    b588:	63000104 	addi	r12,r12,4
    b58c:	003fc606 	br	b4a8 <__multiply+0xac>
    b590:	0400090e 	bge	zero,r16,b5b8 <__multiply+0x1bc>
    b594:	70bfff17 	ldw	r2,-4(r14)
    b598:	70ffff04 	addi	r3,r14,-4
    b59c:	10000326 	beq	r2,zero,b5ac <__multiply+0x1b0>
    b5a0:	00000506 	br	b5b8 <__multiply+0x1bc>
    b5a4:	18800017 	ldw	r2,0(r3)
    b5a8:	1000031e 	bne	r2,zero,b5b8 <__multiply+0x1bc>
    b5ac:	843fffc4 	addi	r16,r16,-1
    b5b0:	18ffff04 	addi	r3,r3,-4
    b5b4:	803ffb1e 	bne	r16,zero,b5a4 <__multiply+0x1a8>
    b5b8:	a805883a 	mov	r2,r21
    b5bc:	ac000415 	stw	r16,16(r21)
    b5c0:	dfc00617 	ldw	ra,24(sp)
    b5c4:	dd400517 	ldw	r21,20(sp)
    b5c8:	dd000417 	ldw	r20,16(sp)
    b5cc:	dcc00317 	ldw	r19,12(sp)
    b5d0:	dc800217 	ldw	r18,8(sp)
    b5d4:	dc400117 	ldw	r17,4(sp)
    b5d8:	dc000017 	ldw	r16,0(sp)
    b5dc:	dec00704 	addi	sp,sp,28
    b5e0:	f800283a 	ret

0000b5e4 <__i2b>:
    b5e4:	defffd04 	addi	sp,sp,-12
    b5e8:	dc000015 	stw	r16,0(sp)
    b5ec:	04000044 	movi	r16,1
    b5f0:	dc800115 	stw	r18,4(sp)
    b5f4:	2825883a 	mov	r18,r5
    b5f8:	800b883a 	mov	r5,r16
    b5fc:	dfc00215 	stw	ra,8(sp)
    b600:	000aeec0 	call	aeec <_Balloc>
    b604:	14000415 	stw	r16,16(r2)
    b608:	14800515 	stw	r18,20(r2)
    b60c:	dfc00217 	ldw	ra,8(sp)
    b610:	dc800117 	ldw	r18,4(sp)
    b614:	dc000017 	ldw	r16,0(sp)
    b618:	dec00304 	addi	sp,sp,12
    b61c:	f800283a 	ret

0000b620 <__multadd>:
    b620:	defffa04 	addi	sp,sp,-24
    b624:	dc800215 	stw	r18,8(sp)
    b628:	2c800417 	ldw	r18,16(r5)
    b62c:	dd000415 	stw	r20,16(sp)
    b630:	dcc00315 	stw	r19,12(sp)
    b634:	dc000015 	stw	r16,0(sp)
    b638:	dfc00515 	stw	ra,20(sp)
    b63c:	3821883a 	mov	r16,r7
    b640:	dc400115 	stw	r17,4(sp)
    b644:	2827883a 	mov	r19,r5
    b648:	2029883a 	mov	r20,r4
    b64c:	2a000504 	addi	r8,r5,20
    b650:	000f883a 	mov	r7,zero
    b654:	40800017 	ldw	r2,0(r8)
    b658:	39c00044 	addi	r7,r7,1
    b65c:	10ffffcc 	andi	r3,r2,65535
    b660:	1987383a 	mul	r3,r3,r6
    b664:	1004d43a 	srli	r2,r2,16
    b668:	1c07883a 	add	r3,r3,r16
    b66c:	180ad43a 	srli	r5,r3,16
    b670:	1185383a 	mul	r2,r2,r6
    b674:	18ffffcc 	andi	r3,r3,65535
    b678:	1145883a 	add	r2,r2,r5
    b67c:	1008943a 	slli	r4,r2,16
    b680:	1020d43a 	srli	r16,r2,16
    b684:	20c9883a 	add	r4,r4,r3
    b688:	41000015 	stw	r4,0(r8)
    b68c:	42000104 	addi	r8,r8,4
    b690:	3cbff016 	blt	r7,r18,b654 <__multadd+0x34>
    b694:	80000826 	beq	r16,zero,b6b8 <__multadd+0x98>
    b698:	98800217 	ldw	r2,8(r19)
    b69c:	90800f0e 	bge	r18,r2,b6dc <__multadd+0xbc>
    b6a0:	9485883a 	add	r2,r18,r18
    b6a4:	1085883a 	add	r2,r2,r2
    b6a8:	14c5883a 	add	r2,r2,r19
    b6ac:	90c00044 	addi	r3,r18,1
    b6b0:	14000515 	stw	r16,20(r2)
    b6b4:	98c00415 	stw	r3,16(r19)
    b6b8:	9805883a 	mov	r2,r19
    b6bc:	dfc00517 	ldw	ra,20(sp)
    b6c0:	dd000417 	ldw	r20,16(sp)
    b6c4:	dcc00317 	ldw	r19,12(sp)
    b6c8:	dc800217 	ldw	r18,8(sp)
    b6cc:	dc400117 	ldw	r17,4(sp)
    b6d0:	dc000017 	ldw	r16,0(sp)
    b6d4:	dec00604 	addi	sp,sp,24
    b6d8:	f800283a 	ret
    b6dc:	99400117 	ldw	r5,4(r19)
    b6e0:	a009883a 	mov	r4,r20
    b6e4:	29400044 	addi	r5,r5,1
    b6e8:	000aeec0 	call	aeec <_Balloc>
    b6ec:	99800417 	ldw	r6,16(r19)
    b6f0:	99400304 	addi	r5,r19,12
    b6f4:	11000304 	addi	r4,r2,12
    b6f8:	318d883a 	add	r6,r6,r6
    b6fc:	318d883a 	add	r6,r6,r6
    b700:	31800204 	addi	r6,r6,8
    b704:	1023883a 	mov	r17,r2
    b708:	0005cb40 	call	5cb4 <memcpy>
    b70c:	980b883a 	mov	r5,r19
    b710:	a009883a 	mov	r4,r20
    b714:	000a96c0 	call	a96c <_Bfree>
    b718:	8827883a 	mov	r19,r17
    b71c:	003fe006 	br	b6a0 <__multadd+0x80>

0000b720 <__pow5mult>:
    b720:	defffa04 	addi	sp,sp,-24
    b724:	308000cc 	andi	r2,r6,3
    b728:	dd000415 	stw	r20,16(sp)
    b72c:	dcc00315 	stw	r19,12(sp)
    b730:	dc000015 	stw	r16,0(sp)
    b734:	dfc00515 	stw	ra,20(sp)
    b738:	dc800215 	stw	r18,8(sp)
    b73c:	dc400115 	stw	r17,4(sp)
    b740:	3021883a 	mov	r16,r6
    b744:	2027883a 	mov	r19,r4
    b748:	2829883a 	mov	r20,r5
    b74c:	10002b1e 	bne	r2,zero,b7fc <__pow5mult+0xdc>
    b750:	8025d0ba 	srai	r18,r16,2
    b754:	90001b26 	beq	r18,zero,b7c4 <__pow5mult+0xa4>
    b758:	9c001217 	ldw	r16,72(r19)
    b75c:	8000081e 	bne	r16,zero,b780 <__pow5mult+0x60>
    b760:	00003006 	br	b824 <__pow5mult+0x104>
    b764:	800b883a 	mov	r5,r16
    b768:	800d883a 	mov	r6,r16
    b76c:	9809883a 	mov	r4,r19
    b770:	90001426 	beq	r18,zero,b7c4 <__pow5mult+0xa4>
    b774:	80800017 	ldw	r2,0(r16)
    b778:	10001b26 	beq	r2,zero,b7e8 <__pow5mult+0xc8>
    b77c:	1021883a 	mov	r16,r2
    b780:	9080004c 	andi	r2,r18,1
    b784:	1005003a 	cmpeq	r2,r2,zero
    b788:	9025d07a 	srai	r18,r18,1
    b78c:	800d883a 	mov	r6,r16
    b790:	9809883a 	mov	r4,r19
    b794:	a00b883a 	mov	r5,r20
    b798:	103ff21e 	bne	r2,zero,b764 <__pow5mult+0x44>
    b79c:	000b3fc0 	call	b3fc <__multiply>
    b7a0:	a00b883a 	mov	r5,r20
    b7a4:	9809883a 	mov	r4,r19
    b7a8:	1023883a 	mov	r17,r2
    b7ac:	000a96c0 	call	a96c <_Bfree>
    b7b0:	8829883a 	mov	r20,r17
    b7b4:	800b883a 	mov	r5,r16
    b7b8:	800d883a 	mov	r6,r16
    b7bc:	9809883a 	mov	r4,r19
    b7c0:	903fec1e 	bne	r18,zero,b774 <__pow5mult+0x54>
    b7c4:	a005883a 	mov	r2,r20
    b7c8:	dfc00517 	ldw	ra,20(sp)
    b7cc:	dd000417 	ldw	r20,16(sp)
    b7d0:	dcc00317 	ldw	r19,12(sp)
    b7d4:	dc800217 	ldw	r18,8(sp)
    b7d8:	dc400117 	ldw	r17,4(sp)
    b7dc:	dc000017 	ldw	r16,0(sp)
    b7e0:	dec00604 	addi	sp,sp,24
    b7e4:	f800283a 	ret
    b7e8:	000b3fc0 	call	b3fc <__multiply>
    b7ec:	80800015 	stw	r2,0(r16)
    b7f0:	1021883a 	mov	r16,r2
    b7f4:	10000015 	stw	zero,0(r2)
    b7f8:	003fe106 	br	b780 <__pow5mult+0x60>
    b7fc:	1085883a 	add	r2,r2,r2
    b800:	00c00074 	movhi	r3,1
    b804:	18c0d804 	addi	r3,r3,864
    b808:	1085883a 	add	r2,r2,r2
    b80c:	10c5883a 	add	r2,r2,r3
    b810:	11bfff17 	ldw	r6,-4(r2)
    b814:	000f883a 	mov	r7,zero
    b818:	000b6200 	call	b620 <__multadd>
    b81c:	1029883a 	mov	r20,r2
    b820:	003fcb06 	br	b750 <__pow5mult+0x30>
    b824:	9809883a 	mov	r4,r19
    b828:	01409c44 	movi	r5,625
    b82c:	000b5e40 	call	b5e4 <__i2b>
    b830:	98801215 	stw	r2,72(r19)
    b834:	1021883a 	mov	r16,r2
    b838:	10000015 	stw	zero,0(r2)
    b83c:	003fd006 	br	b780 <__pow5mult+0x60>

0000b840 <__s2b>:
    b840:	defff904 	addi	sp,sp,-28
    b844:	dcc00315 	stw	r19,12(sp)
    b848:	dc800215 	stw	r18,8(sp)
    b84c:	2827883a 	mov	r19,r5
    b850:	2025883a 	mov	r18,r4
    b854:	01400244 	movi	r5,9
    b858:	39000204 	addi	r4,r7,8
    b85c:	dd000415 	stw	r20,16(sp)
    b860:	dc400115 	stw	r17,4(sp)
    b864:	dfc00615 	stw	ra,24(sp)
    b868:	dd400515 	stw	r21,20(sp)
    b86c:	dc000015 	stw	r16,0(sp)
    b870:	3829883a 	mov	r20,r7
    b874:	3023883a 	mov	r17,r6
    b878:	000d0b00 	call	d0b0 <__divsi3>
    b87c:	00c00044 	movi	r3,1
    b880:	1880350e 	bge	r3,r2,b958 <__s2b+0x118>
    b884:	000b883a 	mov	r5,zero
    b888:	18c7883a 	add	r3,r3,r3
    b88c:	29400044 	addi	r5,r5,1
    b890:	18bffd16 	blt	r3,r2,b888 <__s2b+0x48>
    b894:	9009883a 	mov	r4,r18
    b898:	000aeec0 	call	aeec <_Balloc>
    b89c:	1011883a 	mov	r8,r2
    b8a0:	d8800717 	ldw	r2,28(sp)
    b8a4:	00c00044 	movi	r3,1
    b8a8:	01800244 	movi	r6,9
    b8ac:	40800515 	stw	r2,20(r8)
    b8b0:	40c00415 	stw	r3,16(r8)
    b8b4:	3440260e 	bge	r6,r17,b950 <__s2b+0x110>
    b8b8:	3021883a 	mov	r16,r6
    b8bc:	99ab883a 	add	r21,r19,r6
    b8c0:	9c05883a 	add	r2,r19,r16
    b8c4:	11c00007 	ldb	r7,0(r2)
    b8c8:	400b883a 	mov	r5,r8
    b8cc:	9009883a 	mov	r4,r18
    b8d0:	39fff404 	addi	r7,r7,-48
    b8d4:	01800284 	movi	r6,10
    b8d8:	000b6200 	call	b620 <__multadd>
    b8dc:	84000044 	addi	r16,r16,1
    b8e0:	1011883a 	mov	r8,r2
    b8e4:	8c3ff61e 	bne	r17,r16,b8c0 <__s2b+0x80>
    b8e8:	ac45883a 	add	r2,r21,r17
    b8ec:	117ffe04 	addi	r5,r2,-8
    b8f0:	880d883a 	mov	r6,r17
    b8f4:	35000c0e 	bge	r6,r20,b928 <__s2b+0xe8>
    b8f8:	a185c83a 	sub	r2,r20,r6
    b8fc:	2821883a 	mov	r16,r5
    b900:	28a3883a 	add	r17,r5,r2
    b904:	81c00007 	ldb	r7,0(r16)
    b908:	400b883a 	mov	r5,r8
    b90c:	9009883a 	mov	r4,r18
    b910:	39fff404 	addi	r7,r7,-48
    b914:	01800284 	movi	r6,10
    b918:	000b6200 	call	b620 <__multadd>
    b91c:	84000044 	addi	r16,r16,1
    b920:	1011883a 	mov	r8,r2
    b924:	847ff71e 	bne	r16,r17,b904 <__s2b+0xc4>
    b928:	4005883a 	mov	r2,r8
    b92c:	dfc00617 	ldw	ra,24(sp)
    b930:	dd400517 	ldw	r21,20(sp)
    b934:	dd000417 	ldw	r20,16(sp)
    b938:	dcc00317 	ldw	r19,12(sp)
    b93c:	dc800217 	ldw	r18,8(sp)
    b940:	dc400117 	ldw	r17,4(sp)
    b944:	dc000017 	ldw	r16,0(sp)
    b948:	dec00704 	addi	sp,sp,28
    b94c:	f800283a 	ret
    b950:	99400284 	addi	r5,r19,10
    b954:	003fe706 	br	b8f4 <__s2b+0xb4>
    b958:	000b883a 	mov	r5,zero
    b95c:	003fcd06 	br	b894 <__s2b+0x54>

0000b960 <_read_r>:
    b960:	defffd04 	addi	sp,sp,-12
    b964:	dc000015 	stw	r16,0(sp)
    b968:	04000074 	movhi	r16,1
    b96c:	8410e504 	addi	r16,r16,17300
    b970:	dc400115 	stw	r17,4(sp)
    b974:	80000015 	stw	zero,0(r16)
    b978:	2023883a 	mov	r17,r4
    b97c:	2809883a 	mov	r4,r5
    b980:	300b883a 	mov	r5,r6
    b984:	380d883a 	mov	r6,r7
    b988:	dfc00215 	stw	ra,8(sp)
    b98c:	000d8b40 	call	d8b4 <read>
    b990:	1007883a 	mov	r3,r2
    b994:	00bfffc4 	movi	r2,-1
    b998:	18800626 	beq	r3,r2,b9b4 <_read_r+0x54>
    b99c:	1805883a 	mov	r2,r3
    b9a0:	dfc00217 	ldw	ra,8(sp)
    b9a4:	dc400117 	ldw	r17,4(sp)
    b9a8:	dc000017 	ldw	r16,0(sp)
    b9ac:	dec00304 	addi	sp,sp,12
    b9b0:	f800283a 	ret
    b9b4:	80800017 	ldw	r2,0(r16)
    b9b8:	103ff826 	beq	r2,zero,b99c <_read_r+0x3c>
    b9bc:	88800015 	stw	r2,0(r17)
    b9c0:	1805883a 	mov	r2,r3
    b9c4:	dfc00217 	ldw	ra,8(sp)
    b9c8:	dc400117 	ldw	r17,4(sp)
    b9cc:	dc000017 	ldw	r16,0(sp)
    b9d0:	dec00304 	addi	sp,sp,12
    b9d4:	f800283a 	ret

0000b9d8 <_realloc_r>:
    b9d8:	defff404 	addi	sp,sp,-48
    b9dc:	dd800815 	stw	r22,32(sp)
    b9e0:	dc800415 	stw	r18,16(sp)
    b9e4:	dc400315 	stw	r17,12(sp)
    b9e8:	dfc00b15 	stw	ra,44(sp)
    b9ec:	df000a15 	stw	fp,40(sp)
    b9f0:	ddc00915 	stw	r23,36(sp)
    b9f4:	dd400715 	stw	r21,28(sp)
    b9f8:	dd000615 	stw	r20,24(sp)
    b9fc:	dcc00515 	stw	r19,20(sp)
    ba00:	dc000215 	stw	r16,8(sp)
    ba04:	2825883a 	mov	r18,r5
    ba08:	3023883a 	mov	r17,r6
    ba0c:	202d883a 	mov	r22,r4
    ba10:	2800c926 	beq	r5,zero,bd38 <_realloc_r+0x360>
    ba14:	000d7300 	call	d730 <__malloc_lock>
    ba18:	943ffe04 	addi	r16,r18,-8
    ba1c:	88c002c4 	addi	r3,r17,11
    ba20:	00800584 	movi	r2,22
    ba24:	82000117 	ldw	r8,4(r16)
    ba28:	10c01b2e 	bgeu	r2,r3,ba98 <_realloc_r+0xc0>
    ba2c:	00bffe04 	movi	r2,-8
    ba30:	188e703a 	and	r7,r3,r2
    ba34:	3839883a 	mov	fp,r7
    ba38:	38001a16 	blt	r7,zero,baa4 <_realloc_r+0xcc>
    ba3c:	e4401936 	bltu	fp,r17,baa4 <_realloc_r+0xcc>
    ba40:	013fff04 	movi	r4,-4
    ba44:	4126703a 	and	r19,r8,r4
    ba48:	99c02616 	blt	r19,r7,bae4 <_realloc_r+0x10c>
    ba4c:	802b883a 	mov	r21,r16
    ba50:	9829883a 	mov	r20,r19
    ba54:	84000204 	addi	r16,r16,8
    ba58:	a80f883a 	mov	r7,r21
    ba5c:	a70dc83a 	sub	r6,r20,fp
    ba60:	008003c4 	movi	r2,15
    ba64:	1180c136 	bltu	r2,r6,bd6c <_realloc_r+0x394>
    ba68:	38800117 	ldw	r2,4(r7)
    ba6c:	a549883a 	add	r4,r20,r21
    ba70:	1080004c 	andi	r2,r2,1
    ba74:	a084b03a 	or	r2,r20,r2
    ba78:	38800115 	stw	r2,4(r7)
    ba7c:	20c00117 	ldw	r3,4(r4)
    ba80:	18c00054 	ori	r3,r3,1
    ba84:	20c00115 	stw	r3,4(r4)
    ba88:	b009883a 	mov	r4,r22
    ba8c:	000d7340 	call	d734 <__malloc_unlock>
    ba90:	8023883a 	mov	r17,r16
    ba94:	00000606 	br	bab0 <_realloc_r+0xd8>
    ba98:	01c00404 	movi	r7,16
    ba9c:	3839883a 	mov	fp,r7
    baa0:	e47fe72e 	bgeu	fp,r17,ba40 <_realloc_r+0x68>
    baa4:	00800304 	movi	r2,12
    baa8:	0023883a 	mov	r17,zero
    baac:	b0800015 	stw	r2,0(r22)
    bab0:	8805883a 	mov	r2,r17
    bab4:	dfc00b17 	ldw	ra,44(sp)
    bab8:	df000a17 	ldw	fp,40(sp)
    babc:	ddc00917 	ldw	r23,36(sp)
    bac0:	dd800817 	ldw	r22,32(sp)
    bac4:	dd400717 	ldw	r21,28(sp)
    bac8:	dd000617 	ldw	r20,24(sp)
    bacc:	dcc00517 	ldw	r19,20(sp)
    bad0:	dc800417 	ldw	r18,16(sp)
    bad4:	dc400317 	ldw	r17,12(sp)
    bad8:	dc000217 	ldw	r16,8(sp)
    badc:	dec00c04 	addi	sp,sp,48
    bae0:	f800283a 	ret
    bae4:	00800074 	movhi	r2,1
    bae8:	10826204 	addi	r2,r2,2440
    baec:	12400217 	ldw	r9,8(r2)
    baf0:	84cd883a 	add	r6,r16,r19
    baf4:	802b883a 	mov	r21,r16
    baf8:	3240b926 	beq	r6,r9,bde0 <_realloc_r+0x408>
    bafc:	31400117 	ldw	r5,4(r6)
    bb00:	00bfff84 	movi	r2,-2
    bb04:	2884703a 	and	r2,r5,r2
    bb08:	1185883a 	add	r2,r2,r6
    bb0c:	10c00117 	ldw	r3,4(r2)
    bb10:	18c0004c 	andi	r3,r3,1
    bb14:	1807003a 	cmpeq	r3,r3,zero
    bb18:	1800a326 	beq	r3,zero,bda8 <_realloc_r+0x3d0>
    bb1c:	2908703a 	and	r4,r5,r4
    bb20:	9929883a 	add	r20,r19,r4
    bb24:	a1c0a30e 	bge	r20,r7,bdb4 <_realloc_r+0x3dc>
    bb28:	4080004c 	andi	r2,r8,1
    bb2c:	1000551e 	bne	r2,zero,bc84 <_realloc_r+0x2ac>
    bb30:	80800017 	ldw	r2,0(r16)
    bb34:	80afc83a 	sub	r23,r16,r2
    bb38:	b8c00117 	ldw	r3,4(r23)
    bb3c:	00bfff04 	movi	r2,-4
    bb40:	1884703a 	and	r2,r3,r2
    bb44:	30002e26 	beq	r6,zero,bc00 <_realloc_r+0x228>
    bb48:	3240b926 	beq	r6,r9,be30 <_realloc_r+0x458>
    bb4c:	98a9883a 	add	r20,r19,r2
    bb50:	2509883a 	add	r4,r4,r20
    bb54:	d9000015 	stw	r4,0(sp)
    bb58:	21c02a16 	blt	r4,r7,bc04 <_realloc_r+0x22c>
    bb5c:	30800317 	ldw	r2,12(r6)
    bb60:	30c00217 	ldw	r3,8(r6)
    bb64:	01400904 	movi	r5,36
    bb68:	99bfff04 	addi	r6,r19,-4
    bb6c:	18800315 	stw	r2,12(r3)
    bb70:	10c00215 	stw	r3,8(r2)
    bb74:	b9000317 	ldw	r4,12(r23)
    bb78:	b8800217 	ldw	r2,8(r23)
    bb7c:	b82b883a 	mov	r21,r23
    bb80:	bc000204 	addi	r16,r23,8
    bb84:	20800215 	stw	r2,8(r4)
    bb88:	11000315 	stw	r4,12(r2)
    bb8c:	2980e436 	bltu	r5,r6,bf20 <_realloc_r+0x548>
    bb90:	008004c4 	movi	r2,19
    bb94:	9009883a 	mov	r4,r18
    bb98:	8011883a 	mov	r8,r16
    bb9c:	11800f2e 	bgeu	r2,r6,bbdc <_realloc_r+0x204>
    bba0:	90800017 	ldw	r2,0(r18)
    bba4:	ba000404 	addi	r8,r23,16
    bba8:	91000204 	addi	r4,r18,8
    bbac:	b8800215 	stw	r2,8(r23)
    bbb0:	90c00117 	ldw	r3,4(r18)
    bbb4:	008006c4 	movi	r2,27
    bbb8:	b8c00315 	stw	r3,12(r23)
    bbbc:	1180072e 	bgeu	r2,r6,bbdc <_realloc_r+0x204>
    bbc0:	90c00217 	ldw	r3,8(r18)
    bbc4:	ba000604 	addi	r8,r23,24
    bbc8:	91000404 	addi	r4,r18,16
    bbcc:	b8c00415 	stw	r3,16(r23)
    bbd0:	90800317 	ldw	r2,12(r18)
    bbd4:	b8800515 	stw	r2,20(r23)
    bbd8:	3140e726 	beq	r6,r5,bf78 <_realloc_r+0x5a0>
    bbdc:	20800017 	ldw	r2,0(r4)
    bbe0:	dd000017 	ldw	r20,0(sp)
    bbe4:	b80f883a 	mov	r7,r23
    bbe8:	40800015 	stw	r2,0(r8)
    bbec:	20c00117 	ldw	r3,4(r4)
    bbf0:	40c00115 	stw	r3,4(r8)
    bbf4:	20800217 	ldw	r2,8(r4)
    bbf8:	40800215 	stw	r2,8(r8)
    bbfc:	003f9706 	br	ba5c <_realloc_r+0x84>
    bc00:	98a9883a 	add	r20,r19,r2
    bc04:	a1c01f16 	blt	r20,r7,bc84 <_realloc_r+0x2ac>
    bc08:	b8c00317 	ldw	r3,12(r23)
    bc0c:	b8800217 	ldw	r2,8(r23)
    bc10:	99bfff04 	addi	r6,r19,-4
    bc14:	01400904 	movi	r5,36
    bc18:	b82b883a 	mov	r21,r23
    bc1c:	18800215 	stw	r2,8(r3)
    bc20:	10c00315 	stw	r3,12(r2)
    bc24:	bc000204 	addi	r16,r23,8
    bc28:	2980c336 	bltu	r5,r6,bf38 <_realloc_r+0x560>
    bc2c:	008004c4 	movi	r2,19
    bc30:	9009883a 	mov	r4,r18
    bc34:	8011883a 	mov	r8,r16
    bc38:	11800f2e 	bgeu	r2,r6,bc78 <_realloc_r+0x2a0>
    bc3c:	90800017 	ldw	r2,0(r18)
    bc40:	ba000404 	addi	r8,r23,16
    bc44:	91000204 	addi	r4,r18,8
    bc48:	b8800215 	stw	r2,8(r23)
    bc4c:	90c00117 	ldw	r3,4(r18)
    bc50:	008006c4 	movi	r2,27
    bc54:	b8c00315 	stw	r3,12(r23)
    bc58:	1180072e 	bgeu	r2,r6,bc78 <_realloc_r+0x2a0>
    bc5c:	90c00217 	ldw	r3,8(r18)
    bc60:	ba000604 	addi	r8,r23,24
    bc64:	91000404 	addi	r4,r18,16
    bc68:	b8c00415 	stw	r3,16(r23)
    bc6c:	90800317 	ldw	r2,12(r18)
    bc70:	b8800515 	stw	r2,20(r23)
    bc74:	3140c726 	beq	r6,r5,bf94 <_realloc_r+0x5bc>
    bc78:	20800017 	ldw	r2,0(r4)
    bc7c:	b80f883a 	mov	r7,r23
    bc80:	003fd906 	br	bbe8 <_realloc_r+0x210>
    bc84:	880b883a 	mov	r5,r17
    bc88:	b009883a 	mov	r4,r22
    bc8c:	00055740 	call	5574 <_malloc_r>
    bc90:	1023883a 	mov	r17,r2
    bc94:	10002526 	beq	r2,zero,bd2c <_realloc_r+0x354>
    bc98:	80800117 	ldw	r2,4(r16)
    bc9c:	00ffff84 	movi	r3,-2
    bca0:	893ffe04 	addi	r4,r17,-8
    bca4:	10c4703a 	and	r2,r2,r3
    bca8:	8085883a 	add	r2,r16,r2
    bcac:	20809526 	beq	r4,r2,bf04 <_realloc_r+0x52c>
    bcb0:	99bfff04 	addi	r6,r19,-4
    bcb4:	01c00904 	movi	r7,36
    bcb8:	39804536 	bltu	r7,r6,bdd0 <_realloc_r+0x3f8>
    bcbc:	008004c4 	movi	r2,19
    bcc0:	9009883a 	mov	r4,r18
    bcc4:	880b883a 	mov	r5,r17
    bcc8:	11800f2e 	bgeu	r2,r6,bd08 <_realloc_r+0x330>
    bccc:	90800017 	ldw	r2,0(r18)
    bcd0:	89400204 	addi	r5,r17,8
    bcd4:	91000204 	addi	r4,r18,8
    bcd8:	88800015 	stw	r2,0(r17)
    bcdc:	90c00117 	ldw	r3,4(r18)
    bce0:	008006c4 	movi	r2,27
    bce4:	88c00115 	stw	r3,4(r17)
    bce8:	1180072e 	bgeu	r2,r6,bd08 <_realloc_r+0x330>
    bcec:	90c00217 	ldw	r3,8(r18)
    bcf0:	89400404 	addi	r5,r17,16
    bcf4:	91000404 	addi	r4,r18,16
    bcf8:	88c00215 	stw	r3,8(r17)
    bcfc:	90800317 	ldw	r2,12(r18)
    bd00:	88800315 	stw	r2,12(r17)
    bd04:	31c09126 	beq	r6,r7,bf4c <_realloc_r+0x574>
    bd08:	20800017 	ldw	r2,0(r4)
    bd0c:	28800015 	stw	r2,0(r5)
    bd10:	20c00117 	ldw	r3,4(r4)
    bd14:	28c00115 	stw	r3,4(r5)
    bd18:	20800217 	ldw	r2,8(r4)
    bd1c:	28800215 	stw	r2,8(r5)
    bd20:	900b883a 	mov	r5,r18
    bd24:	b009883a 	mov	r4,r22
    bd28:	000499c0 	call	499c <_free_r>
    bd2c:	b009883a 	mov	r4,r22
    bd30:	000d7340 	call	d734 <__malloc_unlock>
    bd34:	003f5e06 	br	bab0 <_realloc_r+0xd8>
    bd38:	300b883a 	mov	r5,r6
    bd3c:	dfc00b17 	ldw	ra,44(sp)
    bd40:	df000a17 	ldw	fp,40(sp)
    bd44:	ddc00917 	ldw	r23,36(sp)
    bd48:	dd800817 	ldw	r22,32(sp)
    bd4c:	dd400717 	ldw	r21,28(sp)
    bd50:	dd000617 	ldw	r20,24(sp)
    bd54:	dcc00517 	ldw	r19,20(sp)
    bd58:	dc800417 	ldw	r18,16(sp)
    bd5c:	dc400317 	ldw	r17,12(sp)
    bd60:	dc000217 	ldw	r16,8(sp)
    bd64:	dec00c04 	addi	sp,sp,48
    bd68:	00055741 	jmpi	5574 <_malloc_r>
    bd6c:	38800117 	ldw	r2,4(r7)
    bd70:	e54b883a 	add	r5,fp,r21
    bd74:	31000054 	ori	r4,r6,1
    bd78:	1080004c 	andi	r2,r2,1
    bd7c:	1704b03a 	or	r2,r2,fp
    bd80:	38800115 	stw	r2,4(r7)
    bd84:	29000115 	stw	r4,4(r5)
    bd88:	2987883a 	add	r3,r5,r6
    bd8c:	18800117 	ldw	r2,4(r3)
    bd90:	29400204 	addi	r5,r5,8
    bd94:	b009883a 	mov	r4,r22
    bd98:	10800054 	ori	r2,r2,1
    bd9c:	18800115 	stw	r2,4(r3)
    bda0:	000499c0 	call	499c <_free_r>
    bda4:	003f3806 	br	ba88 <_realloc_r+0xb0>
    bda8:	000d883a 	mov	r6,zero
    bdac:	0009883a 	mov	r4,zero
    bdb0:	003f5d06 	br	bb28 <_realloc_r+0x150>
    bdb4:	30c00217 	ldw	r3,8(r6)
    bdb8:	30800317 	ldw	r2,12(r6)
    bdbc:	800f883a 	mov	r7,r16
    bdc0:	84000204 	addi	r16,r16,8
    bdc4:	10c00215 	stw	r3,8(r2)
    bdc8:	18800315 	stw	r2,12(r3)
    bdcc:	003f2306 	br	ba5c <_realloc_r+0x84>
    bdd0:	8809883a 	mov	r4,r17
    bdd4:	900b883a 	mov	r5,r18
    bdd8:	000a88c0 	call	a88c <memmove>
    bddc:	003fd006 	br	bd20 <_realloc_r+0x348>
    bde0:	30800117 	ldw	r2,4(r6)
    bde4:	e0c00404 	addi	r3,fp,16
    bde8:	1108703a 	and	r4,r2,r4
    bdec:	9905883a 	add	r2,r19,r4
    bdf0:	10ff4d16 	blt	r2,r3,bb28 <_realloc_r+0x150>
    bdf4:	1705c83a 	sub	r2,r2,fp
    bdf8:	870b883a 	add	r5,r16,fp
    bdfc:	10800054 	ori	r2,r2,1
    be00:	28800115 	stw	r2,4(r5)
    be04:	80c00117 	ldw	r3,4(r16)
    be08:	00800074 	movhi	r2,1
    be0c:	10826204 	addi	r2,r2,2440
    be10:	b009883a 	mov	r4,r22
    be14:	18c0004c 	andi	r3,r3,1
    be18:	e0c6b03a 	or	r3,fp,r3
    be1c:	11400215 	stw	r5,8(r2)
    be20:	80c00115 	stw	r3,4(r16)
    be24:	000d7340 	call	d734 <__malloc_unlock>
    be28:	84400204 	addi	r17,r16,8
    be2c:	003f2006 	br	bab0 <_realloc_r+0xd8>
    be30:	98a9883a 	add	r20,r19,r2
    be34:	2509883a 	add	r4,r4,r20
    be38:	e0800404 	addi	r2,fp,16
    be3c:	d9000115 	stw	r4,4(sp)
    be40:	20bf7016 	blt	r4,r2,bc04 <_realloc_r+0x22c>
    be44:	b8c00317 	ldw	r3,12(r23)
    be48:	b8800217 	ldw	r2,8(r23)
    be4c:	99bfff04 	addi	r6,r19,-4
    be50:	01400904 	movi	r5,36
    be54:	18800215 	stw	r2,8(r3)
    be58:	10c00315 	stw	r3,12(r2)
    be5c:	bc400204 	addi	r17,r23,8
    be60:	29804136 	bltu	r5,r6,bf68 <_realloc_r+0x590>
    be64:	008004c4 	movi	r2,19
    be68:	9009883a 	mov	r4,r18
    be6c:	880f883a 	mov	r7,r17
    be70:	11800f2e 	bgeu	r2,r6,beb0 <_realloc_r+0x4d8>
    be74:	90800017 	ldw	r2,0(r18)
    be78:	b9c00404 	addi	r7,r23,16
    be7c:	91000204 	addi	r4,r18,8
    be80:	b8800215 	stw	r2,8(r23)
    be84:	90c00117 	ldw	r3,4(r18)
    be88:	008006c4 	movi	r2,27
    be8c:	b8c00315 	stw	r3,12(r23)
    be90:	1180072e 	bgeu	r2,r6,beb0 <_realloc_r+0x4d8>
    be94:	90c00217 	ldw	r3,8(r18)
    be98:	b9c00604 	addi	r7,r23,24
    be9c:	91000404 	addi	r4,r18,16
    bea0:	b8c00415 	stw	r3,16(r23)
    bea4:	90800317 	ldw	r2,12(r18)
    bea8:	b8800515 	stw	r2,20(r23)
    beac:	31404026 	beq	r6,r5,bfb0 <_realloc_r+0x5d8>
    beb0:	20800017 	ldw	r2,0(r4)
    beb4:	38800015 	stw	r2,0(r7)
    beb8:	20c00117 	ldw	r3,4(r4)
    bebc:	38c00115 	stw	r3,4(r7)
    bec0:	20800217 	ldw	r2,8(r4)
    bec4:	38800215 	stw	r2,8(r7)
    bec8:	d8c00117 	ldw	r3,4(sp)
    becc:	bf0b883a 	add	r5,r23,fp
    bed0:	b009883a 	mov	r4,r22
    bed4:	1f05c83a 	sub	r2,r3,fp
    bed8:	10800054 	ori	r2,r2,1
    bedc:	28800115 	stw	r2,4(r5)
    bee0:	b8c00117 	ldw	r3,4(r23)
    bee4:	00800074 	movhi	r2,1
    bee8:	10826204 	addi	r2,r2,2440
    beec:	11400215 	stw	r5,8(r2)
    bef0:	18c0004c 	andi	r3,r3,1
    bef4:	e0c6b03a 	or	r3,fp,r3
    bef8:	b8c00115 	stw	r3,4(r23)
    befc:	000d7340 	call	d734 <__malloc_unlock>
    bf00:	003eeb06 	br	bab0 <_realloc_r+0xd8>
    bf04:	20800117 	ldw	r2,4(r4)
    bf08:	00ffff04 	movi	r3,-4
    bf0c:	800f883a 	mov	r7,r16
    bf10:	10c4703a 	and	r2,r2,r3
    bf14:	98a9883a 	add	r20,r19,r2
    bf18:	84000204 	addi	r16,r16,8
    bf1c:	003ecf06 	br	ba5c <_realloc_r+0x84>
    bf20:	900b883a 	mov	r5,r18
    bf24:	8009883a 	mov	r4,r16
    bf28:	000a88c0 	call	a88c <memmove>
    bf2c:	dd000017 	ldw	r20,0(sp)
    bf30:	b80f883a 	mov	r7,r23
    bf34:	003ec906 	br	ba5c <_realloc_r+0x84>
    bf38:	900b883a 	mov	r5,r18
    bf3c:	8009883a 	mov	r4,r16
    bf40:	000a88c0 	call	a88c <memmove>
    bf44:	b80f883a 	mov	r7,r23
    bf48:	003ec406 	br	ba5c <_realloc_r+0x84>
    bf4c:	90c00417 	ldw	r3,16(r18)
    bf50:	89400604 	addi	r5,r17,24
    bf54:	91000604 	addi	r4,r18,24
    bf58:	88c00415 	stw	r3,16(r17)
    bf5c:	90800517 	ldw	r2,20(r18)
    bf60:	88800515 	stw	r2,20(r17)
    bf64:	003f6806 	br	bd08 <_realloc_r+0x330>
    bf68:	900b883a 	mov	r5,r18
    bf6c:	8809883a 	mov	r4,r17
    bf70:	000a88c0 	call	a88c <memmove>
    bf74:	003fd406 	br	bec8 <_realloc_r+0x4f0>
    bf78:	90c00417 	ldw	r3,16(r18)
    bf7c:	91000604 	addi	r4,r18,24
    bf80:	ba000804 	addi	r8,r23,32
    bf84:	b8c00615 	stw	r3,24(r23)
    bf88:	90800517 	ldw	r2,20(r18)
    bf8c:	b8800715 	stw	r2,28(r23)
    bf90:	003f1206 	br	bbdc <_realloc_r+0x204>
    bf94:	90c00417 	ldw	r3,16(r18)
    bf98:	91000604 	addi	r4,r18,24
    bf9c:	ba000804 	addi	r8,r23,32
    bfa0:	b8c00615 	stw	r3,24(r23)
    bfa4:	90800517 	ldw	r2,20(r18)
    bfa8:	b8800715 	stw	r2,28(r23)
    bfac:	003f3206 	br	bc78 <_realloc_r+0x2a0>
    bfb0:	90c00417 	ldw	r3,16(r18)
    bfb4:	91000604 	addi	r4,r18,24
    bfb8:	b9c00804 	addi	r7,r23,32
    bfbc:	b8c00615 	stw	r3,24(r23)
    bfc0:	90800517 	ldw	r2,20(r18)
    bfc4:	b8800715 	stw	r2,28(r23)
    bfc8:	003fb906 	br	beb0 <_realloc_r+0x4d8>

0000bfcc <__isinfd>:
    bfcc:	200d883a 	mov	r6,r4
    bfd0:	0109c83a 	sub	r4,zero,r4
    bfd4:	2188b03a 	or	r4,r4,r6
    bfd8:	2008d7fa 	srli	r4,r4,31
    bfdc:	00a00034 	movhi	r2,32768
    bfe0:	10bfffc4 	addi	r2,r2,-1
    bfe4:	1144703a 	and	r2,r2,r5
    bfe8:	2088b03a 	or	r4,r4,r2
    bfec:	009ffc34 	movhi	r2,32752
    bff0:	1105c83a 	sub	r2,r2,r4
    bff4:	0087c83a 	sub	r3,zero,r2
    bff8:	10c4b03a 	or	r2,r2,r3
    bffc:	1004d7fa 	srli	r2,r2,31
    c000:	00c00044 	movi	r3,1
    c004:	1885c83a 	sub	r2,r3,r2
    c008:	f800283a 	ret

0000c00c <strcmp>:
    c00c:	2144b03a 	or	r2,r4,r5
    c010:	108000cc 	andi	r2,r2,3
    c014:	10001d1e 	bne	r2,zero,c08c <strcmp+0x80>
    c018:	200f883a 	mov	r7,r4
    c01c:	28800017 	ldw	r2,0(r5)
    c020:	21000017 	ldw	r4,0(r4)
    c024:	280d883a 	mov	r6,r5
    c028:	2080161e 	bne	r4,r2,c084 <strcmp+0x78>
    c02c:	023fbff4 	movhi	r8,65279
    c030:	423fbfc4 	addi	r8,r8,-257
    c034:	2207883a 	add	r3,r4,r8
    c038:	01602074 	movhi	r5,32897
    c03c:	29602004 	addi	r5,r5,-32640
    c040:	1946703a 	and	r3,r3,r5
    c044:	0104303a 	nor	r2,zero,r4
    c048:	10c4703a 	and	r2,r2,r3
    c04c:	10001c1e 	bne	r2,zero,c0c0 <strcmp+0xb4>
    c050:	4013883a 	mov	r9,r8
    c054:	2811883a 	mov	r8,r5
    c058:	00000106 	br	c060 <strcmp+0x54>
    c05c:	1800181e 	bne	r3,zero,c0c0 <strcmp+0xb4>
    c060:	39c00104 	addi	r7,r7,4
    c064:	39000017 	ldw	r4,0(r7)
    c068:	31800104 	addi	r6,r6,4
    c06c:	31400017 	ldw	r5,0(r6)
    c070:	2245883a 	add	r2,r4,r9
    c074:	1204703a 	and	r2,r2,r8
    c078:	0106303a 	nor	r3,zero,r4
    c07c:	1886703a 	and	r3,r3,r2
    c080:	217ff626 	beq	r4,r5,c05c <strcmp+0x50>
    c084:	3809883a 	mov	r4,r7
    c088:	300b883a 	mov	r5,r6
    c08c:	20c00007 	ldb	r3,0(r4)
    c090:	1800051e 	bne	r3,zero,c0a8 <strcmp+0x9c>
    c094:	00000606 	br	c0b0 <strcmp+0xa4>
    c098:	21000044 	addi	r4,r4,1
    c09c:	20c00007 	ldb	r3,0(r4)
    c0a0:	29400044 	addi	r5,r5,1
    c0a4:	18000226 	beq	r3,zero,c0b0 <strcmp+0xa4>
    c0a8:	28800007 	ldb	r2,0(r5)
    c0ac:	18bffa26 	beq	r3,r2,c098 <strcmp+0x8c>
    c0b0:	20c00003 	ldbu	r3,0(r4)
    c0b4:	28800003 	ldbu	r2,0(r5)
    c0b8:	1885c83a 	sub	r2,r3,r2
    c0bc:	f800283a 	ret
    c0c0:	0005883a 	mov	r2,zero
    c0c4:	f800283a 	ret

0000c0c8 <_calloc_r>:
    c0c8:	298b383a 	mul	r5,r5,r6
    c0cc:	defffe04 	addi	sp,sp,-8
    c0d0:	dc000015 	stw	r16,0(sp)
    c0d4:	dfc00115 	stw	ra,4(sp)
    c0d8:	00055740 	call	5574 <_malloc_r>
    c0dc:	1021883a 	mov	r16,r2
    c0e0:	01c00904 	movi	r7,36
    c0e4:	10000d26 	beq	r2,zero,c11c <_calloc_r+0x54>
    c0e8:	10ffff17 	ldw	r3,-4(r2)
    c0ec:	1009883a 	mov	r4,r2
    c0f0:	00bfff04 	movi	r2,-4
    c0f4:	1886703a 	and	r3,r3,r2
    c0f8:	1887883a 	add	r3,r3,r2
    c0fc:	180d883a 	mov	r6,r3
    c100:	000b883a 	mov	r5,zero
    c104:	38c01736 	bltu	r7,r3,c164 <_calloc_r+0x9c>
    c108:	008004c4 	movi	r2,19
    c10c:	10c00836 	bltu	r2,r3,c130 <_calloc_r+0x68>
    c110:	20000215 	stw	zero,8(r4)
    c114:	20000015 	stw	zero,0(r4)
    c118:	20000115 	stw	zero,4(r4)
    c11c:	8005883a 	mov	r2,r16
    c120:	dfc00117 	ldw	ra,4(sp)
    c124:	dc000017 	ldw	r16,0(sp)
    c128:	dec00204 	addi	sp,sp,8
    c12c:	f800283a 	ret
    c130:	008006c4 	movi	r2,27
    c134:	80000015 	stw	zero,0(r16)
    c138:	80000115 	stw	zero,4(r16)
    c13c:	81000204 	addi	r4,r16,8
    c140:	10fff32e 	bgeu	r2,r3,c110 <_calloc_r+0x48>
    c144:	80000215 	stw	zero,8(r16)
    c148:	80000315 	stw	zero,12(r16)
    c14c:	81000404 	addi	r4,r16,16
    c150:	19ffef1e 	bne	r3,r7,c110 <_calloc_r+0x48>
    c154:	81000604 	addi	r4,r16,24
    c158:	80000415 	stw	zero,16(r16)
    c15c:	80000515 	stw	zero,20(r16)
    c160:	003feb06 	br	c110 <_calloc_r+0x48>
    c164:	0005d540 	call	5d54 <memset>
    c168:	8005883a 	mov	r2,r16
    c16c:	dfc00117 	ldw	ra,4(sp)
    c170:	dc000017 	ldw	r16,0(sp)
    c174:	dec00204 	addi	sp,sp,8
    c178:	f800283a 	ret

0000c17c <__udivdi3>:
    c17c:	defff004 	addi	sp,sp,-64
    c180:	2005883a 	mov	r2,r4
    c184:	3011883a 	mov	r8,r6
    c188:	df000e15 	stw	fp,56(sp)
    c18c:	dd000a15 	stw	r20,40(sp)
    c190:	dc000615 	stw	r16,24(sp)
    c194:	dfc00f15 	stw	ra,60(sp)
    c198:	ddc00d15 	stw	r23,52(sp)
    c19c:	dd800c15 	stw	r22,48(sp)
    c1a0:	dd400b15 	stw	r21,44(sp)
    c1a4:	dcc00915 	stw	r19,36(sp)
    c1a8:	dc800815 	stw	r18,32(sp)
    c1ac:	dc400715 	stw	r17,28(sp)
    c1b0:	4021883a 	mov	r16,r8
    c1b4:	1039883a 	mov	fp,r2
    c1b8:	2829883a 	mov	r20,r5
    c1bc:	38003b1e 	bne	r7,zero,c2ac <__udivdi3+0x130>
    c1c0:	2a005c36 	bltu	r5,r8,c334 <__udivdi3+0x1b8>
    c1c4:	4000a626 	beq	r8,zero,c460 <__udivdi3+0x2e4>
    c1c8:	00bfffd4 	movui	r2,65535
    c1cc:	14009e36 	bltu	r2,r16,c448 <__udivdi3+0x2cc>
    c1d0:	00803fc4 	movi	r2,255
    c1d4:	14013d36 	bltu	r2,r16,c6cc <__udivdi3+0x550>
    c1d8:	000b883a 	mov	r5,zero
    c1dc:	0005883a 	mov	r2,zero
    c1e0:	8084d83a 	srl	r2,r16,r2
    c1e4:	01000074 	movhi	r4,1
    c1e8:	21001e04 	addi	r4,r4,120
    c1ec:	01800804 	movi	r6,32
    c1f0:	1105883a 	add	r2,r2,r4
    c1f4:	10c00003 	ldbu	r3,0(r2)
    c1f8:	28c7883a 	add	r3,r5,r3
    c1fc:	30edc83a 	sub	r22,r6,r3
    c200:	b000ee1e 	bne	r22,zero,c5bc <__udivdi3+0x440>
    c204:	802ad43a 	srli	r21,r16,16
    c208:	00800044 	movi	r2,1
    c20c:	a423c83a 	sub	r17,r20,r16
    c210:	85ffffcc 	andi	r23,r16,65535
    c214:	d8800315 	stw	r2,12(sp)
    c218:	8809883a 	mov	r4,r17
    c21c:	a80b883a 	mov	r5,r21
    c220:	000d1700 	call	d170 <__udivsi3>
    c224:	8809883a 	mov	r4,r17
    c228:	a80b883a 	mov	r5,r21
    c22c:	102d883a 	mov	r22,r2
    c230:	000d1780 	call	d178 <__umodsi3>
    c234:	1004943a 	slli	r2,r2,16
    c238:	e006d43a 	srli	r3,fp,16
    c23c:	bda3383a 	mul	r17,r23,r22
    c240:	10c4b03a 	or	r2,r2,r3
    c244:	1440042e 	bgeu	r2,r17,c258 <__udivdi3+0xdc>
    c248:	1405883a 	add	r2,r2,r16
    c24c:	b5bfffc4 	addi	r22,r22,-1
    c250:	14000136 	bltu	r2,r16,c258 <__udivdi3+0xdc>
    c254:	14413d36 	bltu	r2,r17,c74c <__udivdi3+0x5d0>
    c258:	1463c83a 	sub	r17,r2,r17
    c25c:	8809883a 	mov	r4,r17
    c260:	a80b883a 	mov	r5,r21
    c264:	000d1700 	call	d170 <__udivsi3>
    c268:	8809883a 	mov	r4,r17
    c26c:	a80b883a 	mov	r5,r21
    c270:	1029883a 	mov	r20,r2
    c274:	000d1780 	call	d178 <__umodsi3>
    c278:	1004943a 	slli	r2,r2,16
    c27c:	bd09383a 	mul	r4,r23,r20
    c280:	e0ffffcc 	andi	r3,fp,65535
    c284:	10c4b03a 	or	r2,r2,r3
    c288:	1100042e 	bgeu	r2,r4,c29c <__udivdi3+0x120>
    c28c:	8085883a 	add	r2,r16,r2
    c290:	a53fffc4 	addi	r20,r20,-1
    c294:	14000136 	bltu	r2,r16,c29c <__udivdi3+0x120>
    c298:	11012036 	bltu	r2,r4,c71c <__udivdi3+0x5a0>
    c29c:	b004943a 	slli	r2,r22,16
    c2a0:	d9000317 	ldw	r4,12(sp)
    c2a4:	a084b03a 	or	r2,r20,r2
    c2a8:	00001506 	br	c300 <__udivdi3+0x184>
    c2ac:	380d883a 	mov	r6,r7
    c2b0:	29c06236 	bltu	r5,r7,c43c <__udivdi3+0x2c0>
    c2b4:	00bfffd4 	movui	r2,65535
    c2b8:	11c05a36 	bltu	r2,r7,c424 <__udivdi3+0x2a8>
    c2bc:	00803fc4 	movi	r2,255
    c2c0:	11c0fc36 	bltu	r2,r7,c6b4 <__udivdi3+0x538>
    c2c4:	000b883a 	mov	r5,zero
    c2c8:	0005883a 	mov	r2,zero
    c2cc:	3084d83a 	srl	r2,r6,r2
    c2d0:	01000074 	movhi	r4,1
    c2d4:	21001e04 	addi	r4,r4,120
    c2d8:	01c00804 	movi	r7,32
    c2dc:	1105883a 	add	r2,r2,r4
    c2e0:	10c00003 	ldbu	r3,0(r2)
    c2e4:	28c7883a 	add	r3,r5,r3
    c2e8:	38efc83a 	sub	r23,r7,r3
    c2ec:	b800691e 	bne	r23,zero,c494 <__udivdi3+0x318>
    c2f0:	35000136 	bltu	r6,r20,c2f8 <__udivdi3+0x17c>
    c2f4:	e4005136 	bltu	fp,r16,c43c <__udivdi3+0x2c0>
    c2f8:	00800044 	movi	r2,1
    c2fc:	0009883a 	mov	r4,zero
    c300:	2007883a 	mov	r3,r4
    c304:	dfc00f17 	ldw	ra,60(sp)
    c308:	df000e17 	ldw	fp,56(sp)
    c30c:	ddc00d17 	ldw	r23,52(sp)
    c310:	dd800c17 	ldw	r22,48(sp)
    c314:	dd400b17 	ldw	r21,44(sp)
    c318:	dd000a17 	ldw	r20,40(sp)
    c31c:	dcc00917 	ldw	r19,36(sp)
    c320:	dc800817 	ldw	r18,32(sp)
    c324:	dc400717 	ldw	r17,28(sp)
    c328:	dc000617 	ldw	r16,24(sp)
    c32c:	dec01004 	addi	sp,sp,64
    c330:	f800283a 	ret
    c334:	00bfffd4 	movui	r2,65535
    c338:	12005036 	bltu	r2,r8,c47c <__udivdi3+0x300>
    c33c:	00803fc4 	movi	r2,255
    c340:	1200e836 	bltu	r2,r8,c6e4 <__udivdi3+0x568>
    c344:	000b883a 	mov	r5,zero
    c348:	0005883a 	mov	r2,zero
    c34c:	8084d83a 	srl	r2,r16,r2
    c350:	01000074 	movhi	r4,1
    c354:	21001e04 	addi	r4,r4,120
    c358:	01800804 	movi	r6,32
    c35c:	1105883a 	add	r2,r2,r4
    c360:	10c00003 	ldbu	r3,0(r2)
    c364:	28c7883a 	add	r3,r5,r3
    c368:	30cbc83a 	sub	r5,r6,r3
    c36c:	28000626 	beq	r5,zero,c388 <__udivdi3+0x20c>
    c370:	3145c83a 	sub	r2,r6,r5
    c374:	e084d83a 	srl	r2,fp,r2
    c378:	a146983a 	sll	r3,r20,r5
    c37c:	e178983a 	sll	fp,fp,r5
    c380:	8160983a 	sll	r16,r16,r5
    c384:	18a8b03a 	or	r20,r3,r2
    c388:	802ad43a 	srli	r21,r16,16
    c38c:	a009883a 	mov	r4,r20
    c390:	85ffffcc 	andi	r23,r16,65535
    c394:	a80b883a 	mov	r5,r21
    c398:	000d1700 	call	d170 <__udivsi3>
    c39c:	a009883a 	mov	r4,r20
    c3a0:	a80b883a 	mov	r5,r21
    c3a4:	102d883a 	mov	r22,r2
    c3a8:	000d1780 	call	d178 <__umodsi3>
    c3ac:	1004943a 	slli	r2,r2,16
    c3b0:	e006d43a 	srli	r3,fp,16
    c3b4:	bda3383a 	mul	r17,r23,r22
    c3b8:	10c4b03a 	or	r2,r2,r3
    c3bc:	1440042e 	bgeu	r2,r17,c3d0 <__udivdi3+0x254>
    c3c0:	1405883a 	add	r2,r2,r16
    c3c4:	b5bfffc4 	addi	r22,r22,-1
    c3c8:	14000136 	bltu	r2,r16,c3d0 <__udivdi3+0x254>
    c3cc:	1440d536 	bltu	r2,r17,c724 <__udivdi3+0x5a8>
    c3d0:	1463c83a 	sub	r17,r2,r17
    c3d4:	8809883a 	mov	r4,r17
    c3d8:	a80b883a 	mov	r5,r21
    c3dc:	000d1700 	call	d170 <__udivsi3>
    c3e0:	8809883a 	mov	r4,r17
    c3e4:	a80b883a 	mov	r5,r21
    c3e8:	1029883a 	mov	r20,r2
    c3ec:	000d1780 	call	d178 <__umodsi3>
    c3f0:	1004943a 	slli	r2,r2,16
    c3f4:	bd09383a 	mul	r4,r23,r20
    c3f8:	e0ffffcc 	andi	r3,fp,65535
    c3fc:	10c4b03a 	or	r2,r2,r3
    c400:	1100042e 	bgeu	r2,r4,c414 <__udivdi3+0x298>
    c404:	8085883a 	add	r2,r16,r2
    c408:	a53fffc4 	addi	r20,r20,-1
    c40c:	14000136 	bltu	r2,r16,c414 <__udivdi3+0x298>
    c410:	1100c736 	bltu	r2,r4,c730 <__udivdi3+0x5b4>
    c414:	b004943a 	slli	r2,r22,16
    c418:	0009883a 	mov	r4,zero
    c41c:	a084b03a 	or	r2,r20,r2
    c420:	003fb706 	br	c300 <__udivdi3+0x184>
    c424:	00804034 	movhi	r2,256
    c428:	10bfffc4 	addi	r2,r2,-1
    c42c:	11c0a436 	bltu	r2,r7,c6c0 <__udivdi3+0x544>
    c430:	01400404 	movi	r5,16
    c434:	2805883a 	mov	r2,r5
    c438:	003fa406 	br	c2cc <__udivdi3+0x150>
    c43c:	0005883a 	mov	r2,zero
    c440:	0009883a 	mov	r4,zero
    c444:	003fae06 	br	c300 <__udivdi3+0x184>
    c448:	00804034 	movhi	r2,256
    c44c:	10bfffc4 	addi	r2,r2,-1
    c450:	1400a136 	bltu	r2,r16,c6d8 <__udivdi3+0x55c>
    c454:	01400404 	movi	r5,16
    c458:	2805883a 	mov	r2,r5
    c45c:	003f6006 	br	c1e0 <__udivdi3+0x64>
    c460:	01000044 	movi	r4,1
    c464:	000b883a 	mov	r5,zero
    c468:	000d1700 	call	d170 <__udivsi3>
    c46c:	1021883a 	mov	r16,r2
    c470:	00bfffd4 	movui	r2,65535
    c474:	143ff436 	bltu	r2,r16,c448 <__udivdi3+0x2cc>
    c478:	003f5506 	br	c1d0 <__udivdi3+0x54>
    c47c:	00804034 	movhi	r2,256
    c480:	10bfffc4 	addi	r2,r2,-1
    c484:	12009a36 	bltu	r2,r8,c6f0 <__udivdi3+0x574>
    c488:	01400404 	movi	r5,16
    c48c:	2805883a 	mov	r2,r5
    c490:	003fae06 	br	c34c <__udivdi3+0x1d0>
    c494:	3dc5c83a 	sub	r2,r7,r23
    c498:	35c8983a 	sll	r4,r6,r23
    c49c:	8086d83a 	srl	r3,r16,r2
    c4a0:	a0a2d83a 	srl	r17,r20,r2
    c4a4:	e084d83a 	srl	r2,fp,r2
    c4a8:	20eab03a 	or	r21,r4,r3
    c4ac:	a82cd43a 	srli	r22,r21,16
    c4b0:	a5c6983a 	sll	r3,r20,r23
    c4b4:	8809883a 	mov	r4,r17
    c4b8:	b00b883a 	mov	r5,r22
    c4bc:	1886b03a 	or	r3,r3,r2
    c4c0:	d8c00215 	stw	r3,8(sp)
    c4c4:	000d1700 	call	d170 <__udivsi3>
    c4c8:	8809883a 	mov	r4,r17
    c4cc:	b00b883a 	mov	r5,r22
    c4d0:	1029883a 	mov	r20,r2
    c4d4:	000d1780 	call	d178 <__umodsi3>
    c4d8:	a8ffffcc 	andi	r3,r21,65535
    c4dc:	d8c00515 	stw	r3,20(sp)
    c4e0:	d9000217 	ldw	r4,8(sp)
    c4e4:	d9400517 	ldw	r5,20(sp)
    c4e8:	1004943a 	slli	r2,r2,16
    c4ec:	2006d43a 	srli	r3,r4,16
    c4f0:	85e0983a 	sll	r16,r16,r23
    c4f4:	2d23383a 	mul	r17,r5,r20
    c4f8:	10c4b03a 	or	r2,r2,r3
    c4fc:	dc000015 	stw	r16,0(sp)
    c500:	1440032e 	bgeu	r2,r17,c510 <__udivdi3+0x394>
    c504:	1545883a 	add	r2,r2,r21
    c508:	a53fffc4 	addi	r20,r20,-1
    c50c:	15407f2e 	bgeu	r2,r21,c70c <__udivdi3+0x590>
    c510:	1463c83a 	sub	r17,r2,r17
    c514:	8809883a 	mov	r4,r17
    c518:	b00b883a 	mov	r5,r22
    c51c:	000d1700 	call	d170 <__udivsi3>
    c520:	8809883a 	mov	r4,r17
    c524:	b00b883a 	mov	r5,r22
    c528:	1021883a 	mov	r16,r2
    c52c:	000d1780 	call	d178 <__umodsi3>
    c530:	d8c00517 	ldw	r3,20(sp)
    c534:	d9000217 	ldw	r4,8(sp)
    c538:	1004943a 	slli	r2,r2,16
    c53c:	1c0f383a 	mul	r7,r3,r16
    c540:	20ffffcc 	andi	r3,r4,65535
    c544:	10e2b03a 	or	r17,r2,r3
    c548:	89c0032e 	bgeu	r17,r7,c558 <__udivdi3+0x3dc>
    c54c:	8d63883a 	add	r17,r17,r21
    c550:	843fffc4 	addi	r16,r16,-1
    c554:	8d40692e 	bgeu	r17,r21,c6fc <__udivdi3+0x580>
    c558:	a008943a 	slli	r4,r20,16
    c55c:	d9400017 	ldw	r5,0(sp)
    c560:	89e3c83a 	sub	r17,r17,r7
    c564:	8110b03a 	or	r8,r16,r4
    c568:	280cd43a 	srli	r6,r5,16
    c56c:	28ffffcc 	andi	r3,r5,65535
    c570:	40bfffcc 	andi	r2,r8,65535
    c574:	400ad43a 	srli	r5,r8,16
    c578:	10d3383a 	mul	r9,r2,r3
    c57c:	1185383a 	mul	r2,r2,r6
    c580:	28c7383a 	mul	r3,r5,r3
    c584:	4808d43a 	srli	r4,r9,16
    c588:	298b383a 	mul	r5,r5,r6
    c58c:	10c5883a 	add	r2,r2,r3
    c590:	2089883a 	add	r4,r4,r2
    c594:	20c0022e 	bgeu	r4,r3,c5a0 <__udivdi3+0x424>
    c598:	00800074 	movhi	r2,1
    c59c:	288b883a 	add	r5,r5,r2
    c5a0:	2004d43a 	srli	r2,r4,16
    c5a4:	288b883a 	add	r5,r5,r2
    c5a8:	89403f36 	bltu	r17,r5,c6a8 <__udivdi3+0x52c>
    c5ac:	89403926 	beq	r17,r5,c694 <__udivdi3+0x518>
    c5b0:	4005883a 	mov	r2,r8
    c5b4:	0009883a 	mov	r4,zero
    c5b8:	003f5106 	br	c300 <__udivdi3+0x184>
    c5bc:	85a0983a 	sll	r16,r16,r22
    c5c0:	3585c83a 	sub	r2,r6,r22
    c5c4:	a0a2d83a 	srl	r17,r20,r2
    c5c8:	802ad43a 	srli	r21,r16,16
    c5cc:	e084d83a 	srl	r2,fp,r2
    c5d0:	a586983a 	sll	r3,r20,r22
    c5d4:	8809883a 	mov	r4,r17
    c5d8:	a80b883a 	mov	r5,r21
    c5dc:	1886b03a 	or	r3,r3,r2
    c5e0:	d8c00115 	stw	r3,4(sp)
    c5e4:	000d1700 	call	d170 <__udivsi3>
    c5e8:	8809883a 	mov	r4,r17
    c5ec:	a80b883a 	mov	r5,r21
    c5f0:	d8800415 	stw	r2,16(sp)
    c5f4:	000d1780 	call	d178 <__umodsi3>
    c5f8:	d9000117 	ldw	r4,4(sp)
    c5fc:	d9400417 	ldw	r5,16(sp)
    c600:	1004943a 	slli	r2,r2,16
    c604:	85ffffcc 	andi	r23,r16,65535
    c608:	2006d43a 	srli	r3,r4,16
    c60c:	b963383a 	mul	r17,r23,r5
    c610:	10c4b03a 	or	r2,r2,r3
    c614:	1440042e 	bgeu	r2,r17,c628 <__udivdi3+0x4ac>
    c618:	297fffc4 	addi	r5,r5,-1
    c61c:	1405883a 	add	r2,r2,r16
    c620:	d9400415 	stw	r5,16(sp)
    c624:	1400442e 	bgeu	r2,r16,c738 <__udivdi3+0x5bc>
    c628:	1463c83a 	sub	r17,r2,r17
    c62c:	8809883a 	mov	r4,r17
    c630:	a80b883a 	mov	r5,r21
    c634:	000d1700 	call	d170 <__udivsi3>
    c638:	8809883a 	mov	r4,r17
    c63c:	a80b883a 	mov	r5,r21
    c640:	1029883a 	mov	r20,r2
    c644:	000d1780 	call	d178 <__umodsi3>
    c648:	d9400117 	ldw	r5,4(sp)
    c64c:	1004943a 	slli	r2,r2,16
    c650:	bd09383a 	mul	r4,r23,r20
    c654:	28ffffcc 	andi	r3,r5,65535
    c658:	10c6b03a 	or	r3,r2,r3
    c65c:	1900062e 	bgeu	r3,r4,c678 <__udivdi3+0x4fc>
    c660:	1c07883a 	add	r3,r3,r16
    c664:	a53fffc4 	addi	r20,r20,-1
    c668:	1c000336 	bltu	r3,r16,c678 <__udivdi3+0x4fc>
    c66c:	1900022e 	bgeu	r3,r4,c678 <__udivdi3+0x4fc>
    c670:	a53fffc4 	addi	r20,r20,-1
    c674:	1c07883a 	add	r3,r3,r16
    c678:	d9400417 	ldw	r5,16(sp)
    c67c:	e5b8983a 	sll	fp,fp,r22
    c680:	1923c83a 	sub	r17,r3,r4
    c684:	2804943a 	slli	r2,r5,16
    c688:	a0a8b03a 	or	r20,r20,r2
    c68c:	dd000315 	stw	r20,12(sp)
    c690:	003ee106 	br	c218 <__udivdi3+0x9c>
    c694:	2004943a 	slli	r2,r4,16
    c698:	e5c8983a 	sll	r4,fp,r23
    c69c:	48ffffcc 	andi	r3,r9,65535
    c6a0:	10c5883a 	add	r2,r2,r3
    c6a4:	20bfc22e 	bgeu	r4,r2,c5b0 <__udivdi3+0x434>
    c6a8:	40bfffc4 	addi	r2,r8,-1
    c6ac:	0009883a 	mov	r4,zero
    c6b0:	003f1306 	br	c300 <__udivdi3+0x184>
    c6b4:	01400204 	movi	r5,8
    c6b8:	2805883a 	mov	r2,r5
    c6bc:	003f0306 	br	c2cc <__udivdi3+0x150>
    c6c0:	01400604 	movi	r5,24
    c6c4:	2805883a 	mov	r2,r5
    c6c8:	003f0006 	br	c2cc <__udivdi3+0x150>
    c6cc:	01400204 	movi	r5,8
    c6d0:	2805883a 	mov	r2,r5
    c6d4:	003ec206 	br	c1e0 <__udivdi3+0x64>
    c6d8:	01400604 	movi	r5,24
    c6dc:	2805883a 	mov	r2,r5
    c6e0:	003ebf06 	br	c1e0 <__udivdi3+0x64>
    c6e4:	01400204 	movi	r5,8
    c6e8:	2805883a 	mov	r2,r5
    c6ec:	003f1706 	br	c34c <__udivdi3+0x1d0>
    c6f0:	01400604 	movi	r5,24
    c6f4:	2805883a 	mov	r2,r5
    c6f8:	003f1406 	br	c34c <__udivdi3+0x1d0>
    c6fc:	89ff962e 	bgeu	r17,r7,c558 <__udivdi3+0x3dc>
    c700:	8d63883a 	add	r17,r17,r21
    c704:	843fffc4 	addi	r16,r16,-1
    c708:	003f9306 	br	c558 <__udivdi3+0x3dc>
    c70c:	147f802e 	bgeu	r2,r17,c510 <__udivdi3+0x394>
    c710:	a53fffc4 	addi	r20,r20,-1
    c714:	1545883a 	add	r2,r2,r21
    c718:	003f7d06 	br	c510 <__udivdi3+0x394>
    c71c:	a53fffc4 	addi	r20,r20,-1
    c720:	003ede06 	br	c29c <__udivdi3+0x120>
    c724:	b5bfffc4 	addi	r22,r22,-1
    c728:	1405883a 	add	r2,r2,r16
    c72c:	003f2806 	br	c3d0 <__udivdi3+0x254>
    c730:	a53fffc4 	addi	r20,r20,-1
    c734:	003f3706 	br	c414 <__udivdi3+0x298>
    c738:	147fbb2e 	bgeu	r2,r17,c628 <__udivdi3+0x4ac>
    c73c:	297fffc4 	addi	r5,r5,-1
    c740:	1405883a 	add	r2,r2,r16
    c744:	d9400415 	stw	r5,16(sp)
    c748:	003fb706 	br	c628 <__udivdi3+0x4ac>
    c74c:	b5bfffc4 	addi	r22,r22,-1
    c750:	1405883a 	add	r2,r2,r16
    c754:	003ec006 	br	c258 <__udivdi3+0xdc>

0000c758 <__umoddi3>:
    c758:	defff104 	addi	sp,sp,-60
    c75c:	dd800b15 	stw	r22,44(sp)
    c760:	dd000915 	stw	r20,36(sp)
    c764:	dc000515 	stw	r16,20(sp)
    c768:	dfc00e15 	stw	ra,56(sp)
    c76c:	df000d15 	stw	fp,52(sp)
    c770:	ddc00c15 	stw	r23,48(sp)
    c774:	dd400a15 	stw	r21,40(sp)
    c778:	dcc00815 	stw	r19,32(sp)
    c77c:	dc800715 	stw	r18,28(sp)
    c780:	dc400615 	stw	r17,24(sp)
    c784:	3021883a 	mov	r16,r6
    c788:	202d883a 	mov	r22,r4
    c78c:	2829883a 	mov	r20,r5
    c790:	38002b1e 	bne	r7,zero,c840 <__umoddi3+0xe8>
    c794:	29805036 	bltu	r5,r6,c8d8 <__umoddi3+0x180>
    c798:	30008a26 	beq	r6,zero,c9c4 <__umoddi3+0x26c>
    c79c:	00bfffd4 	movui	r2,65535
    c7a0:	14008236 	bltu	r2,r16,c9ac <__umoddi3+0x254>
    c7a4:	00803fc4 	movi	r2,255
    c7a8:	14013636 	bltu	r2,r16,cc84 <__umoddi3+0x52c>
    c7ac:	000b883a 	mov	r5,zero
    c7b0:	0005883a 	mov	r2,zero
    c7b4:	8084d83a 	srl	r2,r16,r2
    c7b8:	01000074 	movhi	r4,1
    c7bc:	21001e04 	addi	r4,r4,120
    c7c0:	01800804 	movi	r6,32
    c7c4:	1105883a 	add	r2,r2,r4
    c7c8:	10c00003 	ldbu	r3,0(r2)
    c7cc:	28c7883a 	add	r3,r5,r3
    c7d0:	30efc83a 	sub	r23,r6,r3
    c7d4:	b800941e 	bne	r23,zero,ca28 <__umoddi3+0x2d0>
    c7d8:	802ad43a 	srli	r21,r16,16
    c7dc:	a423c83a 	sub	r17,r20,r16
    c7e0:	0039883a 	mov	fp,zero
    c7e4:	853fffcc 	andi	r20,r16,65535
    c7e8:	8809883a 	mov	r4,r17
    c7ec:	a80b883a 	mov	r5,r21
    c7f0:	000d1700 	call	d170 <__udivsi3>
    c7f4:	8809883a 	mov	r4,r17
    c7f8:	a80b883a 	mov	r5,r21
    c7fc:	a0a3383a 	mul	r17,r20,r2
    c800:	000d1780 	call	d178 <__umodsi3>
    c804:	1004943a 	slli	r2,r2,16
    c808:	b006d43a 	srli	r3,r22,16
    c80c:	10c4b03a 	or	r2,r2,r3
    c810:	1440032e 	bgeu	r2,r17,c820 <__umoddi3+0xc8>
    c814:	1405883a 	add	r2,r2,r16
    c818:	14000136 	bltu	r2,r16,c820 <__umoddi3+0xc8>
    c81c:	14413536 	bltu	r2,r17,ccf4 <__umoddi3+0x59c>
    c820:	1463c83a 	sub	r17,r2,r17
    c824:	8809883a 	mov	r4,r17
    c828:	a80b883a 	mov	r5,r21
    c82c:	000d1700 	call	d170 <__udivsi3>
    c830:	8809883a 	mov	r4,r17
    c834:	a0a3383a 	mul	r17,r20,r2
    c838:	a80b883a 	mov	r5,r21
    c83c:	00004d06 	br	c974 <__umoddi3+0x21c>
    c840:	380d883a 	mov	r6,r7
    c844:	29c0102e 	bgeu	r5,r7,c888 <__umoddi3+0x130>
    c848:	2011883a 	mov	r8,r4
    c84c:	2813883a 	mov	r9,r5
    c850:	4005883a 	mov	r2,r8
    c854:	4807883a 	mov	r3,r9
    c858:	dfc00e17 	ldw	ra,56(sp)
    c85c:	df000d17 	ldw	fp,52(sp)
    c860:	ddc00c17 	ldw	r23,48(sp)
    c864:	dd800b17 	ldw	r22,44(sp)
    c868:	dd400a17 	ldw	r21,40(sp)
    c86c:	dd000917 	ldw	r20,36(sp)
    c870:	dcc00817 	ldw	r19,32(sp)
    c874:	dc800717 	ldw	r18,28(sp)
    c878:	dc400617 	ldw	r17,24(sp)
    c87c:	dc000517 	ldw	r16,20(sp)
    c880:	dec00f04 	addi	sp,sp,60
    c884:	f800283a 	ret
    c888:	00bfffd4 	movui	r2,65535
    c88c:	11c05a36 	bltu	r2,r7,c9f8 <__umoddi3+0x2a0>
    c890:	00803fc4 	movi	r2,255
    c894:	11c0fe36 	bltu	r2,r7,cc90 <__umoddi3+0x538>
    c898:	000b883a 	mov	r5,zero
    c89c:	0005883a 	mov	r2,zero
    c8a0:	3084d83a 	srl	r2,r6,r2
    c8a4:	01000074 	movhi	r4,1
    c8a8:	21001e04 	addi	r4,r4,120
    c8ac:	01c00804 	movi	r7,32
    c8b0:	1105883a 	add	r2,r2,r4
    c8b4:	10c00003 	ldbu	r3,0(r2)
    c8b8:	28c7883a 	add	r3,r5,r3
    c8bc:	38ebc83a 	sub	r21,r7,r3
    c8c0:	a800851e 	bne	r21,zero,cad8 <__umoddi3+0x380>
    c8c4:	35005236 	bltu	r6,r20,ca10 <__umoddi3+0x2b8>
    c8c8:	b400512e 	bgeu	r22,r16,ca10 <__umoddi3+0x2b8>
    c8cc:	b011883a 	mov	r8,r22
    c8d0:	a013883a 	mov	r9,r20
    c8d4:	003fde06 	br	c850 <__umoddi3+0xf8>
    c8d8:	00bfffd4 	movui	r2,65535
    c8dc:	11804036 	bltu	r2,r6,c9e0 <__umoddi3+0x288>
    c8e0:	00803fc4 	movi	r2,255
    c8e4:	1180ed36 	bltu	r2,r6,cc9c <__umoddi3+0x544>
    c8e8:	000b883a 	mov	r5,zero
    c8ec:	0005883a 	mov	r2,zero
    c8f0:	8084d83a 	srl	r2,r16,r2
    c8f4:	01000074 	movhi	r4,1
    c8f8:	21001e04 	addi	r4,r4,120
    c8fc:	01800804 	movi	r6,32
    c900:	1105883a 	add	r2,r2,r4
    c904:	10c00003 	ldbu	r3,0(r2)
    c908:	28c7883a 	add	r3,r5,r3
    c90c:	30c7c83a 	sub	r3,r6,r3
    c910:	1800bf1e 	bne	r3,zero,cc10 <__umoddi3+0x4b8>
    c914:	0039883a 	mov	fp,zero
    c918:	802ad43a 	srli	r21,r16,16
    c91c:	a009883a 	mov	r4,r20
    c920:	85ffffcc 	andi	r23,r16,65535
    c924:	a80b883a 	mov	r5,r21
    c928:	000d1700 	call	d170 <__udivsi3>
    c92c:	a009883a 	mov	r4,r20
    c930:	a80b883a 	mov	r5,r21
    c934:	b8a3383a 	mul	r17,r23,r2
    c938:	000d1780 	call	d178 <__umodsi3>
    c93c:	1004943a 	slli	r2,r2,16
    c940:	b006d43a 	srli	r3,r22,16
    c944:	10c4b03a 	or	r2,r2,r3
    c948:	1440032e 	bgeu	r2,r17,c958 <__umoddi3+0x200>
    c94c:	1405883a 	add	r2,r2,r16
    c950:	14000136 	bltu	r2,r16,c958 <__umoddi3+0x200>
    c954:	1440e536 	bltu	r2,r17,ccec <__umoddi3+0x594>
    c958:	1463c83a 	sub	r17,r2,r17
    c95c:	8809883a 	mov	r4,r17
    c960:	a80b883a 	mov	r5,r21
    c964:	000d1700 	call	d170 <__udivsi3>
    c968:	8809883a 	mov	r4,r17
    c96c:	b8a3383a 	mul	r17,r23,r2
    c970:	a80b883a 	mov	r5,r21
    c974:	000d1780 	call	d178 <__umodsi3>
    c978:	1004943a 	slli	r2,r2,16
    c97c:	b0ffffcc 	andi	r3,r22,65535
    c980:	10c4b03a 	or	r2,r2,r3
    c984:	1440042e 	bgeu	r2,r17,c998 <__umoddi3+0x240>
    c988:	1405883a 	add	r2,r2,r16
    c98c:	14000236 	bltu	r2,r16,c998 <__umoddi3+0x240>
    c990:	1440012e 	bgeu	r2,r17,c998 <__umoddi3+0x240>
    c994:	1405883a 	add	r2,r2,r16
    c998:	1445c83a 	sub	r2,r2,r17
    c99c:	1724d83a 	srl	r18,r2,fp
    c9a0:	0013883a 	mov	r9,zero
    c9a4:	9011883a 	mov	r8,r18
    c9a8:	003fa906 	br	c850 <__umoddi3+0xf8>
    c9ac:	00804034 	movhi	r2,256
    c9b0:	10bfffc4 	addi	r2,r2,-1
    c9b4:	1400b036 	bltu	r2,r16,cc78 <__umoddi3+0x520>
    c9b8:	01400404 	movi	r5,16
    c9bc:	2805883a 	mov	r2,r5
    c9c0:	003f7c06 	br	c7b4 <__umoddi3+0x5c>
    c9c4:	01000044 	movi	r4,1
    c9c8:	000b883a 	mov	r5,zero
    c9cc:	000d1700 	call	d170 <__udivsi3>
    c9d0:	1021883a 	mov	r16,r2
    c9d4:	00bfffd4 	movui	r2,65535
    c9d8:	143ff436 	bltu	r2,r16,c9ac <__umoddi3+0x254>
    c9dc:	003f7106 	br	c7a4 <__umoddi3+0x4c>
    c9e0:	00804034 	movhi	r2,256
    c9e4:	10bfffc4 	addi	r2,r2,-1
    c9e8:	1180af36 	bltu	r2,r6,cca8 <__umoddi3+0x550>
    c9ec:	01400404 	movi	r5,16
    c9f0:	2805883a 	mov	r2,r5
    c9f4:	003fbe06 	br	c8f0 <__umoddi3+0x198>
    c9f8:	00804034 	movhi	r2,256
    c9fc:	10bfffc4 	addi	r2,r2,-1
    ca00:	11c0ac36 	bltu	r2,r7,ccb4 <__umoddi3+0x55c>
    ca04:	01400404 	movi	r5,16
    ca08:	2805883a 	mov	r2,r5
    ca0c:	003fa406 	br	c8a0 <__umoddi3+0x148>
    ca10:	b409c83a 	sub	r4,r22,r16
    ca14:	b105803a 	cmpltu	r2,r22,r4
    ca18:	a187c83a 	sub	r3,r20,r6
    ca1c:	18a9c83a 	sub	r20,r3,r2
    ca20:	202d883a 	mov	r22,r4
    ca24:	003fa906 	br	c8cc <__umoddi3+0x174>
    ca28:	85e0983a 	sll	r16,r16,r23
    ca2c:	35c5c83a 	sub	r2,r6,r23
    ca30:	a0a2d83a 	srl	r17,r20,r2
    ca34:	802ad43a 	srli	r21,r16,16
    ca38:	b084d83a 	srl	r2,r22,r2
    ca3c:	a5c6983a 	sll	r3,r20,r23
    ca40:	8809883a 	mov	r4,r17
    ca44:	a80b883a 	mov	r5,r21
    ca48:	1886b03a 	or	r3,r3,r2
    ca4c:	d8c00115 	stw	r3,4(sp)
    ca50:	853fffcc 	andi	r20,r16,65535
    ca54:	000d1700 	call	d170 <__udivsi3>
    ca58:	8809883a 	mov	r4,r17
    ca5c:	a80b883a 	mov	r5,r21
    ca60:	a0a3383a 	mul	r17,r20,r2
    ca64:	000d1780 	call	d178 <__umodsi3>
    ca68:	d9000117 	ldw	r4,4(sp)
    ca6c:	1004943a 	slli	r2,r2,16
    ca70:	b839883a 	mov	fp,r23
    ca74:	2006d43a 	srli	r3,r4,16
    ca78:	10c4b03a 	or	r2,r2,r3
    ca7c:	1440022e 	bgeu	r2,r17,ca88 <__umoddi3+0x330>
    ca80:	1405883a 	add	r2,r2,r16
    ca84:	1400962e 	bgeu	r2,r16,cce0 <__umoddi3+0x588>
    ca88:	1463c83a 	sub	r17,r2,r17
    ca8c:	8809883a 	mov	r4,r17
    ca90:	a80b883a 	mov	r5,r21
    ca94:	000d1700 	call	d170 <__udivsi3>
    ca98:	8809883a 	mov	r4,r17
    ca9c:	a80b883a 	mov	r5,r21
    caa0:	a0a3383a 	mul	r17,r20,r2
    caa4:	000d1780 	call	d178 <__umodsi3>
    caa8:	d9400117 	ldw	r5,4(sp)
    caac:	1004943a 	slli	r2,r2,16
    cab0:	28ffffcc 	andi	r3,r5,65535
    cab4:	10c4b03a 	or	r2,r2,r3
    cab8:	1440042e 	bgeu	r2,r17,cacc <__umoddi3+0x374>
    cabc:	1405883a 	add	r2,r2,r16
    cac0:	14000236 	bltu	r2,r16,cacc <__umoddi3+0x374>
    cac4:	1440012e 	bgeu	r2,r17,cacc <__umoddi3+0x374>
    cac8:	1405883a 	add	r2,r2,r16
    cacc:	b5ec983a 	sll	r22,r22,r23
    cad0:	1463c83a 	sub	r17,r2,r17
    cad4:	003f4406 	br	c7e8 <__umoddi3+0x90>
    cad8:	3d4fc83a 	sub	r7,r7,r21
    cadc:	3546983a 	sll	r3,r6,r21
    cae0:	81c4d83a 	srl	r2,r16,r7
    cae4:	a1e2d83a 	srl	r17,r20,r7
    cae8:	a54c983a 	sll	r6,r20,r21
    caec:	18aeb03a 	or	r23,r3,r2
    caf0:	b828d43a 	srli	r20,r23,16
    caf4:	b1c4d83a 	srl	r2,r22,r7
    caf8:	8809883a 	mov	r4,r17
    cafc:	a00b883a 	mov	r5,r20
    cb00:	308cb03a 	or	r6,r6,r2
    cb04:	d9c00315 	stw	r7,12(sp)
    cb08:	d9800215 	stw	r6,8(sp)
    cb0c:	000d1700 	call	d170 <__udivsi3>
    cb10:	8809883a 	mov	r4,r17
    cb14:	a00b883a 	mov	r5,r20
    cb18:	1039883a 	mov	fp,r2
    cb1c:	000d1780 	call	d178 <__umodsi3>
    cb20:	b8ffffcc 	andi	r3,r23,65535
    cb24:	d8c00415 	stw	r3,16(sp)
    cb28:	d9000217 	ldw	r4,8(sp)
    cb2c:	d9400417 	ldw	r5,16(sp)
    cb30:	1004943a 	slli	r2,r2,16
    cb34:	2006d43a 	srli	r3,r4,16
    cb38:	8560983a 	sll	r16,r16,r21
    cb3c:	2f23383a 	mul	r17,r5,fp
    cb40:	10c4b03a 	or	r2,r2,r3
    cb44:	dc000015 	stw	r16,0(sp)
    cb48:	b56c983a 	sll	r22,r22,r21
    cb4c:	1440032e 	bgeu	r2,r17,cb5c <__umoddi3+0x404>
    cb50:	15c5883a 	add	r2,r2,r23
    cb54:	e73fffc4 	addi	fp,fp,-1
    cb58:	15c05d2e 	bgeu	r2,r23,ccd0 <__umoddi3+0x578>
    cb5c:	1463c83a 	sub	r17,r2,r17
    cb60:	8809883a 	mov	r4,r17
    cb64:	a00b883a 	mov	r5,r20
    cb68:	000d1700 	call	d170 <__udivsi3>
    cb6c:	8809883a 	mov	r4,r17
    cb70:	a00b883a 	mov	r5,r20
    cb74:	1021883a 	mov	r16,r2
    cb78:	000d1780 	call	d178 <__umodsi3>
    cb7c:	d8c00417 	ldw	r3,16(sp)
    cb80:	d9000217 	ldw	r4,8(sp)
    cb84:	1004943a 	slli	r2,r2,16
    cb88:	1c23383a 	mul	r17,r3,r16
    cb8c:	20ffffcc 	andi	r3,r4,65535
    cb90:	10ceb03a 	or	r7,r2,r3
    cb94:	3c40032e 	bgeu	r7,r17,cba4 <__umoddi3+0x44c>
    cb98:	3dcf883a 	add	r7,r7,r23
    cb9c:	843fffc4 	addi	r16,r16,-1
    cba0:	3dc0472e 	bgeu	r7,r23,ccc0 <__umoddi3+0x568>
    cba4:	e004943a 	slli	r2,fp,16
    cba8:	d9400017 	ldw	r5,0(sp)
    cbac:	3c4fc83a 	sub	r7,r7,r17
    cbb0:	8084b03a 	or	r2,r16,r2
    cbb4:	28ffffcc 	andi	r3,r5,65535
    cbb8:	280cd43a 	srli	r6,r5,16
    cbbc:	100ad43a 	srli	r5,r2,16
    cbc0:	10bfffcc 	andi	r2,r2,65535
    cbc4:	10d1383a 	mul	r8,r2,r3
    cbc8:	28c7383a 	mul	r3,r5,r3
    cbcc:	1185383a 	mul	r2,r2,r6
    cbd0:	4008d43a 	srli	r4,r8,16
    cbd4:	298b383a 	mul	r5,r5,r6
    cbd8:	10c5883a 	add	r2,r2,r3
    cbdc:	2089883a 	add	r4,r4,r2
    cbe0:	20c0022e 	bgeu	r4,r3,cbec <__umoddi3+0x494>
    cbe4:	00800074 	movhi	r2,1
    cbe8:	288b883a 	add	r5,r5,r2
    cbec:	2004d43a 	srli	r2,r4,16
    cbf0:	2008943a 	slli	r4,r4,16
    cbf4:	40ffffcc 	andi	r3,r8,65535
    cbf8:	288b883a 	add	r5,r5,r2
    cbfc:	20c9883a 	add	r4,r4,r3
    cc00:	39400b36 	bltu	r7,r5,cc30 <__umoddi3+0x4d8>
    cc04:	39403d26 	beq	r7,r5,ccfc <__umoddi3+0x5a4>
    cc08:	394bc83a 	sub	r5,r7,r5
    cc0c:	00000f06 	br	cc4c <__umoddi3+0x4f4>
    cc10:	30c5c83a 	sub	r2,r6,r3
    cc14:	1839883a 	mov	fp,r3
    cc18:	b084d83a 	srl	r2,r22,r2
    cc1c:	a0c6983a 	sll	r3,r20,r3
    cc20:	8720983a 	sll	r16,r16,fp
    cc24:	b72c983a 	sll	r22,r22,fp
    cc28:	18a8b03a 	or	r20,r3,r2
    cc2c:	003f3a06 	br	c918 <__umoddi3+0x1c0>
    cc30:	d8c00017 	ldw	r3,0(sp)
    cc34:	20c5c83a 	sub	r2,r4,r3
    cc38:	2089803a 	cmpltu	r4,r4,r2
    cc3c:	2dc7c83a 	sub	r3,r5,r23
    cc40:	1907c83a 	sub	r3,r3,r4
    cc44:	38cbc83a 	sub	r5,r7,r3
    cc48:	1009883a 	mov	r4,r2
    cc4c:	b105c83a 	sub	r2,r22,r4
    cc50:	b087803a 	cmpltu	r3,r22,r2
    cc54:	28c7c83a 	sub	r3,r5,r3
    cc58:	d9400317 	ldw	r5,12(sp)
    cc5c:	1544d83a 	srl	r2,r2,r21
    cc60:	1948983a 	sll	r4,r3,r5
    cc64:	1d46d83a 	srl	r3,r3,r21
    cc68:	20a4b03a 	or	r18,r4,r2
    cc6c:	9011883a 	mov	r8,r18
    cc70:	1813883a 	mov	r9,r3
    cc74:	003ef606 	br	c850 <__umoddi3+0xf8>
    cc78:	01400604 	movi	r5,24
    cc7c:	2805883a 	mov	r2,r5
    cc80:	003ecc06 	br	c7b4 <__umoddi3+0x5c>
    cc84:	01400204 	movi	r5,8
    cc88:	2805883a 	mov	r2,r5
    cc8c:	003ec906 	br	c7b4 <__umoddi3+0x5c>
    cc90:	01400204 	movi	r5,8
    cc94:	2805883a 	mov	r2,r5
    cc98:	003f0106 	br	c8a0 <__umoddi3+0x148>
    cc9c:	01400204 	movi	r5,8
    cca0:	2805883a 	mov	r2,r5
    cca4:	003f1206 	br	c8f0 <__umoddi3+0x198>
    cca8:	01400604 	movi	r5,24
    ccac:	2805883a 	mov	r2,r5
    ccb0:	003f0f06 	br	c8f0 <__umoddi3+0x198>
    ccb4:	01400604 	movi	r5,24
    ccb8:	2805883a 	mov	r2,r5
    ccbc:	003ef806 	br	c8a0 <__umoddi3+0x148>
    ccc0:	3c7fb82e 	bgeu	r7,r17,cba4 <__umoddi3+0x44c>
    ccc4:	843fffc4 	addi	r16,r16,-1
    ccc8:	3dcf883a 	add	r7,r7,r23
    cccc:	003fb506 	br	cba4 <__umoddi3+0x44c>
    ccd0:	147fa22e 	bgeu	r2,r17,cb5c <__umoddi3+0x404>
    ccd4:	e73fffc4 	addi	fp,fp,-1
    ccd8:	15c5883a 	add	r2,r2,r23
    ccdc:	003f9f06 	br	cb5c <__umoddi3+0x404>
    cce0:	147f692e 	bgeu	r2,r17,ca88 <__umoddi3+0x330>
    cce4:	1405883a 	add	r2,r2,r16
    cce8:	003f6706 	br	ca88 <__umoddi3+0x330>
    ccec:	1405883a 	add	r2,r2,r16
    ccf0:	003f1906 	br	c958 <__umoddi3+0x200>
    ccf4:	1405883a 	add	r2,r2,r16
    ccf8:	003ec906 	br	c820 <__umoddi3+0xc8>
    ccfc:	b13fcc36 	bltu	r22,r4,cc30 <__umoddi3+0x4d8>
    cd00:	000b883a 	mov	r5,zero
    cd04:	003fd106 	br	cc4c <__umoddi3+0x4f4>

0000cd08 <__eqdf2>:
    cd08:	deffef04 	addi	sp,sp,-68
    cd0c:	dc400f15 	stw	r17,60(sp)
    cd10:	dc400404 	addi	r17,sp,16
    cd14:	2005883a 	mov	r2,r4
    cd18:	2807883a 	mov	r3,r5
    cd1c:	dc000e15 	stw	r16,56(sp)
    cd20:	d809883a 	mov	r4,sp
    cd24:	880b883a 	mov	r5,r17
    cd28:	dc000904 	addi	r16,sp,36
    cd2c:	d8c00115 	stw	r3,4(sp)
    cd30:	d8800015 	stw	r2,0(sp)
    cd34:	d9800215 	stw	r6,8(sp)
    cd38:	dfc01015 	stw	ra,64(sp)
    cd3c:	d9c00315 	stw	r7,12(sp)
    cd40:	0003e040 	call	3e04 <__unpack_d>
    cd44:	d9000204 	addi	r4,sp,8
    cd48:	800b883a 	mov	r5,r16
    cd4c:	0003e040 	call	3e04 <__unpack_d>
    cd50:	d8800417 	ldw	r2,16(sp)
    cd54:	00c00044 	movi	r3,1
    cd58:	180d883a 	mov	r6,r3
    cd5c:	1880062e 	bgeu	r3,r2,cd78 <__eqdf2+0x70>
    cd60:	d8800917 	ldw	r2,36(sp)
    cd64:	8809883a 	mov	r4,r17
    cd68:	800b883a 	mov	r5,r16
    cd6c:	1880022e 	bgeu	r3,r2,cd78 <__eqdf2+0x70>
    cd70:	0003f3c0 	call	3f3c <__fpcmp_parts_d>
    cd74:	100d883a 	mov	r6,r2
    cd78:	3005883a 	mov	r2,r6
    cd7c:	dfc01017 	ldw	ra,64(sp)
    cd80:	dc400f17 	ldw	r17,60(sp)
    cd84:	dc000e17 	ldw	r16,56(sp)
    cd88:	dec01104 	addi	sp,sp,68
    cd8c:	f800283a 	ret

0000cd90 <__nedf2>:
    cd90:	deffef04 	addi	sp,sp,-68
    cd94:	dc400f15 	stw	r17,60(sp)
    cd98:	dc400404 	addi	r17,sp,16
    cd9c:	2005883a 	mov	r2,r4
    cda0:	2807883a 	mov	r3,r5
    cda4:	dc000e15 	stw	r16,56(sp)
    cda8:	d809883a 	mov	r4,sp
    cdac:	880b883a 	mov	r5,r17
    cdb0:	dc000904 	addi	r16,sp,36
    cdb4:	d8c00115 	stw	r3,4(sp)
    cdb8:	d8800015 	stw	r2,0(sp)
    cdbc:	d9800215 	stw	r6,8(sp)
    cdc0:	dfc01015 	stw	ra,64(sp)
    cdc4:	d9c00315 	stw	r7,12(sp)
    cdc8:	0003e040 	call	3e04 <__unpack_d>
    cdcc:	d9000204 	addi	r4,sp,8
    cdd0:	800b883a 	mov	r5,r16
    cdd4:	0003e040 	call	3e04 <__unpack_d>
    cdd8:	d8800417 	ldw	r2,16(sp)
    cddc:	00c00044 	movi	r3,1
    cde0:	180d883a 	mov	r6,r3
    cde4:	1880062e 	bgeu	r3,r2,ce00 <__nedf2+0x70>
    cde8:	d8800917 	ldw	r2,36(sp)
    cdec:	8809883a 	mov	r4,r17
    cdf0:	800b883a 	mov	r5,r16
    cdf4:	1880022e 	bgeu	r3,r2,ce00 <__nedf2+0x70>
    cdf8:	0003f3c0 	call	3f3c <__fpcmp_parts_d>
    cdfc:	100d883a 	mov	r6,r2
    ce00:	3005883a 	mov	r2,r6
    ce04:	dfc01017 	ldw	ra,64(sp)
    ce08:	dc400f17 	ldw	r17,60(sp)
    ce0c:	dc000e17 	ldw	r16,56(sp)
    ce10:	dec01104 	addi	sp,sp,68
    ce14:	f800283a 	ret

0000ce18 <__gedf2>:
    ce18:	deffef04 	addi	sp,sp,-68
    ce1c:	dc400f15 	stw	r17,60(sp)
    ce20:	dc400404 	addi	r17,sp,16
    ce24:	2005883a 	mov	r2,r4
    ce28:	2807883a 	mov	r3,r5
    ce2c:	dc000e15 	stw	r16,56(sp)
    ce30:	d809883a 	mov	r4,sp
    ce34:	880b883a 	mov	r5,r17
    ce38:	dc000904 	addi	r16,sp,36
    ce3c:	d8c00115 	stw	r3,4(sp)
    ce40:	d8800015 	stw	r2,0(sp)
    ce44:	d9800215 	stw	r6,8(sp)
    ce48:	dfc01015 	stw	ra,64(sp)
    ce4c:	d9c00315 	stw	r7,12(sp)
    ce50:	0003e040 	call	3e04 <__unpack_d>
    ce54:	d9000204 	addi	r4,sp,8
    ce58:	800b883a 	mov	r5,r16
    ce5c:	0003e040 	call	3e04 <__unpack_d>
    ce60:	d8800417 	ldw	r2,16(sp)
    ce64:	00c00044 	movi	r3,1
    ce68:	01bfffc4 	movi	r6,-1
    ce6c:	1880062e 	bgeu	r3,r2,ce88 <__gedf2+0x70>
    ce70:	d8800917 	ldw	r2,36(sp)
    ce74:	8809883a 	mov	r4,r17
    ce78:	800b883a 	mov	r5,r16
    ce7c:	1880022e 	bgeu	r3,r2,ce88 <__gedf2+0x70>
    ce80:	0003f3c0 	call	3f3c <__fpcmp_parts_d>
    ce84:	100d883a 	mov	r6,r2
    ce88:	3005883a 	mov	r2,r6
    ce8c:	dfc01017 	ldw	ra,64(sp)
    ce90:	dc400f17 	ldw	r17,60(sp)
    ce94:	dc000e17 	ldw	r16,56(sp)
    ce98:	dec01104 	addi	sp,sp,68
    ce9c:	f800283a 	ret

0000cea0 <__floatunsidf>:
    cea0:	defff204 	addi	sp,sp,-56
    cea4:	dfc00d15 	stw	ra,52(sp)
    cea8:	ddc00c15 	stw	r23,48(sp)
    ceac:	dd800b15 	stw	r22,44(sp)
    ceb0:	dd400a15 	stw	r21,40(sp)
    ceb4:	dd000915 	stw	r20,36(sp)
    ceb8:	dcc00815 	stw	r19,32(sp)
    cebc:	dc800715 	stw	r18,28(sp)
    cec0:	dc400615 	stw	r17,24(sp)
    cec4:	dc000515 	stw	r16,20(sp)
    cec8:	d8000115 	stw	zero,4(sp)
    cecc:	20000f1e 	bne	r4,zero,cf0c <__floatunsidf+0x6c>
    ced0:	00800084 	movi	r2,2
    ced4:	d8800015 	stw	r2,0(sp)
    ced8:	d809883a 	mov	r4,sp
    cedc:	0003af00 	call	3af0 <__pack_d>
    cee0:	dfc00d17 	ldw	ra,52(sp)
    cee4:	ddc00c17 	ldw	r23,48(sp)
    cee8:	dd800b17 	ldw	r22,44(sp)
    ceec:	dd400a17 	ldw	r21,40(sp)
    cef0:	dd000917 	ldw	r20,36(sp)
    cef4:	dcc00817 	ldw	r19,32(sp)
    cef8:	dc800717 	ldw	r18,28(sp)
    cefc:	dc400617 	ldw	r17,24(sp)
    cf00:	dc000517 	ldw	r16,20(sp)
    cf04:	dec00e04 	addi	sp,sp,56
    cf08:	f800283a 	ret
    cf0c:	008000c4 	movi	r2,3
    cf10:	00c00f04 	movi	r3,60
    cf14:	002f883a 	mov	r23,zero
    cf18:	202d883a 	mov	r22,r4
    cf1c:	d8800015 	stw	r2,0(sp)
    cf20:	d8c00215 	stw	r3,8(sp)
    cf24:	d9000315 	stw	r4,12(sp)
    cf28:	ddc00415 	stw	r23,16(sp)
    cf2c:	00037a00 	call	37a0 <__clzsi2>
    cf30:	12400744 	addi	r9,r2,29
    cf34:	48000b16 	blt	r9,zero,cf64 <__floatunsidf+0xc4>
    cf38:	483fe726 	beq	r9,zero,ced8 <__floatunsidf+0x38>
    cf3c:	10bfff44 	addi	r2,r2,-3
    cf40:	10002e16 	blt	r2,zero,cffc <__floatunsidf+0x15c>
    cf44:	b0a2983a 	sll	r17,r22,r2
    cf48:	0021883a 	mov	r16,zero
    cf4c:	d8800217 	ldw	r2,8(sp)
    cf50:	dc400415 	stw	r17,16(sp)
    cf54:	dc000315 	stw	r16,12(sp)
    cf58:	1245c83a 	sub	r2,r2,r9
    cf5c:	d8800215 	stw	r2,8(sp)
    cf60:	003fdd06 	br	ced8 <__floatunsidf+0x38>
    cf64:	0255c83a 	sub	r10,zero,r9
    cf68:	51bff804 	addi	r6,r10,-32
    cf6c:	30001b16 	blt	r6,zero,cfdc <__floatunsidf+0x13c>
    cf70:	b9a8d83a 	srl	r20,r23,r6
    cf74:	002b883a 	mov	r21,zero
    cf78:	000f883a 	mov	r7,zero
    cf7c:	01000044 	movi	r4,1
    cf80:	0011883a 	mov	r8,zero
    cf84:	30002516 	blt	r6,zero,d01c <__floatunsidf+0x17c>
    cf88:	21a6983a 	sll	r19,r4,r6
    cf8c:	0025883a 	mov	r18,zero
    cf90:	00bfffc4 	movi	r2,-1
    cf94:	9089883a 	add	r4,r18,r2
    cf98:	988b883a 	add	r5,r19,r2
    cf9c:	248d803a 	cmpltu	r6,r4,r18
    cfa0:	314b883a 	add	r5,r6,r5
    cfa4:	b104703a 	and	r2,r22,r4
    cfa8:	b946703a 	and	r3,r23,r5
    cfac:	10c4b03a 	or	r2,r2,r3
    cfb0:	10000226 	beq	r2,zero,cfbc <__floatunsidf+0x11c>
    cfb4:	01c00044 	movi	r7,1
    cfb8:	0011883a 	mov	r8,zero
    cfbc:	d9000217 	ldw	r4,8(sp)
    cfc0:	a1c4b03a 	or	r2,r20,r7
    cfc4:	aa06b03a 	or	r3,r21,r8
    cfc8:	2249c83a 	sub	r4,r4,r9
    cfcc:	d8c00415 	stw	r3,16(sp)
    cfd0:	d9000215 	stw	r4,8(sp)
    cfd4:	d8800315 	stw	r2,12(sp)
    cfd8:	003fbf06 	br	ced8 <__floatunsidf+0x38>
    cfdc:	bdc7883a 	add	r3,r23,r23
    cfe0:	008007c4 	movi	r2,31
    cfe4:	1285c83a 	sub	r2,r2,r10
    cfe8:	1886983a 	sll	r3,r3,r2
    cfec:	b2a8d83a 	srl	r20,r22,r10
    cff0:	baaad83a 	srl	r21,r23,r10
    cff4:	1d28b03a 	or	r20,r3,r20
    cff8:	003fdf06 	br	cf78 <__floatunsidf+0xd8>
    cffc:	b006d07a 	srli	r3,r22,1
    d000:	008007c4 	movi	r2,31
    d004:	1245c83a 	sub	r2,r2,r9
    d008:	1886d83a 	srl	r3,r3,r2
    d00c:	ba62983a 	sll	r17,r23,r9
    d010:	b260983a 	sll	r16,r22,r9
    d014:	1c62b03a 	or	r17,r3,r17
    d018:	003fcc06 	br	cf4c <__floatunsidf+0xac>
    d01c:	2006d07a 	srli	r3,r4,1
    d020:	008007c4 	movi	r2,31
    d024:	1285c83a 	sub	r2,r2,r10
    d028:	18a6d83a 	srl	r19,r3,r2
    d02c:	22a4983a 	sll	r18,r4,r10
    d030:	003fd706 	br	cf90 <__floatunsidf+0xf0>

0000d034 <udivmodsi4>:
    d034:	29001b2e 	bgeu	r5,r4,d0a4 <udivmodsi4+0x70>
    d038:	28001a16 	blt	r5,zero,d0a4 <udivmodsi4+0x70>
    d03c:	00800044 	movi	r2,1
    d040:	0007883a 	mov	r3,zero
    d044:	01c007c4 	movi	r7,31
    d048:	00000306 	br	d058 <udivmodsi4+0x24>
    d04c:	19c01326 	beq	r3,r7,d09c <udivmodsi4+0x68>
    d050:	18c00044 	addi	r3,r3,1
    d054:	28000416 	blt	r5,zero,d068 <udivmodsi4+0x34>
    d058:	294b883a 	add	r5,r5,r5
    d05c:	1085883a 	add	r2,r2,r2
    d060:	293ffa36 	bltu	r5,r4,d04c <udivmodsi4+0x18>
    d064:	10000d26 	beq	r2,zero,d09c <udivmodsi4+0x68>
    d068:	0007883a 	mov	r3,zero
    d06c:	21400236 	bltu	r4,r5,d078 <udivmodsi4+0x44>
    d070:	2149c83a 	sub	r4,r4,r5
    d074:	1886b03a 	or	r3,r3,r2
    d078:	1004d07a 	srli	r2,r2,1
    d07c:	280ad07a 	srli	r5,r5,1
    d080:	103ffa1e 	bne	r2,zero,d06c <udivmodsi4+0x38>
    d084:	30000226 	beq	r6,zero,d090 <udivmodsi4+0x5c>
    d088:	2005883a 	mov	r2,r4
    d08c:	f800283a 	ret
    d090:	1809883a 	mov	r4,r3
    d094:	2005883a 	mov	r2,r4
    d098:	f800283a 	ret
    d09c:	0007883a 	mov	r3,zero
    d0a0:	003ff806 	br	d084 <udivmodsi4+0x50>
    d0a4:	00800044 	movi	r2,1
    d0a8:	0007883a 	mov	r3,zero
    d0ac:	003fef06 	br	d06c <udivmodsi4+0x38>

0000d0b0 <__divsi3>:
    d0b0:	defffe04 	addi	sp,sp,-8
    d0b4:	dc000015 	stw	r16,0(sp)
    d0b8:	dfc00115 	stw	ra,4(sp)
    d0bc:	0021883a 	mov	r16,zero
    d0c0:	20000c16 	blt	r4,zero,d0f4 <__divsi3+0x44>
    d0c4:	000d883a 	mov	r6,zero
    d0c8:	28000e16 	blt	r5,zero,d104 <__divsi3+0x54>
    d0cc:	000d0340 	call	d034 <udivmodsi4>
    d0d0:	1007883a 	mov	r3,r2
    d0d4:	8005003a 	cmpeq	r2,r16,zero
    d0d8:	1000011e 	bne	r2,zero,d0e0 <__divsi3+0x30>
    d0dc:	00c7c83a 	sub	r3,zero,r3
    d0e0:	1805883a 	mov	r2,r3
    d0e4:	dfc00117 	ldw	ra,4(sp)
    d0e8:	dc000017 	ldw	r16,0(sp)
    d0ec:	dec00204 	addi	sp,sp,8
    d0f0:	f800283a 	ret
    d0f4:	0109c83a 	sub	r4,zero,r4
    d0f8:	04000044 	movi	r16,1
    d0fc:	000d883a 	mov	r6,zero
    d100:	283ff20e 	bge	r5,zero,d0cc <__divsi3+0x1c>
    d104:	014bc83a 	sub	r5,zero,r5
    d108:	8021003a 	cmpeq	r16,r16,zero
    d10c:	003fef06 	br	d0cc <__divsi3+0x1c>

0000d110 <__modsi3>:
    d110:	deffff04 	addi	sp,sp,-4
    d114:	dfc00015 	stw	ra,0(sp)
    d118:	01800044 	movi	r6,1
    d11c:	2807883a 	mov	r3,r5
    d120:	20000416 	blt	r4,zero,d134 <__modsi3+0x24>
    d124:	28000c16 	blt	r5,zero,d158 <__modsi3+0x48>
    d128:	dfc00017 	ldw	ra,0(sp)
    d12c:	dec00104 	addi	sp,sp,4
    d130:	000d0341 	jmpi	d034 <udivmodsi4>
    d134:	0109c83a 	sub	r4,zero,r4
    d138:	28000b16 	blt	r5,zero,d168 <__modsi3+0x58>
    d13c:	180b883a 	mov	r5,r3
    d140:	01800044 	movi	r6,1
    d144:	000d0340 	call	d034 <udivmodsi4>
    d148:	0085c83a 	sub	r2,zero,r2
    d14c:	dfc00017 	ldw	ra,0(sp)
    d150:	dec00104 	addi	sp,sp,4
    d154:	f800283a 	ret
    d158:	014bc83a 	sub	r5,zero,r5
    d15c:	dfc00017 	ldw	ra,0(sp)
    d160:	dec00104 	addi	sp,sp,4
    d164:	000d0341 	jmpi	d034 <udivmodsi4>
    d168:	0147c83a 	sub	r3,zero,r5
    d16c:	003ff306 	br	d13c <__modsi3+0x2c>

0000d170 <__udivsi3>:
    d170:	000d883a 	mov	r6,zero
    d174:	000d0341 	jmpi	d034 <udivmodsi4>

0000d178 <__umodsi3>:
    d178:	01800044 	movi	r6,1
    d17c:	000d0341 	jmpi	d034 <udivmodsi4>

0000d180 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d180:	defffd04 	addi	sp,sp,-12
    d184:	dfc00215 	stw	ra,8(sp)
    d188:	dc400115 	stw	r17,4(sp)
    d18c:	dc000015 	stw	r16,0(sp)
    d190:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d194:	20001c16 	blt	r4,zero,d208 <close+0x88>
    d198:	20c00324 	muli	r3,r4,12
    d19c:	00800074 	movhi	r2,1
    d1a0:	10837104 	addi	r2,r2,3524
    d1a4:	1889883a 	add	r4,r3,r2

  if (fd)
    d1a8:	20001726 	beq	r4,zero,d208 <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d1ac:	20800017 	ldw	r2,0(r4)
    d1b0:	10800417 	ldw	r2,16(r2)
    d1b4:	10002126 	beq	r2,zero,d23c <close+0xbc>
    d1b8:	103ee83a 	callr	r2
    d1bc:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d1c0:	8009883a 	mov	r4,r16
    d1c4:	000d9ac0 	call	d9ac <alt_release_fd>
    if (rval < 0)
    d1c8:	88000216 	blt	r17,zero,d1d4 <close+0x54>
    d1cc:	0005883a 	mov	r2,zero
    d1d0:	00001d06 	br	d248 <close+0xc8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    d1d4:	00800074 	movhi	r2,1
    d1d8:	10891304 	addi	r2,r2,9292
    d1dc:	10800017 	ldw	r2,0(r2)
    d1e0:	1000031e 	bne	r2,zero,d1f0 <close+0x70>
    d1e4:	00c00074 	movhi	r3,1
    d1e8:	18d0e504 	addi	r3,r3,17300
    d1ec:	00000206 	br	d1f8 <close+0x78>
    d1f0:	103ee83a 	callr	r2
    d1f4:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
    d1f8:	0445c83a 	sub	r2,zero,r17
    d1fc:	18800015 	stw	r2,0(r3)
    d200:	00bfffc4 	movi	r2,-1
    d204:	00001006 	br	d248 <close+0xc8>
    d208:	00800074 	movhi	r2,1
    d20c:	10891304 	addi	r2,r2,9292
    d210:	10800017 	ldw	r2,0(r2)
    d214:	1000031e 	bne	r2,zero,d224 <close+0xa4>
    d218:	00c00074 	movhi	r3,1
    d21c:	18d0e504 	addi	r3,r3,17300
    d220:	00000206 	br	d22c <close+0xac>
    d224:	103ee83a 	callr	r2
    d228:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d22c:	00801444 	movi	r2,81
    d230:	18800015 	stw	r2,0(r3)
    d234:	00bfffc4 	movi	r2,-1
    d238:	00000306 	br	d248 <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d23c:	8009883a 	mov	r4,r16
    d240:	000d9ac0 	call	d9ac <alt_release_fd>
    d244:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    d248:	dfc00217 	ldw	ra,8(sp)
    d24c:	dc400117 	ldw	r17,4(sp)
    d250:	dc000017 	ldw	r16,0(sp)
    d254:	dec00304 	addi	sp,sp,12
    d258:	f800283a 	ret

0000d25c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    d25c:	3005883a 	mov	r2,r6
    d260:	f800283a 	ret

0000d264 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d264:	deffff04 	addi	sp,sp,-4
    d268:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d26c:	20000e16 	blt	r4,zero,d2a8 <fstat+0x44>
    d270:	20c00324 	muli	r3,r4,12
    d274:	00800074 	movhi	r2,1
    d278:	10837104 	addi	r2,r2,3524
    d27c:	1889883a 	add	r4,r3,r2
  
  if (fd)
    d280:	20000926 	beq	r4,zero,d2a8 <fstat+0x44>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d284:	20800017 	ldw	r2,0(r4)
    d288:	10800817 	ldw	r2,32(r2)
    d28c:	10000226 	beq	r2,zero,d298 <fstat+0x34>
    {
      return fd->dev->fstat(fd, st);
    d290:	103ee83a 	callr	r2
    d294:	00001006 	br	d2d8 <fstat+0x74>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d298:	00880004 	movi	r2,8192
    d29c:	28800115 	stw	r2,4(r5)
    d2a0:	0005883a 	mov	r2,zero
    d2a4:	00000c06 	br	d2d8 <fstat+0x74>
    d2a8:	00800074 	movhi	r2,1
    d2ac:	10891304 	addi	r2,r2,9292
    d2b0:	10800017 	ldw	r2,0(r2)
    d2b4:	1000031e 	bne	r2,zero,d2c4 <fstat+0x60>
    d2b8:	00c00074 	movhi	r3,1
    d2bc:	18d0e504 	addi	r3,r3,17300
    d2c0:	00000206 	br	d2cc <fstat+0x68>
    d2c4:	103ee83a 	callr	r2
    d2c8:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d2cc:	00801444 	movi	r2,81
    d2d0:	18800015 	stw	r2,0(r3)
    d2d4:	00bfffc4 	movi	r2,-1
    return -1;
  }
}
    d2d8:	dfc00017 	ldw	ra,0(sp)
    d2dc:	dec00104 	addi	sp,sp,4
    d2e0:	f800283a 	ret

0000d2e4 <gettimeofday>:
    d2e4:	defffc04 	addi	sp,sp,-16
    d2e8:	dfc00315 	stw	ra,12(sp)
    d2ec:	dc800215 	stw	r18,8(sp)
    d2f0:	dc400115 	stw	r17,4(sp)
    d2f4:	dc000015 	stw	r16,0(sp)
    d2f8:	2023883a 	mov	r17,r4
    d2fc:	2825883a 	mov	r18,r5
    d300:	00800074 	movhi	r2,1
    d304:	1090f504 	addi	r2,r2,17364
    d308:	11c00017 	ldw	r7,0(r2)
    d30c:	00800074 	movhi	r2,1
    d310:	1090f404 	addi	r2,r2,17360
    d314:	11000017 	ldw	r4,0(r2)
    d318:	2000021e 	bne	r4,zero,d324 <gettimeofday+0x40>
    d31c:	00bfde84 	movi	r2,-134
    d320:	00004206 	br	d42c <gettimeofday+0x148>
    d324:	3907203a 	divu	r3,r7,r4
    d328:	d0a7f817 	ldw	r2,-24608(gp)
    d32c:	10c5883a 	add	r2,r2,r3
    d330:	88800015 	stw	r2,0(r17)
    d334:	000d883a 	mov	r6,zero
    d338:	040003f4 	movhi	r16,15
    d33c:	84109004 	addi	r16,r16,16960
    d340:	8109203a 	divu	r4,r16,r4
    d344:	2005883a 	mov	r2,r4
    d348:	0007883a 	mov	r3,zero
    d34c:	3809883a 	mov	r4,r7
    d350:	300b883a 	mov	r5,r6
    d354:	100d883a 	mov	r6,r2
    d358:	180f883a 	mov	r7,r3
    d35c:	00037080 	call	3708 <__muldi3>
    d360:	800d883a 	mov	r6,r16
    d364:	000f883a 	mov	r7,zero
    d368:	1009883a 	mov	r4,r2
    d36c:	180b883a 	mov	r5,r3
    d370:	000c7580 	call	c758 <__umoddi3>
    d374:	1009883a 	mov	r4,r2
    d378:	d0a7f804 	addi	r2,gp,-24608
    d37c:	10800117 	ldw	r2,4(r2)
    d380:	1105883a 	add	r2,r2,r4
    d384:	88800115 	stw	r2,4(r17)
    d388:	1000100e 	bge	r2,zero,d3cc <gettimeofday+0xe8>
    d38c:	88800017 	ldw	r2,0(r17)
    d390:	00800616 	blt	zero,r2,d3ac <gettimeofday+0xc8>
    d394:	00000206 	br	d3a0 <gettimeofday+0xbc>
    d398:	88800017 	ldw	r2,0(r17)
    d39c:	00800316 	blt	zero,r2,d3ac <gettimeofday+0xc8>
    d3a0:	88000015 	stw	zero,0(r17)
    d3a4:	88000115 	stw	zero,4(r17)
    d3a8:	00001706 	br	d408 <gettimeofday+0x124>
    d3ac:	10bfffc4 	addi	r2,r2,-1
    d3b0:	88800015 	stw	r2,0(r17)
    d3b4:	88800117 	ldw	r2,4(r17)
    d3b8:	00c003f4 	movhi	r3,15
    d3bc:	18d09004 	addi	r3,r3,16960
    d3c0:	10c5883a 	add	r2,r2,r3
    d3c4:	88800115 	stw	r2,4(r17)
    d3c8:	103ff316 	blt	r2,zero,d398 <gettimeofday+0xb4>
    d3cc:	88c00117 	ldw	r3,4(r17)
    d3d0:	008003f4 	movhi	r2,15
    d3d4:	10908fc4 	addi	r2,r2,16959
    d3d8:	10c00b0e 	bge	r2,r3,d408 <gettimeofday+0x124>
    d3dc:	01800044 	movi	r6,1
    d3e0:	017ffc74 	movhi	r5,65521
    d3e4:	296f7004 	addi	r5,r5,-16960
    d3e8:	1009883a 	mov	r4,r2
    d3ec:	88c00017 	ldw	r3,0(r17)
    d3f0:	1987883a 	add	r3,r3,r6
    d3f4:	88800117 	ldw	r2,4(r17)
    d3f8:	1145883a 	add	r2,r2,r5
    d3fc:	88800115 	stw	r2,4(r17)
    d400:	20bffb16 	blt	r4,r2,d3f0 <gettimeofday+0x10c>
    d404:	88c00015 	stw	r3,0(r17)
    d408:	9000021e 	bne	r18,zero,d414 <gettimeofday+0x130>
    d40c:	0005883a 	mov	r2,zero
    d410:	00000606 	br	d42c <gettimeofday+0x148>
    d414:	d0a7f617 	ldw	r2,-24616(gp)
    d418:	90800015 	stw	r2,0(r18)
    d41c:	d0a7f604 	addi	r2,gp,-24616
    d420:	10800117 	ldw	r2,4(r2)
    d424:	90800115 	stw	r2,4(r18)
    d428:	0005883a 	mov	r2,zero
    d42c:	dfc00317 	ldw	ra,12(sp)
    d430:	dc800217 	ldw	r18,8(sp)
    d434:	dc400117 	ldw	r17,4(sp)
    d438:	dc000017 	ldw	r16,0(sp)
    d43c:	dec00404 	addi	sp,sp,16
    d440:	f800283a 	ret

0000d444 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    d444:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    d448:	008007c4 	movi	r2,31
    d44c:	1100022e 	bgeu	r2,r4,d458 <alt_irq_register+0x14>
    d450:	00bffa84 	movi	r2,-22
    d454:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d458:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d45c:	013fff84 	movi	r4,-2
    d460:	4104703a 	and	r2,r8,r4
    d464:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    d468:	380490fa 	slli	r2,r7,3
    d46c:	00c00374 	movhi	r3,13
    d470:	18d1e104 	addi	r3,r3,18308
    d474:	10c5883a 	add	r2,r2,r3
    d478:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    d47c:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    d480:	30000e26 	beq	r6,zero,d4bc <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d484:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d488:	2904703a 	and	r2,r5,r4
    d48c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    d490:	00c00074 	movhi	r3,1
    d494:	18d0f004 	addi	r3,r3,17344
    d498:	19000017 	ldw	r4,0(r3)
    d49c:	00800044 	movi	r2,1
    d4a0:	11c4983a 	sll	r2,r2,r7
    d4a4:	1104b03a 	or	r2,r2,r4
    d4a8:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d4ac:	18800017 	ldw	r2,0(r3)
    d4b0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d4b4:	2801703a 	wrctl	status,r5
    d4b8:	00000e06 	br	d4f4 <alt_irq_register+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d4bc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d4c0:	00bfff84 	movi	r2,-2
    d4c4:	2884703a 	and	r2,r5,r2
    d4c8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    d4cc:	00c00074 	movhi	r3,1
    d4d0:	18d0f004 	addi	r3,r3,17344
    d4d4:	19000017 	ldw	r4,0(r3)
    d4d8:	00bfff84 	movi	r2,-2
    d4dc:	11c4183a 	rol	r2,r2,r7
    d4e0:	1104703a 	and	r2,r2,r4
    d4e4:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d4e8:	18800017 	ldw	r2,0(r3)
    d4ec:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d4f0:	2801703a 	wrctl	status,r5
    d4f4:	4001703a 	wrctl	status,r8
    d4f8:	0005883a 	mov	r2,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
    d4fc:	f800283a 	ret

0000d500 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d500:	defff004 	addi	sp,sp,-64
    d504:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d508:	20000f16 	blt	r4,zero,d548 <isatty+0x48>
    d50c:	20c00324 	muli	r3,r4,12
    d510:	00800074 	movhi	r2,1
    d514:	10837104 	addi	r2,r2,3524
    d518:	1885883a 	add	r2,r3,r2
  
  if (fd)
    d51c:	10000a26 	beq	r2,zero,d548 <isatty+0x48>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d520:	10800017 	ldw	r2,0(r2)
    d524:	10800817 	ldw	r2,32(r2)
    d528:	1000021e 	bne	r2,zero,d534 <isatty+0x34>
    d52c:	00800044 	movi	r2,1
    d530:	00001106 	br	d578 <isatty+0x78>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d534:	d80b883a 	mov	r5,sp
    d538:	000d2640 	call	d264 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d53c:	d8800117 	ldw	r2,4(sp)
    d540:	10880020 	cmpeqi	r2,r2,8192
    d544:	00000c06 	br	d578 <isatty+0x78>
    d548:	00800074 	movhi	r2,1
    d54c:	10891304 	addi	r2,r2,9292
    d550:	10800017 	ldw	r2,0(r2)
    d554:	1000031e 	bne	r2,zero,d564 <isatty+0x64>
    d558:	00c00074 	movhi	r3,1
    d55c:	18d0e504 	addi	r3,r3,17300
    d560:	00000206 	br	d56c <isatty+0x6c>
    d564:	103ee83a 	callr	r2
    d568:	1007883a 	mov	r3,r2
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d56c:	00801444 	movi	r2,81
    d570:	18800015 	stw	r2,0(r3)
    d574:	0005883a 	mov	r2,zero
    return 0;
  }
}
    d578:	dfc00f17 	ldw	ra,60(sp)
    d57c:	dec01004 	addi	sp,sp,64
    d580:	f800283a 	ret

0000d584 <alt_load>:
    d584:	deffff04 	addi	sp,sp,-4
    d588:	dfc00015 	stw	ra,0(sp)
    d58c:	01000074 	movhi	r4,1
    d590:	21091a04 	addi	r4,r4,9320
    d594:	00c00074 	movhi	r3,1
    d598:	18c15004 	addi	r3,r3,1344
    d59c:	20c00926 	beq	r4,r3,d5c4 <alt_load+0x40>
    d5a0:	01800074 	movhi	r6,1
    d5a4:	31891a04 	addi	r6,r6,9320
    d5a8:	19800626 	beq	r3,r6,d5c4 <alt_load+0x40>
    d5ac:	01400104 	movi	r5,4
    d5b0:	20800017 	ldw	r2,0(r4)
    d5b4:	18800015 	stw	r2,0(r3)
    d5b8:	1947883a 	add	r3,r3,r5
    d5bc:	2149883a 	add	r4,r4,r5
    d5c0:	30fffb1e 	bne	r6,r3,d5b0 <alt_load+0x2c>
    d5c4:	01000034 	movhi	r4,0
    d5c8:	21000804 	addi	r4,r4,32
    d5cc:	00c00034 	movhi	r3,0
    d5d0:	18c00804 	addi	r3,r3,32
    d5d4:	20c00926 	beq	r4,r3,d5fc <alt_load+0x78>
    d5d8:	01800034 	movhi	r6,0
    d5dc:	31805a04 	addi	r6,r6,360
    d5e0:	19800626 	beq	r3,r6,d5fc <alt_load+0x78>
    d5e4:	01400104 	movi	r5,4
    d5e8:	20800017 	ldw	r2,0(r4)
    d5ec:	18800015 	stw	r2,0(r3)
    d5f0:	1947883a 	add	r3,r3,r5
    d5f4:	2149883a 	add	r4,r4,r5
    d5f8:	30fffb1e 	bne	r6,r3,d5e8 <alt_load+0x64>
    d5fc:	01000074 	movhi	r4,1
    d600:	213f8804 	addi	r4,r4,-480
    d604:	00c00074 	movhi	r3,1
    d608:	18ff8804 	addi	r3,r3,-480
    d60c:	20c00926 	beq	r4,r3,d634 <alt_load+0xb0>
    d610:	01800074 	movhi	r6,1
    d614:	31815004 	addi	r6,r6,1344
    d618:	19800626 	beq	r3,r6,d634 <alt_load+0xb0>
    d61c:	01400104 	movi	r5,4
    d620:	20800017 	ldw	r2,0(r4)
    d624:	18800015 	stw	r2,0(r3)
    d628:	1947883a 	add	r3,r3,r5
    d62c:	2149883a 	add	r4,r4,r5
    d630:	30fffb1e 	bne	r6,r3,d620 <alt_load+0x9c>
    d634:	000f8100 	call	f810 <alt_dcache_flush_all>
    d638:	000fa1c0 	call	fa1c <alt_icache_flush_all>
    d63c:	dfc00017 	ldw	ra,0(sp)
    d640:	dec00104 	addi	sp,sp,4
    d644:	f800283a 	ret

0000d648 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d648:	defffe04 	addi	sp,sp,-8
    d64c:	dfc00115 	stw	ra,4(sp)
    d650:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d654:	2000020e 	bge	r4,zero,d660 <lseek+0x18>
    d658:	043febc4 	movi	r16,-81
    d65c:	00000d06 	br	d694 <lseek+0x4c>
    d660:	20c00324 	muli	r3,r4,12
    d664:	00800074 	movhi	r2,1
    d668:	10837104 	addi	r2,r2,3524
    d66c:	1889883a 	add	r4,r3,r2
  
  if (fd) 
    d670:	20001526 	beq	r4,zero,d6c8 <lseek+0x80>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d674:	20800017 	ldw	r2,0(r4)
    d678:	10800717 	ldw	r2,28(r2)
    d67c:	1000021e 	bne	r2,zero,d688 <lseek+0x40>
    d680:	043fde84 	movi	r16,-134
    d684:	00000306 	br	d694 <lseek+0x4c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d688:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    d68c:	1000100e 	bge	r2,zero,d6d0 <lseek+0x88>
    d690:	1021883a 	mov	r16,r2
    d694:	00800074 	movhi	r2,1
    d698:	10891304 	addi	r2,r2,9292
    d69c:	10800017 	ldw	r2,0(r2)
    d6a0:	1000031e 	bne	r2,zero,d6b0 <lseek+0x68>
    d6a4:	00c00074 	movhi	r3,1
    d6a8:	18d0e504 	addi	r3,r3,17300
    d6ac:	00000206 	br	d6b8 <lseek+0x70>
    d6b0:	103ee83a 	callr	r2
    d6b4:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
    d6b8:	0405c83a 	sub	r2,zero,r16
    d6bc:	18800015 	stw	r2,0(r3)
    d6c0:	00bfffc4 	movi	r2,-1
    d6c4:	00000206 	br	d6d0 <lseek+0x88>
    d6c8:	043febc4 	movi	r16,-81
    d6cc:	003ff106 	br	d694 <lseek+0x4c>
    rc = -1;
  }

  return rc;
}
    d6d0:	dfc00117 	ldw	ra,4(sp)
    d6d4:	dc000017 	ldw	r16,0(sp)
    d6d8:	dec00204 	addi	sp,sp,8
    d6dc:	f800283a 	ret

0000d6e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d6e0:	defffe04 	addi	sp,sp,-8
    d6e4:	dfc00115 	stw	ra,4(sp)
    d6e8:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d6ec:	0009883a 	mov	r4,zero
    d6f0:	000dbf40 	call	dbf4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d6f4:	000dc140 	call	dc14 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d6f8:	01800074 	movhi	r6,1
    d6fc:	3180de04 	addi	r6,r6,888
    d700:	3009883a 	mov	r4,r6
    d704:	300b883a 	mov	r5,r6
    d708:	000faa00 	call	faa0 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d70c:	d127fb17 	ldw	r4,-24596(gp)
    d710:	d167fc17 	ldw	r5,-24592(gp)
    d714:	d1a7fd17 	ldw	r6,-24588(gp)
    d718:	0001cc00 	call	1cc0 <main>
    d71c:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    d720:	01000044 	movi	r4,1
    d724:	000d1800 	call	d180 <close>
  exit (result);
    d728:	8009883a 	mov	r4,r16
    d72c:	000fba80 	call	fba8 <exit>

0000d730 <__malloc_lock>:
    d730:	f800283a 	ret

0000d734 <__malloc_unlock>:
    d734:	f800283a 	ret

0000d738 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    d738:	defff904 	addi	sp,sp,-28
    d73c:	dfc00615 	stw	ra,24(sp)
    d740:	dd400515 	stw	r21,20(sp)
    d744:	dd000415 	stw	r20,16(sp)
    d748:	dcc00315 	stw	r19,12(sp)
    d74c:	dc800215 	stw	r18,8(sp)
    d750:	dc400115 	stw	r17,4(sp)
    d754:	dc000015 	stw	r16,0(sp)
    d758:	2029883a 	mov	r20,r4
    d75c:	2827883a 	mov	r19,r5
    d760:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    d764:	01400074 	movhi	r5,1
    d768:	29491004 	addi	r5,r5,9280
    d76c:	000f8840 	call	f884 <alt_find_dev>
    d770:	1021883a 	mov	r16,r2
    d774:	10000226 	beq	r2,zero,d780 <open+0x48>
    d778:	0025883a 	mov	r18,zero
    d77c:	00000a06 	br	d7a8 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    d780:	a009883a 	mov	r4,r20
    d784:	000f8f40 	call	f8f4 <alt_find_file>
    d788:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    d78c:	1000051e 	bne	r2,zero,d7a4 <open+0x6c>
    d790:	047fffc4 	movi	r17,-1
    d794:	043ffb44 	movi	r16,-19
    d798:	00002b06 	br	d848 <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d79c:	043ffcc4 	movi	r16,-13
    d7a0:	00002906 	br	d848 <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    d7a4:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
    d7a8:	8009883a 	mov	r4,r16
    d7ac:	000f9b00 	call	f9b0 <alt_get_fd>
    d7b0:	1023883a 	mov	r17,r2
    d7b4:	10003316 	blt	r2,zero,d884 <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    d7b8:	10800324 	muli	r2,r2,12
    d7bc:	02000074 	movhi	r8,1
    d7c0:	42037104 	addi	r8,r8,3524
    d7c4:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    d7c8:	00900034 	movhi	r2,16384
    d7cc:	10bfffc4 	addi	r2,r2,-1
    d7d0:	9886703a 	and	r3,r19,r2
    d7d4:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    d7d8:	9004c03a 	cmpne	r2,r18,zero
    d7dc:	1000121e 	bne	r2,zero,d828 <open+0xf0>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    d7e0:	18900034 	orhi	r2,r3,16384
    d7e4:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d7e8:	00800074 	movhi	r2,1
    d7ec:	10891204 	addi	r2,r2,9288
    d7f0:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d7f4:	21800017 	ldw	r6,0(r4)
    d7f8:	000b883a 	mov	r5,zero
    d7fc:	4007883a 	mov	r3,r8
    d800:	02400044 	movi	r9,1
    d804:	02000304 	movi	r8,12
    d808:	18800017 	ldw	r2,0(r3)
    d80c:	1180031e 	bne	r2,r6,d81c <open+0xe4>
    d810:	18800217 	ldw	r2,8(r3)
    d814:	1000010e 	bge	r2,zero,d81c <open+0xe4>
    d818:	193fe01e 	bne	r3,r4,d79c <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d81c:	2a4b883a 	add	r5,r5,r9
    d820:	1a07883a 	add	r3,r3,r8
    d824:	397ff82e 	bgeu	r7,r5,d808 <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    d828:	80800317 	ldw	r2,12(r16)
    d82c:	10001726 	beq	r2,zero,d88c <open+0x154>
    d830:	a00b883a 	mov	r5,r20
    d834:	980d883a 	mov	r6,r19
    d838:	a80f883a 	mov	r7,r21
    d83c:	103ee83a 	callr	r2
    d840:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    d844:	1000110e 	bge	r2,zero,d88c <open+0x154>
  {
    alt_release_fd (index);  
    d848:	8809883a 	mov	r4,r17
    d84c:	000d9ac0 	call	d9ac <alt_release_fd>
    d850:	00800074 	movhi	r2,1
    d854:	10891304 	addi	r2,r2,9292
    d858:	10800017 	ldw	r2,0(r2)
    d85c:	1000031e 	bne	r2,zero,d86c <open+0x134>
    d860:	00c00074 	movhi	r3,1
    d864:	18d0e504 	addi	r3,r3,17300
    d868:	00000206 	br	d874 <open+0x13c>
    d86c:	103ee83a 	callr	r2
    d870:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
    d874:	0405c83a 	sub	r2,zero,r16
    d878:	18800015 	stw	r2,0(r3)
    d87c:	047fffc4 	movi	r17,-1
    d880:	00000206 	br	d88c <open+0x154>
    d884:	1021883a 	mov	r16,r2
    d888:	003fef06 	br	d848 <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
    d88c:	8805883a 	mov	r2,r17
    d890:	dfc00617 	ldw	ra,24(sp)
    d894:	dd400517 	ldw	r21,20(sp)
    d898:	dd000417 	ldw	r20,16(sp)
    d89c:	dcc00317 	ldw	r19,12(sp)
    d8a0:	dc800217 	ldw	r18,8(sp)
    d8a4:	dc400117 	ldw	r17,4(sp)
    d8a8:	dc000017 	ldw	r16,0(sp)
    d8ac:	dec00704 	addi	sp,sp,28
    d8b0:	f800283a 	ret

0000d8b4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d8b4:	defffe04 	addi	sp,sp,-8
    d8b8:	dfc00115 	stw	ra,4(sp)
    d8bc:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d8c0:	20002916 	blt	r4,zero,d968 <read+0xb4>
    d8c4:	20c00324 	muli	r3,r4,12
    d8c8:	00800074 	movhi	r2,1
    d8cc:	10837104 	addi	r2,r2,3524
    d8d0:	1889883a 	add	r4,r3,r2
  
  if (fd)
    d8d4:	20002426 	beq	r4,zero,d968 <read+0xb4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d8d8:	20800217 	ldw	r2,8(r4)
    d8dc:	108000cc 	andi	r2,r2,3
    d8e0:	00c00044 	movi	r3,1
    d8e4:	10c01326 	beq	r2,r3,d934 <read+0x80>
    d8e8:	20800017 	ldw	r2,0(r4)
    d8ec:	10800517 	ldw	r2,20(r2)
    d8f0:	10001026 	beq	r2,zero,d934 <read+0x80>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d8f4:	103ee83a 	callr	r2
    d8f8:	1021883a 	mov	r16,r2
    d8fc:	1000260e 	bge	r2,zero,d998 <read+0xe4>
    d900:	00800074 	movhi	r2,1
    d904:	10891304 	addi	r2,r2,9292
    d908:	10800017 	ldw	r2,0(r2)
    d90c:	1000031e 	bne	r2,zero,d91c <read+0x68>
    d910:	00c00074 	movhi	r3,1
    d914:	18d0e504 	addi	r3,r3,17300
    d918:	00000206 	br	d924 <read+0x70>
    d91c:	103ee83a 	callr	r2
    d920:	1007883a 	mov	r3,r2
        {
          ALT_ERRNO = -rval;
    d924:	0405c83a 	sub	r2,zero,r16
    d928:	18800015 	stw	r2,0(r3)
    d92c:	043fffc4 	movi	r16,-1
    d930:	00001906 	br	d998 <read+0xe4>
    d934:	00800074 	movhi	r2,1
    d938:	10891304 	addi	r2,r2,9292
    d93c:	10800017 	ldw	r2,0(r2)
    d940:	1000031e 	bne	r2,zero,d950 <read+0x9c>
    d944:	00c00074 	movhi	r3,1
    d948:	18d0e504 	addi	r3,r3,17300
    d94c:	00000206 	br	d958 <read+0xa4>
    d950:	103ee83a 	callr	r2
    d954:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    d958:	00800344 	movi	r2,13
    d95c:	18800015 	stw	r2,0(r3)
    d960:	043fffc4 	movi	r16,-1
    d964:	00000c06 	br	d998 <read+0xe4>
    d968:	00800074 	movhi	r2,1
    d96c:	10891304 	addi	r2,r2,9292
    d970:	10800017 	ldw	r2,0(r2)
    d974:	1000031e 	bne	r2,zero,d984 <read+0xd0>
    d978:	00c00074 	movhi	r3,1
    d97c:	18d0e504 	addi	r3,r3,17300
    d980:	00000206 	br	d98c <read+0xd8>
    d984:	103ee83a 	callr	r2
    d988:	1007883a 	mov	r3,r2
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d98c:	00801444 	movi	r2,81
    d990:	18800015 	stw	r2,0(r3)
    d994:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    d998:	8005883a 	mov	r2,r16
    d99c:	dfc00117 	ldw	ra,4(sp)
    d9a0:	dc000017 	ldw	r16,0(sp)
    d9a4:	dec00204 	addi	sp,sp,8
    d9a8:	f800283a 	ret

0000d9ac <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    d9ac:	00800084 	movi	r2,2
    d9b0:	1100060e 	bge	r2,r4,d9cc <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    d9b4:	20800324 	muli	r2,r4,12
    d9b8:	00c00074 	movhi	r3,1
    d9bc:	18c37104 	addi	r3,r3,3524
    d9c0:	10c5883a 	add	r2,r2,r3
    d9c4:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    d9c8:	10000015 	stw	zero,0(r2)
    d9cc:	f800283a 	ret

0000d9d0 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d9d0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d9d4:	00bfff84 	movi	r2,-2
    d9d8:	2884703a 	and	r2,r5,r2
    d9dc:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d9e0:	d0a01f17 	ldw	r2,-32644(gp)
    d9e4:	108000c4 	addi	r2,r2,3
    d9e8:	00ffff04 	movi	r3,-4
    d9ec:	10c6703a 	and	r3,r2,r3
    d9f0:	d0e01f15 	stw	r3,-32644(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d9f4:	1909883a 	add	r4,r3,r4
    d9f8:	00820034 	movhi	r2,2048
    d9fc:	10800004 	addi	r2,r2,0
    da00:	1100032e 	bgeu	r2,r4,da10 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    da04:	2801703a 	wrctl	status,r5
    da08:	00ffffc4 	movi	r3,-1
    da0c:	00000206 	br	da18 <sbrk+0x48>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    da10:	d1201f15 	stw	r4,-32644(gp)
    da14:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    da18:	1805883a 	mov	r2,r3
    da1c:	f800283a 	ret

0000da20 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    da20:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    da24:	00bfff84 	movi	r2,-2
    da28:	2884703a 	and	r2,r5,r2
    da2c:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    da30:	20c00017 	ldw	r3,0(r4)
    da34:	20800117 	ldw	r2,4(r4)
    da38:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    da3c:	20800117 	ldw	r2,4(r4)
    da40:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    da44:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    da48:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    da4c:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    da50:	f800283a 	ret

0000da54 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    da54:	defffd04 	addi	sp,sp,-12
    da58:	dfc00215 	stw	ra,8(sp)
    da5c:	dc400115 	stw	r17,4(sp)
    da60:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    da64:	d4202017 	ldw	r16,-32640(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    da68:	d0a7ff17 	ldw	r2,-24580(gp)
    da6c:	10800044 	addi	r2,r2,1
    da70:	d0a7ff15 	stw	r2,-24580(gp)
    da74:	00001b06 	br	dae4 <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    da78:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    da7c:	80800403 	ldbu	r2,16(r16)
    da80:	10000326 	beq	r2,zero,da90 <alt_tick+0x3c>
    da84:	d0a7ff17 	ldw	r2,-24580(gp)
    da88:	1000011e 	bne	r2,zero,da90 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
    da8c:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    da90:	d0e7ff17 	ldw	r3,-24580(gp)
    da94:	80800217 	ldw	r2,8(r16)
    da98:	18801136 	bltu	r3,r2,dae0 <alt_tick+0x8c>
    da9c:	80800403 	ldbu	r2,16(r16)
    daa0:	10000f1e 	bne	r2,zero,dae0 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
    daa4:	80800317 	ldw	r2,12(r16)
    daa8:	81000517 	ldw	r4,20(r16)
    daac:	103ee83a 	callr	r2
    dab0:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    dab4:	1000031e 	bne	r2,zero,dac4 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
    dab8:	8009883a 	mov	r4,r16
    dabc:	000da200 	call	da20 <alt_alarm_stop>
    dac0:	00000706 	br	dae0 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
    dac4:	80800217 	ldw	r2,8(r16)
    dac8:	1885883a 	add	r2,r3,r2
    dacc:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    dad0:	d0e7ff17 	ldw	r3,-24580(gp)
    dad4:	10c0022e 	bgeu	r2,r3,dae0 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
    dad8:	00800044 	movi	r2,1
    dadc:	80800405 	stb	r2,16(r16)
    dae0:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    dae4:	d0a02004 	addi	r2,gp,-32640
    dae8:	80bfe31e 	bne	r16,r2,da78 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    daec:	dfc00217 	ldw	ra,8(sp)
    daf0:	dc400117 	ldw	r17,4(sp)
    daf4:	dc000017 	ldw	r16,0(sp)
    daf8:	dec00304 	addi	sp,sp,12
    dafc:	f800283a 	ret

0000db00 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    db00:	defffe04 	addi	sp,sp,-8
    db04:	dfc00115 	stw	ra,4(sp)
    db08:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    db0c:	20002816 	blt	r4,zero,dbb0 <write+0xb0>
    db10:	20c00324 	muli	r3,r4,12
    db14:	00800074 	movhi	r2,1
    db18:	10837104 	addi	r2,r2,3524
    db1c:	1889883a 	add	r4,r3,r2
  
  if (fd)
    db20:	20002326 	beq	r4,zero,dbb0 <write+0xb0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    db24:	20800217 	ldw	r2,8(r4)
    db28:	108000cc 	andi	r2,r2,3
    db2c:	10001326 	beq	r2,zero,db7c <write+0x7c>
    db30:	20800017 	ldw	r2,0(r4)
    db34:	10800617 	ldw	r2,24(r2)
    db38:	10001026 	beq	r2,zero,db7c <write+0x7c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    db3c:	103ee83a 	callr	r2
    db40:	1021883a 	mov	r16,r2
    db44:	1000260e 	bge	r2,zero,dbe0 <write+0xe0>
    db48:	00800074 	movhi	r2,1
    db4c:	10891304 	addi	r2,r2,9292
    db50:	10800017 	ldw	r2,0(r2)
    db54:	1000031e 	bne	r2,zero,db64 <write+0x64>
    db58:	00c00074 	movhi	r3,1
    db5c:	18d0e504 	addi	r3,r3,17300
    db60:	00000206 	br	db6c <write+0x6c>
    db64:	103ee83a 	callr	r2
    db68:	1007883a 	mov	r3,r2
      {
        ALT_ERRNO = -rval;
    db6c:	0405c83a 	sub	r2,zero,r16
    db70:	18800015 	stw	r2,0(r3)
    db74:	043fffc4 	movi	r16,-1
    db78:	00001906 	br	dbe0 <write+0xe0>
    db7c:	00800074 	movhi	r2,1
    db80:	10891304 	addi	r2,r2,9292
    db84:	10800017 	ldw	r2,0(r2)
    db88:	1000031e 	bne	r2,zero,db98 <write+0x98>
    db8c:	00c00074 	movhi	r3,1
    db90:	18d0e504 	addi	r3,r3,17300
    db94:	00000206 	br	dba0 <write+0xa0>
    db98:	103ee83a 	callr	r2
    db9c:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    dba0:	00800344 	movi	r2,13
    dba4:	18800015 	stw	r2,0(r3)
    dba8:	043fffc4 	movi	r16,-1
    dbac:	00000c06 	br	dbe0 <write+0xe0>
    dbb0:	00800074 	movhi	r2,1
    dbb4:	10891304 	addi	r2,r2,9292
    dbb8:	10800017 	ldw	r2,0(r2)
    dbbc:	1000031e 	bne	r2,zero,dbcc <write+0xcc>
    dbc0:	00c00074 	movhi	r3,1
    dbc4:	18d0e504 	addi	r3,r3,17300
    dbc8:	00000206 	br	dbd4 <write+0xd4>
    dbcc:	103ee83a 	callr	r2
    dbd0:	1007883a 	mov	r3,r2
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    dbd4:	00801444 	movi	r2,81
    dbd8:	18800015 	stw	r2,0(r3)
    dbdc:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    dbe0:	8005883a 	mov	r2,r16
    dbe4:	dfc00117 	ldw	ra,4(sp)
    dbe8:	dc000017 	ldw	r16,0(sp)
    dbec:	dec00204 	addi	sp,sp,8
    dbf0:	f800283a 	ret

0000dbf4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    dbf4:	deffff04 	addi	sp,sp,-4
    dbf8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
    dbfc:	000fb600 	call	fb60 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    dc00:	00800044 	movi	r2,1
    dc04:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    dc08:	dfc00017 	ldw	ra,0(sp)
    dc0c:	dec00104 	addi	sp,sp,4
    dc10:	f800283a 	ret

0000dc14 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    dc14:	defffc04 	addi	sp,sp,-16
    dc18:	dfc00315 	stw	ra,12(sp)
    dc1c:	dc800215 	stw	r18,8(sp)
    dc20:	dc400115 	stw	r17,4(sp)
    dc24:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    dc28:	04000204 	movi	r16,8
    dc2c:	01040034 	movhi	r4,4096
    dc30:	21080004 	addi	r4,r4,8192
    dc34:	000b883a 	mov	r5,zero
    dc38:	000d883a 	mov	r6,zero
    dc3c:	800f883a 	mov	r7,r16
    dc40:	000eb3c0 	call	eb3c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    dc44:	04400074 	movhi	r17,1
    dc48:	8c43db04 	addi	r17,r17,3948
    dc4c:	8809883a 	mov	r4,r17
    dc50:	000b883a 	mov	r5,zero
    dc54:	800d883a 	mov	r6,r16
    dc58:	000e0080 	call	e008 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    dc5c:	04000074 	movhi	r16,1
    dc60:	84091004 	addi	r16,r16,9280
    dc64:	893ff604 	addi	r4,r17,-40
    dc68:	800b883a 	mov	r5,r16
    dc6c:	000f8140 	call	f814 <alt_dev_llist_insert>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
    dc70:	01000074 	movhi	r4,1
    dc74:	2107e904 	addi	r4,r4,8100
    dc78:	000b883a 	mov	r5,zero
    dc7c:	018000c4 	movi	r6,3
    dc80:	000e51c0 	call	e51c <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
    dc84:	04800104 	movi	r18,4
    dc88:	01000074 	movhi	r4,1
    dc8c:	2107f504 	addi	r4,r4,8148
    dc90:	000b883a 	mov	r5,zero
    dc94:	900d883a 	mov	r6,r18
    dc98:	000e51c0 	call	e51c <alt_avalon_sgdma_init>
    dc9c:	01000074 	movhi	r4,1
    dca0:	21080104 	addi	r4,r4,8196
    dca4:	800b883a 	mov	r5,r16
    dca8:	000f8140 	call	f814 <alt_dev_llist_insert>
    dcac:	01000074 	movhi	r4,1
    dcb0:	21080c04 	addi	r4,r4,8240
    dcb4:	800b883a 	mov	r5,r16
    dcb8:	000f8140 	call	f814 <alt_dev_llist_insert>
    dcbc:	01000074 	movhi	r4,1
    dcc0:	21081804 	addi	r4,r4,8288
    dcc4:	800b883a 	mov	r5,r16
    dcc8:	000f8140 	call	f814 <alt_dev_llist_insert>
    dccc:	01000074 	movhi	r4,1
    dcd0:	21082404 	addi	r4,r4,8336
    dcd4:	800b883a 	mov	r5,r16
    dcd8:	000f8140 	call	f814 <alt_dev_llist_insert>
    ALTERA_ETH_TSE_INIT ( ENET, enet);
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER, Accelerometer);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( CAMERA_CONFIG, Camera_Config);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( ONBOARD_AV, OnBoard_AV);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    dcdc:	04400074 	movhi	r17,1
    dce0:	8c483004 	addi	r17,r17,8384
    dce4:	8809883a 	mov	r4,r17
    dce8:	000ec700 	call	ec70 <alt_up_character_lcd_init>
    dcec:	8809883a 	mov	r4,r17
    dcf0:	800b883a 	mov	r5,r16
    dcf4:	000f8140 	call	f814 <alt_dev_llist_insert>
    dcf8:	01000074 	movhi	r4,1
    dcfc:	21083b04 	addi	r4,r4,8428
    dd00:	800b883a 	mov	r5,r16
    dd04:	000f8140 	call	f814 <alt_dev_llist_insert>
    dd08:	01000074 	movhi	r4,1
    dd0c:	21084604 	addi	r4,r4,8472
    dd10:	800b883a 	mov	r5,r16
    dd14:	000f8140 	call	f814 <alt_dev_llist_insert>
    dd18:	01000074 	movhi	r4,1
    dd1c:	21085104 	addi	r4,r4,8516
    dd20:	800b883a 	mov	r5,r16
    dd24:	000f8140 	call	f814 <alt_dev_llist_insert>
    dd28:	01000074 	movhi	r4,1
    dd2c:	21085c04 	addi	r4,r4,8560
    dd30:	800b883a 	mov	r5,r16
    dd34:	000f8140 	call	f814 <alt_dev_llist_insert>
    dd38:	01000074 	movhi	r4,1
    dd3c:	21086704 	addi	r4,r4,8604
    dd40:	800b883a 	mov	r5,r16
    dd44:	000f8140 	call	f814 <alt_dev_llist_insert>
    dd48:	01000074 	movhi	r4,1
    dd4c:	21087204 	addi	r4,r4,8648
    dd50:	800b883a 	mov	r5,r16
    dd54:	000f8140 	call	f814 <alt_dev_llist_insert>
    dd58:	01000074 	movhi	r4,1
    dd5c:	21087d04 	addi	r4,r4,8692
    dd60:	800b883a 	mov	r5,r16
    dd64:	000f8140 	call	f814 <alt_dev_llist_insert>
    dd68:	01000074 	movhi	r4,1
    dd6c:	21088804 	addi	r4,r4,8736
    dd70:	800b883a 	mov	r5,r16
    dd74:	000f8140 	call	f814 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    dd78:	04400074 	movhi	r17,1
    dd7c:	8c489304 	addi	r17,r17,8780
    dd80:	8809883a 	mov	r4,r17
    dd84:	000f3740 	call	f374 <alt_up_ps2_init>
    dd88:	8809883a 	mov	r4,r17
    dd8c:	800b883a 	mov	r5,r16
    dd90:	000f8140 	call	f814 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
    dd94:	04400074 	movhi	r17,1
    dd98:	8c48a104 	addi	r17,r17,8836
    dd9c:	8809883a 	mov	r4,r17
    dda0:	000f3740 	call	f374 <alt_up_ps2_init>
    dda4:	8809883a 	mov	r4,r17
    dda8:	800b883a 	mov	r5,r16
    ddac:	000f8140 	call	f814 <alt_dev_llist_insert>
    ddb0:	01000074 	movhi	r4,1
    ddb4:	2108af04 	addi	r4,r4,8892
    ddb8:	800b883a 	mov	r5,r16
    ddbc:	000f8140 	call	f814 <alt_dev_llist_insert>
    ddc0:	01000074 	movhi	r4,1
    ddc4:	2108ba04 	addi	r4,r4,8936
    ddc8:	800b883a 	mov	r5,r16
    ddcc:	000f8140 	call	f814 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( LCD_CHAR_BUFFER, LCD_Char_Buffer);
    ddd0:	01000074 	movhi	r4,1
    ddd4:	2108c704 	addi	r4,r4,8988
    ddd8:	20800a17 	ldw	r2,40(r4)
    dddc:	1485883a 	add	r2,r2,r18
    dde0:	10c0000b 	ldhu	r3,0(r2)
    dde4:	20c00c15 	stw	r3,48(r4)
    dde8:	10800017 	ldw	r2,0(r2)
    ddec:	100ad43a 	srli	r5,r2,16
    ddf0:	21400d15 	stw	r5,52(r4)
    ddf4:	00801004 	movi	r2,64
    ddf8:	10c00436 	bltu	r2,r3,de0c <alt_sys_init+0x1f8>
    ddfc:	00800fc4 	movi	r2,63
    de00:	20800f15 	stw	r2,60(r4)
    de04:	00800184 	movi	r2,6
    de08:	20801015 	stw	r2,64(r4)
    de0c:	00800804 	movi	r2,32
    de10:	11400436 	bltu	r2,r5,de24 <alt_sys_init+0x210>
    de14:	00c007c4 	movi	r3,31
    de18:	00800074 	movhi	r2,1
    de1c:	1088c704 	addi	r2,r2,8988
    de20:	10c01115 	stw	r3,68(r2)
    de24:	04000074 	movhi	r16,1
    de28:	8408c704 	addi	r16,r16,8988
    de2c:	8009883a 	mov	r4,r16
    de30:	000f72c0 	call	f72c <alt_up_char_buffer_init>
    de34:	8009883a 	mov	r4,r16
    de38:	01400074 	movhi	r5,1
    de3c:	29491004 	addi	r5,r5,9280
    de40:	000f8140 	call	f814 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
    de44:	01000074 	movhi	r4,1
    de48:	2108d904 	addi	r4,r4,9060
    de4c:	20800a17 	ldw	r2,40(r4)
    de50:	10800104 	addi	r2,r2,4
    de54:	10c0000b 	ldhu	r3,0(r2)
    de58:	20c00c15 	stw	r3,48(r4)
    de5c:	10800017 	ldw	r2,0(r2)
    de60:	100ad43a 	srli	r5,r2,16
    de64:	21400d15 	stw	r5,52(r4)
    de68:	00801004 	movi	r2,64
    de6c:	10c00436 	bltu	r2,r3,de80 <alt_sys_init+0x26c>
    de70:	00800fc4 	movi	r2,63
    de74:	20800f15 	stw	r2,60(r4)
    de78:	00800184 	movi	r2,6
    de7c:	20801015 	stw	r2,64(r4)
    de80:	00800804 	movi	r2,32
    de84:	11400436 	bltu	r2,r5,de98 <alt_sys_init+0x284>
    de88:	00c007c4 	movi	r3,31
    de8c:	00800074 	movhi	r2,1
    de90:	1088d904 	addi	r2,r2,9060
    de94:	10c01115 	stw	r3,68(r2)
    de98:	04000074 	movhi	r16,1
    de9c:	8408d904 	addi	r16,r16,9060
    dea0:	8009883a 	mov	r4,r16
    dea4:	000f72c0 	call	f72c <alt_up_char_buffer_init>
    dea8:	04400074 	movhi	r17,1
    deac:	8c491004 	addi	r17,r17,9280
    deb0:	8009883a 	mov	r4,r16
    deb4:	880b883a 	mov	r5,r17
    deb8:	000f8140 	call	f814 <alt_dev_llist_insert>
    debc:	01000074 	movhi	r4,1
    dec0:	2108eb04 	addi	r4,r4,9132
    dec4:	880b883a 	mov	r5,r17
    dec8:	000f8140 	call	f814 <alt_dev_llist_insert>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
}
    decc:	dfc00317 	ldw	ra,12(sp)
    ded0:	dc800217 	ldw	r18,8(sp)
    ded4:	dc400117 	ldw	r17,4(sp)
    ded8:	dc000017 	ldw	r16,0(sp)
    dedc:	dec00404 	addi	sp,sp,16
    dee0:	f800283a 	ret

0000dee4 <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    dee4:	deffff04 	addi	sp,sp,-4
    dee8:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    deec:	21000017 	ldw	r4,0(r4)
    def0:	21000a04 	addi	r4,r4,40
    def4:	000e1b40 	call	e1b4 <altera_avalon_jtag_uart_ioctl>
}
    def8:	dfc00017 	ldw	ra,0(sp)
    defc:	dec00104 	addi	sp,sp,4
    df00:	f800283a 	ret

0000df04 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    df04:	deffff04 	addi	sp,sp,-4
    df08:	dfc00015 	stw	ra,0(sp)
    df0c:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    df10:	21000017 	ldw	r4,0(r4)
    df14:	21000a04 	addi	r4,r4,40
    df18:	11400217 	ldw	r5,8(r2)
    df1c:	000df7c0 	call	df7c <altera_avalon_jtag_uart_close>
}
    df20:	dfc00017 	ldw	ra,0(sp)
    df24:	dec00104 	addi	sp,sp,4
    df28:	f800283a 	ret

0000df2c <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    df2c:	deffff04 	addi	sp,sp,-4
    df30:	dfc00015 	stw	ra,0(sp)
    df34:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    df38:	21000017 	ldw	r4,0(r4)
    df3c:	21000a04 	addi	r4,r4,40
    df40:	11c00217 	ldw	r7,8(r2)
    df44:	000e3900 	call	e390 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    df48:	dfc00017 	ldw	ra,0(sp)
    df4c:	dec00104 	addi	sp,sp,4
    df50:	f800283a 	ret

0000df54 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    df54:	deffff04 	addi	sp,sp,-4
    df58:	dfc00015 	stw	ra,0(sp)
    df5c:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    df60:	21000017 	ldw	r4,0(r4)
    df64:	21000a04 	addi	r4,r4,40
    df68:	11c00217 	ldw	r7,8(r2)
    df6c:	000e2280 	call	e228 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    df70:	dfc00017 	ldw	ra,0(sp)
    df74:	dec00104 	addi	sp,sp,4
    df78:	f800283a 	ret

0000df7c <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    df7c:	21800c17 	ldw	r6,48(r4)
    df80:	2950000c 	andi	r5,r5,16384
    df84:	280b003a 	cmpeq	r5,r5,zero
    df88:	00000306 	br	df98 <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
    df8c:	2800021e 	bne	r5,zero,df98 <altera_avalon_jtag_uart_close+0x1c>
    df90:	00bffd44 	movi	r2,-11
    df94:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    df98:	20800d17 	ldw	r2,52(r4)
    df9c:	11800326 	beq	r2,r6,dfac <altera_avalon_jtag_uart_close+0x30>
    dfa0:	20c00917 	ldw	r3,36(r4)
    dfa4:	20800117 	ldw	r2,4(r4)
    dfa8:	18bff836 	bltu	r3,r2,df8c <altera_avalon_jtag_uart_close+0x10>
    dfac:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
    dfb0:	f800283a 	ret

0000dfb4 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    dfb4:	20800017 	ldw	r2,0(r4)
    dfb8:	10c00104 	addi	r3,r2,4
    dfbc:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    dfc0:	01410004 	movi	r5,1024
    dfc4:	1144703a 	and	r2,r2,r5
    dfc8:	10000526 	beq	r2,zero,dfe0 <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    dfcc:	20800817 	ldw	r2,32(r4)
    dfd0:	1144b03a 	or	r2,r2,r5
    dfd4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    dfd8:	20000915 	stw	zero,36(r4)
    dfdc:	00000606 	br	dff8 <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    dfe0:	20c00917 	ldw	r3,36(r4)
    dfe4:	00a00034 	movhi	r2,32768
    dfe8:	10bfff04 	addi	r2,r2,-4
    dfec:	10c00236 	bltu	r2,r3,dff8 <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
    dff0:	18800044 	addi	r2,r3,1
    dff4:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    dff8:	00800074 	movhi	r2,1
    dffc:	1090f404 	addi	r2,r2,17360
    e000:	10800017 	ldw	r2,0(r2)
    e004:	f800283a 	ret

0000e008 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    e008:	defffe04 	addi	sp,sp,-8
    e00c:	dfc00115 	stw	ra,4(sp)
    e010:	dc000015 	stw	r16,0(sp)
    e014:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e018:	00c00044 	movi	r3,1
    e01c:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    e020:	20800017 	ldw	r2,0(r4)
    e024:	10c00135 	stwio	r3,4(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    e028:	3009883a 	mov	r4,r6
    e02c:	800b883a 	mov	r5,r16
    e030:	01800074 	movhi	r6,1
    e034:	31b82004 	addi	r6,r6,-8064
    e038:	000d4440 	call	d444 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    e03c:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    e040:	81000204 	addi	r4,r16,8
    e044:	00800074 	movhi	r2,1
    e048:	1090f404 	addi	r2,r2,17360
    e04c:	11400017 	ldw	r5,0(r2)
    e050:	01800074 	movhi	r6,1
    e054:	31b7ed04 	addi	r6,r6,-8268
    e058:	800f883a 	mov	r7,r16
    e05c:	000f77c0 	call	f77c <alt_alarm_start>
    e060:	1000030e 	bge	r2,zero,e070 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    e064:	00a00034 	movhi	r2,32768
    e068:	10bfffc4 	addi	r2,r2,-1
    e06c:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    e070:	dfc00117 	ldw	ra,4(sp)
    e074:	dc000017 	ldw	r16,0(sp)
    e078:	dec00204 	addi	sp,sp,8
    e07c:	f800283a 	ret

0000e080 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    e080:	22000017 	ldw	r8,0(r4)
    e084:	03800104 	movi	r14,4
    e088:	4399883a 	add	r12,r8,r14
    e08c:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e090:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    e094:	5880c00c 	andi	r2,r11,768
    e098:	10004526 	beq	r2,zero,e1b0 <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    e09c:	5880400c 	andi	r2,r11,256
    e0a0:	10002126 	beq	r2,zero,e128 <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e0a4:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    e0a8:	10800044 	addi	r2,r2,1
    e0ac:	1081ffcc 	andi	r2,r2,2047
    e0b0:	20c00b17 	ldw	r3,44(r4)
    e0b4:	10c01626 	beq	r2,r3,e110 <altera_avalon_jtag_uart_irq+0x90>
    e0b8:	02a00014 	movui	r10,32768
    e0bc:	02400e04 	movi	r9,56
    e0c0:	01c00044 	movi	r7,1
    e0c4:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    e0c8:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    e0cc:	2a84703a 	and	r2,r5,r10
    e0d0:	10000d26 	beq	r2,zero,e108 <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    e0d4:	20800a17 	ldw	r2,40(r4)
    e0d8:	1105883a 	add	r2,r2,r4
    e0dc:	1245883a 	add	r2,r2,r9
    e0e0:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e0e4:	20800a17 	ldw	r2,40(r4)
    e0e8:	11c5883a 	add	r2,r2,r7
    e0ec:	1184703a 	and	r2,r2,r6
    e0f0:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e0f4:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    e0f8:	11c5883a 	add	r2,r2,r7
    e0fc:	1184703a 	and	r2,r2,r6
    e100:	20c00b17 	ldw	r3,44(r4)
    e104:	10fff01e 	bne	r2,r3,e0c8 <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    e108:	2b44703a 	and	r2,r5,r13
    e10c:	10000626 	beq	r2,zero,e128 <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e110:	20800817 	ldw	r2,32(r4)
    e114:	00ffff84 	movi	r3,-2
    e118:	10c4703a 	and	r2,r2,r3
    e11c:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    e120:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e124:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    e128:	5880800c 	andi	r2,r11,512
    e12c:	103fd826 	beq	r2,zero,e090 <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    e130:	5b44703a 	and	r2,r11,r13
    e134:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    e138:	283fd526 	beq	r5,zero,e090 <altera_avalon_jtag_uart_irq+0x10>
    e13c:	20c00d17 	ldw	r3,52(r4)
    e140:	20800c17 	ldw	r2,48(r4)
    e144:	18801126 	beq	r3,r2,e18c <altera_avalon_jtag_uart_irq+0x10c>
    e148:	02420e04 	movi	r9,2104
    e14c:	01800044 	movi	r6,1
    e150:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    e154:	20800d17 	ldw	r2,52(r4)
    e158:	1105883a 	add	r2,r2,r4
    e15c:	1245883a 	add	r2,r2,r9
    e160:	10800007 	ldb	r2,0(r2)
    e164:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e168:	20800d17 	ldw	r2,52(r4)
    e16c:	1185883a 	add	r2,r2,r6
    e170:	11c4703a 	and	r2,r2,r7
    e174:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    e178:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    e17c:	283fc426 	beq	r5,zero,e090 <altera_avalon_jtag_uart_irq+0x10>
    e180:	20c00d17 	ldw	r3,52(r4)
    e184:	20800c17 	ldw	r2,48(r4)
    e188:	18bff21e 	bne	r3,r2,e154 <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e18c:	20c00817 	ldw	r3,32(r4)
    e190:	00bfff44 	movi	r2,-3
    e194:	1886703a 	and	r3,r3,r2
    e198:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e19c:	20800017 	ldw	r2,0(r4)
    e1a0:	1385883a 	add	r2,r2,r14
    e1a4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e1a8:	60800037 	ldwio	r2,0(r12)
    e1ac:	003fb806 	br	e090 <altera_avalon_jtag_uart_irq+0x10>
    e1b0:	f800283a 	ret

0000e1b4 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    e1b4:	009a8044 	movi	r2,27137
    e1b8:	28800326 	beq	r5,r2,e1c8 <altera_avalon_jtag_uart_ioctl+0x14>
    e1bc:	009a8084 	movi	r2,27138
    e1c0:	2880171e 	bne	r5,r2,e220 <altera_avalon_jtag_uart_ioctl+0x6c>
    e1c4:	00000d06 	br	e1fc <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    e1c8:	20c00117 	ldw	r3,4(r4)
    e1cc:	00a00034 	movhi	r2,32768
    e1d0:	10bfffc4 	addi	r2,r2,-1
    e1d4:	18801226 	beq	r3,r2,e220 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    e1d8:	31800017 	ldw	r6,0(r6)
    e1dc:	30ffff84 	addi	r3,r6,-2
    e1e0:	10bfff44 	addi	r2,r2,-3
    e1e4:	10c0022e 	bgeu	r2,r3,e1f0 <altera_avalon_jtag_uart_ioctl+0x3c>
    e1e8:	01a00034 	movhi	r6,32768
    e1ec:	31bfff84 	addi	r6,r6,-2
    e1f0:	21800115 	stw	r6,4(r4)
    e1f4:	0005883a 	mov	r2,zero
    e1f8:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    e1fc:	20c00117 	ldw	r3,4(r4)
    e200:	00a00034 	movhi	r2,32768
    e204:	10bfffc4 	addi	r2,r2,-1
    e208:	18800526 	beq	r3,r2,e220 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    e20c:	20800917 	ldw	r2,36(r4)
    e210:	10c5803a 	cmpltu	r2,r2,r3
    e214:	30800015 	stw	r2,0(r6)
    e218:	0005883a 	mov	r2,zero
    e21c:	f800283a 	ret
    e220:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    e224:	f800283a 	ret

0000e228 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    e228:	defff604 	addi	sp,sp,-40
    e22c:	dfc00915 	stw	ra,36(sp)
    e230:	df000815 	stw	fp,32(sp)
    e234:	ddc00715 	stw	r23,28(sp)
    e238:	dd800615 	stw	r22,24(sp)
    e23c:	dd400515 	stw	r21,20(sp)
    e240:	dd000415 	stw	r20,16(sp)
    e244:	dcc00315 	stw	r19,12(sp)
    e248:	dc800215 	stw	r18,8(sp)
    e24c:	dc400115 	stw	r17,4(sp)
    e250:	dc000015 	stw	r16,0(sp)
    e254:	2025883a 	mov	r18,r4
    e258:	282f883a 	mov	r23,r5
    e25c:	3027883a 	mov	r19,r6
    e260:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e264:	0180220e 	bge	zero,r6,e2f0 <altera_avalon_jtag_uart_read+0xc8>
    e268:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    e26c:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
    e270:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
    e274:	b4400236 	bltu	r22,r17,e280 <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
    e278:	b461c83a 	sub	r16,r22,r17
    e27c:	00000206 	br	e288 <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    e280:	00820004 	movi	r2,2048
    e284:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
    e288:	80000d26 	beq	r16,zero,e2c0 <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
    e28c:	9829883a 	mov	r20,r19
    e290:	9c001d36 	bltu	r19,r16,e308 <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    e294:	91400e04 	addi	r5,r18,56
    e298:	a809883a 	mov	r4,r21
    e29c:	2c4b883a 	add	r5,r5,r17
    e2a0:	800d883a 	mov	r6,r16
    e2a4:	0005cb40 	call	5cb4 <memcpy>
      ptr   += n;
    e2a8:	ac2b883a 	add	r21,r21,r16
      space -= n;
    e2ac:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e2b0:	8445883a 	add	r2,r16,r17
    e2b4:	1081ffcc 	andi	r2,r2,2047
    e2b8:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
    e2bc:	04ffeb16 	blt	zero,r19,e26c <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
    e2c0:	adc01c1e 	bne	r21,r23,e334 <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    e2c4:	e090000c 	andi	r2,fp,16384
    e2c8:	10000d1e 	bne	r2,zero,e300 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    e2cc:	90800a17 	ldw	r2,40(r18)
    e2d0:	b080031e 	bne	r22,r2,e2e0 <altera_avalon_jtag_uart_read+0xb8>
    e2d4:	90c00917 	ldw	r3,36(r18)
    e2d8:	90800117 	ldw	r2,4(r18)
    e2dc:	18bffb36 	bltu	r3,r2,e2cc <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    e2e0:	90800a17 	ldw	r2,40(r18)
    e2e4:	b0800426 	beq	r22,r2,e2f8 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e2e8:	04c0030e 	bge	zero,r19,e2f8 <altera_avalon_jtag_uart_read+0xd0>
    e2ec:	003fde06 	br	e268 <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    e2f0:	3890000c 	andi	r2,r7,16384
    e2f4:	1000021e 	bne	r2,zero,e300 <altera_avalon_jtag_uart_read+0xd8>
    e2f8:	00bffec4 	movi	r2,-5
    e2fc:	00001806 	br	e360 <altera_avalon_jtag_uart_read+0x138>
    e300:	00bffd44 	movi	r2,-11
    e304:	00001606 	br	e360 <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    e308:	91400e04 	addi	r5,r18,56
    e30c:	a809883a 	mov	r4,r21
    e310:	894b883a 	add	r5,r17,r5
    e314:	980d883a 	mov	r6,r19
    e318:	0005cb40 	call	5cb4 <memcpy>
      ptr   += n;
    e31c:	aceb883a 	add	r21,r21,r19
      space -= n;
    e320:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e324:	a445883a 	add	r2,r20,r17
    e328:	1081ffcc 	andi	r2,r2,2047
    e32c:	90800b15 	stw	r2,44(r18)
    e330:	003fe306 	br	e2c0 <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e334:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e338:	00bfff84 	movi	r2,-2
    e33c:	2084703a 	and	r2,r4,r2
    e340:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e344:	90800817 	ldw	r2,32(r18)
    e348:	10800054 	ori	r2,r2,1
    e34c:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e350:	90c00017 	ldw	r3,0(r18)
    e354:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e358:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    e35c:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    e360:	dfc00917 	ldw	ra,36(sp)
    e364:	df000817 	ldw	fp,32(sp)
    e368:	ddc00717 	ldw	r23,28(sp)
    e36c:	dd800617 	ldw	r22,24(sp)
    e370:	dd400517 	ldw	r21,20(sp)
    e374:	dd000417 	ldw	r20,16(sp)
    e378:	dcc00317 	ldw	r19,12(sp)
    e37c:	dc800217 	ldw	r18,8(sp)
    e380:	dc400117 	ldw	r17,4(sp)
    e384:	dc000017 	ldw	r16,0(sp)
    e388:	dec00a04 	addi	sp,sp,40
    e38c:	f800283a 	ret

0000e390 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    e390:	defff804 	addi	sp,sp,-32
    e394:	dfc00715 	stw	ra,28(sp)
    e398:	dd800615 	stw	r22,24(sp)
    e39c:	dd400515 	stw	r21,20(sp)
    e3a0:	dd000415 	stw	r20,16(sp)
    e3a4:	dcc00315 	stw	r19,12(sp)
    e3a8:	dc800215 	stw	r18,8(sp)
    e3ac:	dc400115 	stw	r17,4(sp)
    e3b0:	dc000015 	stw	r16,0(sp)
    e3b4:	2021883a 	mov	r16,r4
    e3b8:	282d883a 	mov	r22,r5
    e3bc:	3011883a 	mov	r8,r6
    e3c0:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e3c4:	01800616 	blt	zero,r6,e3e0 <altera_avalon_jtag_uart_write+0x50>
    e3c8:	2829883a 	mov	r20,r5
    e3cc:	00002106 	br	e454 <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
    e3d0:	a585c83a 	sub	r2,r20,r22
    e3d4:	00004306 	br	e4e4 <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
    e3d8:	00bffd44 	movi	r2,-11
    e3dc:	00004106 	br	e4e4 <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e3e0:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    e3e4:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
    e3e8:	81400d17 	ldw	r5,52(r16)

      if (in < out)
    e3ec:	9140032e 	bgeu	r18,r5,e3fc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    e3f0:	2c85c83a 	sub	r2,r5,r18
    e3f4:	11bfffc4 	addi	r6,r2,-1
    e3f8:	00000606 	br	e414 <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
    e3fc:	28000326 	beq	r5,zero,e40c <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    e400:	00820004 	movi	r2,2048
    e404:	148dc83a 	sub	r6,r2,r18
    e408:	00000206 	br	e414 <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    e40c:	0081ffc4 	movi	r2,2047
    e410:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
    e414:	30002626 	beq	r6,zero,e4b0 <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
    e418:	4027883a 	mov	r19,r8
    e41c:	3023883a 	mov	r17,r6
    e420:	4180012e 	bgeu	r8,r6,e428 <altera_avalon_jtag_uart_write+0x98>
    e424:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    e428:	81020e04 	addi	r4,r16,2104
    e42c:	2489883a 	add	r4,r4,r18
    e430:	a00b883a 	mov	r5,r20
    e434:	880d883a 	mov	r6,r17
    e438:	0005cb40 	call	5cb4 <memcpy>
      ptr   += n;
    e43c:	a469883a 	add	r20,r20,r17
      count -= n;
    e440:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e444:	9445883a 	add	r2,r18,r17
    e448:	1081ffcc 	andi	r2,r2,2047
    e44c:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e450:	023fe416 	blt	zero,r8,e3e4 <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e454:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e458:	00bfff84 	movi	r2,-2
    e45c:	2084703a 	and	r2,r4,r2
    e460:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e464:	80800817 	ldw	r2,32(r16)
    e468:	10800094 	ori	r2,r2,2
    e46c:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e470:	80c00017 	ldw	r3,0(r16)
    e474:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e478:	2001703a 	wrctl	status,r4
    e47c:	00000706 	br	e49c <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    e480:	80800d17 	ldw	r2,52(r16)
    e484:	1140031e 	bne	r2,r5,e494 <altera_avalon_jtag_uart_write+0x104>
    e488:	80c00917 	ldw	r3,36(r16)
    e48c:	80800117 	ldw	r2,4(r16)
    e490:	18bffb36 	bltu	r3,r2,e480 <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    e494:	80800d17 	ldw	r2,52(r16)
    e498:	117fed1e 	bne	r2,r5,e450 <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    e49c:	b53fcc1e 	bne	r22,r20,e3d0 <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    e4a0:	a890000c 	andi	r2,r21,16384
    e4a4:	103fcc1e 	bne	r2,zero,e3d8 <altera_avalon_jtag_uart_write+0x48>
    e4a8:	00bffec4 	movi	r2,-5
    e4ac:	00000d06 	br	e4e4 <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e4b0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e4b4:	00bfff84 	movi	r2,-2
    e4b8:	2084703a 	and	r2,r4,r2
    e4bc:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e4c0:	80800817 	ldw	r2,32(r16)
    e4c4:	10800094 	ori	r2,r2,2
    e4c8:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e4cc:	80c00017 	ldw	r3,0(r16)
    e4d0:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e4d4:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    e4d8:	a890000c 	andi	r2,r21,16384
    e4dc:	103fe826 	beq	r2,zero,e480 <altera_avalon_jtag_uart_write+0xf0>
    e4e0:	003fee06 	br	e49c <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
    e4e4:	dfc00717 	ldw	ra,28(sp)
    e4e8:	dd800617 	ldw	r22,24(sp)
    e4ec:	dd400517 	ldw	r21,20(sp)
    e4f0:	dd000417 	ldw	r20,16(sp)
    e4f4:	dcc00317 	ldw	r19,12(sp)
    e4f8:	dc800217 	ldw	r18,8(sp)
    e4fc:	dc400117 	ldw	r17,4(sp)
    e500:	dc000017 	ldw	r16,0(sp)
    e504:	dec00804 	addi	sp,sp,32
    e508:	f800283a 	ret

0000e50c <alt_avalon_sgdma_register_callback>:
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
  dev->callback         = callback;
    e50c:	21400915 	stw	r5,36(r4)
  dev->callback_context = context;
    e510:	21c00a15 	stw	r7,40(r4)
  dev->chain_control    = chain_control;
    e514:	21800b15 	stw	r6,44(r4)
}
    e518:	f800283a 	ret

0000e51c <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
    e51c:	defffd04 	addi	sp,sp,-12
    e520:	dfc00215 	stw	ra,8(sp)
    e524:	dc400115 	stw	r17,4(sp)
    e528:	dc000015 	stw	r16,0(sp)
    e52c:	2021883a 	mov	r16,r4
    e530:	3023883a 	mov	r17,r6

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    e534:	00c00404 	movi	r3,16
    e538:	20800317 	ldw	r2,12(r4)
    e53c:	10c5883a 	add	r2,r2,r3
    e540:	01400074 	movhi	r5,1
    e544:	11400035 	stwio	r5,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    e548:	20800317 	ldw	r2,12(r4)
    e54c:	10c5883a 	add	r2,r2,r3
    e550:	11400035 	stwio	r5,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
    e554:	20800317 	ldw	r2,12(r4)
    e558:	10c5883a 	add	r2,r2,r3
    e55c:	10000035 	stwio	zero,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
    e560:	20c00317 	ldw	r3,12(r4)
    e564:	00803fc4 	movi	r2,255
    e568:	18800035 	stwio	r2,0(r3)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
    e56c:	d1602204 	addi	r5,gp,-32632
    e570:	000f8140 	call	f814 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
    e574:	8809883a 	mov	r4,r17
    e578:	800b883a 	mov	r5,r16
    e57c:	01800074 	movhi	r6,1
    e580:	31b9d404 	addi	r6,r6,-6320
    e584:	000d4440 	call	d444 <alt_irq_register>
#endif  
}
    e588:	dfc00217 	ldw	ra,8(sp)
    e58c:	dc400117 	ldw	r17,4(sp)
    e590:	dc000017 	ldw	r16,0(sp)
    e594:	dec00304 	addi	sp,sp,12
    e598:	f800283a 	ret

0000e59c <alt_avalon_sgdma_disable_desc_poll>:
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    e59c:	20800317 	ldw	r2,12(r4)
    e5a0:	10800404 	addi	r2,r2,16
    e5a4:	10c00037 	ldwio	r3,0(r2)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    e5a8:	013fff34 	movhi	r4,65532
    e5ac:	213fffc4 	addi	r4,r4,-1
    e5b0:	1906703a 	and	r3,r3,r4
    e5b4:	10c00035 	stwio	r3,0(r2)
  
  return;
}
    e5b8:	f800283a 	ret

0000e5bc <alt_avalon_sgdma_enable_desc_poll>:
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    e5bc:	21000317 	ldw	r4,12(r4)
    e5c0:	21000404 	addi	r4,r4,16
    e5c4:	20c00037 	ldwio	r3,0(r4)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
    e5c8:	00a00434 	movhi	r2,32784
    e5cc:	10bfffc4 	addi	r2,r2,-1
    e5d0:	1886703a 	and	r3,r3,r2
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    e5d4:	280a953a 	slli	r5,r5,20
    e5d8:	295ffc2c 	andhi	r5,r5,32752
    e5dc:	29400134 	orhi	r5,r5,4
    e5e0:	1946b03a 	or	r3,r3,r5
    e5e4:	20c00035 	stwio	r3,0(r4)
  
  return;
}
    e5e8:	f800283a 	ret

0000e5ec <alt_avalon_sgdma_stop>:
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    e5ec:	20800317 	ldw	r2,12(r4)
    e5f0:	10800404 	addi	r2,r2,16
    e5f4:	10c00037 	ldwio	r3,0(r2)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    e5f8:	013ff7c4 	movi	r4,-33
    e5fc:	1906703a 	and	r3,r3,r4
    e600:	10c00035 	stwio	r3,0(r2)
}
    e604:	f800283a 	ret

0000e608 <alt_avalon_sgdma_start>:
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    e608:	20c00317 	ldw	r3,12(r4)
    e60c:	18c00404 	addi	r3,r3,16
    e610:	18800037 	ldwio	r2,0(r3)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    e614:	10800814 	ori	r2,r2,32
    e618:	18800035 	stwio	r2,0(r3)
}
    e61c:	f800283a 	ret

0000e620 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
    e620:	200f883a 	mov	r7,r4
    e624:	21000317 	ldw	r4,12(r4)
    e628:	01800404 	movi	r6,16
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
    e62c:	20800037 	ldwio	r2,0(r4)
    e630:	1184703a 	and	r2,r2,r6
    e634:	103ffd1e 	bne	r2,zero,e62c <alt_avalon_sgdma_do_sync_transfer+0xc>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    e638:	2189883a 	add	r4,r4,r6
    e63c:	20800037 	ldwio	r2,0(r4)
    e640:	00fff7c4 	movi	r3,-33
    e644:	10c4703a 	and	r2,r2,r3
    e648:	20800035 	stwio	r2,0(r4)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
    e64c:	38c00317 	ldw	r3,12(r7)
    e650:	00803fc4 	movi	r2,255
    e654:	18800035 	stwio	r2,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
    e658:	38800317 	ldw	r2,12(r7)
    e65c:	11400835 	stwio	r5,32(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    e660:	38c00317 	ldw	r3,12(r7)
    e664:	1987883a 	add	r3,r3,r6
    e668:	18800037 	ldwio	r2,0(r3)
    e66c:	10801814 	ori	r2,r2,96
    e670:	18800035 	stwio	r2,0(r3)
    e674:	39000317 	ldw	r4,12(r7)
    e678:	00c00404 	movi	r3,16
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
    e67c:	20800037 	ldwio	r2,0(r4)
    e680:	10c4703a 	and	r2,r2,r3
    e684:	103ffd1e 	bne	r2,zero,e67c <alt_avalon_sgdma_do_sync_transfer+0x5c>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
    e688:	20c9883a 	add	r4,r4,r3
    e68c:	20800037 	ldwio	r2,0(r4)
    e690:	00fff7c4 	movi	r3,-33
    e694:	10c4703a 	and	r2,r2,r3
    e698:	20800035 	stwio	r2,0(r4)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
    e69c:	39000317 	ldw	r4,12(r7)
    e6a0:	20800037 	ldwio	r2,0(r4)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
    e6a4:	00c03fc4 	movi	r3,255
    e6a8:	20c00035 	stwio	r3,0(r4)

  return status;
}
    e6ac:	10803fcc 	andi	r2,r2,255
    e6b0:	f800283a 	ret

0000e6b4 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
    e6b4:	200d883a 	mov	r6,r4
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
    e6b8:	20800317 	ldw	r2,12(r4)
    e6bc:	10800037 	ldwio	r2,0(r2)
    e6c0:	1080040c 	andi	r2,r2,16
    e6c4:	10000226 	beq	r2,zero,e6d0 <alt_avalon_sgdma_do_async_transfer+0x1c>
    e6c8:	00bffc04 	movi	r2,-16
    e6cc:	f800283a 	ret
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    e6d0:	01c00404 	movi	r7,16
    e6d4:	20c00317 	ldw	r3,12(r4)
    e6d8:	19c7883a 	add	r3,r3,r7
    e6dc:	18800037 	ldwio	r2,0(r3)
    e6e0:	013ff7c4 	movi	r4,-33
    e6e4:	1104703a 	and	r2,r2,r4
    e6e8:	18800035 	stwio	r2,0(r3)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
    e6ec:	30c00317 	ldw	r3,12(r6)
    e6f0:	00803fc4 	movi	r2,255
    e6f4:	18800035 	stwio	r2,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
    e6f8:	30800317 	ldw	r2,12(r6)
    e6fc:	11400835 	stwio	r5,32(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
    e700:	30800917 	ldw	r2,36(r6)
    e704:	10000926 	beq	r2,zero,e72c <alt_avalon_sgdma_do_async_transfer+0x78>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    e708:	31000317 	ldw	r4,12(r6)
    e70c:	21c9883a 	add	r4,r4,r7
    e710:	20c00037 	ldwio	r3,0(r4)

    control |= (dev->chain_control                          |
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    e714:	30800b17 	ldw	r2,44(r6)
    e718:	10801814 	ori	r2,r2,96
    e71c:	1886b03a 	or	r3,r3,r2
    e720:	20c00035 	stwio	r3,0(r4)
    e724:	0005883a 	mov	r2,zero
    e728:	f800283a 	ret
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    e72c:	30800317 	ldw	r2,12(r6)
    e730:	10800404 	addi	r2,r2,16
    e734:	10c00037 	ldwio	r3,0(r2)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
    e738:	18c01814 	ori	r3,r3,96
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    e73c:	013ffbc4 	movi	r4,-17
    e740:	1906703a 	and	r3,r3,r4
    e744:	10c00035 	stwio	r3,0(r2)
    e748:	0005883a 	mov	r2,zero
  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
}
    e74c:	f800283a 	ret

0000e750 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
    e750:	defffe04 	addi	sp,sp,-8
    e754:	dfc00115 	stw	ra,4(sp)
    e758:	dc000015 	stw	r16,0(sp)
    e75c:	200b883a 	mov	r5,r4
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
    e760:	01000404 	movi	r4,16
    e764:	28c00317 	ldw	r3,12(r5)
    e768:	1907883a 	add	r3,r3,r4
    e76c:	18800037 	ldwio	r2,0(r3)
    e770:	10a00034 	orhi	r2,r2,32768
    e774:	18800035 	stwio	r2,0(r3)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    e778:	28800317 	ldw	r2,12(r5)
    e77c:	1105883a 	add	r2,r2,r4
    e780:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
    e784:	28c00917 	ldw	r3,36(r5)
    e788:	18000726 	beq	r3,zero,e7a8 <alt_avalon_sgdma_irq+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e78c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e790:	00bfff84 	movi	r2,-2
    e794:	8084703a 	and	r2,r16,r2
    e798:	1001703a 	wrctl	status,r2
    cpu_sr = alt_irq_disable_all();
    (dev->callback)(dev->callback_context);
    e79c:	29000a17 	ldw	r4,40(r5)
    e7a0:	183ee83a 	callr	r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e7a4:	8001703a 	wrctl	status,r16
    alt_irq_enable_all(cpu_sr);
  }
}
    e7a8:	dfc00117 	ldw	ra,4(sp)
    e7ac:	dc000017 	ldw	r16,0(sp)
    e7b0:	dec00204 	addi	sp,sp,8
    e7b4:	f800283a 	ret

0000e7b8 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
    e7b8:	deffff04 	addi	sp,sp,-4
    e7bc:	dfc00015 	stw	ra,0(sp)
    e7c0:	da000703 	ldbu	r8,28(sp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
    e7c4:	288007c3 	ldbu	r2,31(r5)
    e7c8:	10801fcc 	andi	r2,r2,127
    e7cc:	288007e5 	stbio	r2,31(r5)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
    e7d0:	21800005 	stb	r6,0(r4)
    e7d4:	3004d23a 	srli	r2,r6,8
    e7d8:	20800045 	stb	r2,1(r4)
    e7dc:	3004d43a 	srli	r2,r6,16
    e7e0:	20800085 	stb	r2,2(r4)
    e7e4:	300cd63a 	srli	r6,r6,24
    e7e8:	218000c5 	stb	r6,3(r4)
  desc->write_addr               = write_addr;
    e7ec:	21c00205 	stb	r7,8(r4)
    e7f0:	3804d23a 	srli	r2,r7,8
    e7f4:	20800245 	stb	r2,9(r4)
    e7f8:	3804d43a 	srli	r2,r7,16
    e7fc:	20800285 	stb	r2,10(r4)
    e800:	380ed63a 	srli	r7,r7,24
    e804:	21c002c5 	stb	r7,11(r4)
  desc->next                     = (alt_u32 *) next;
    e808:	21400405 	stb	r5,16(r4)
    e80c:	2804d23a 	srli	r2,r5,8
    e810:	20800445 	stb	r2,17(r4)
    e814:	2804d43a 	srli	r2,r5,16
    e818:	20800485 	stb	r2,18(r4)
    e81c:	280ad63a 	srli	r5,r5,24
    e820:	214004c5 	stb	r5,19(r4)
  desc->read_addr_pad            = 0x0;
    e824:	20000105 	stb	zero,4(r4)
    e828:	20000145 	stb	zero,5(r4)
    e82c:	20000185 	stb	zero,6(r4)
    e830:	200001c5 	stb	zero,7(r4)
  desc->write_addr_pad           = 0x0;
    e834:	20000305 	stb	zero,12(r4)
    e838:	20000345 	stb	zero,13(r4)
    e83c:	20000385 	stb	zero,14(r4)
    e840:	200003c5 	stb	zero,15(r4)
  desc->next_pad                 = 0x0;
    e844:	20000505 	stb	zero,20(r4)
    e848:	20000545 	stb	zero,21(r4)
    e84c:	20000585 	stb	zero,22(r4)
    e850:	200005c5 	stb	zero,23(r4)
  desc->bytes_to_transfer        = length_or_eop;
    e854:	d880010b 	ldhu	r2,4(sp)
    e858:	20800605 	stb	r2,24(r4)
    e85c:	1004d23a 	srli	r2,r2,8
    e860:	20800645 	stb	r2,25(r4)
  desc->actual_bytes_transferred = 0;
    e864:	20000705 	stb	zero,28(r4)
    e868:	20000745 	stb	zero,29(r4)
  desc->status                   = 0x0;
    e86c:	20000785 	stb	zero,30(r4)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
    e870:	d8800517 	ldw	r2,20(sp)
    e874:	20800685 	stb	r2,26(r4)
  desc->write_burst              = write_burst;
    e878:	d8800617 	ldw	r2,24(sp)
    e87c:	208006c5 	stb	r2,27(r4)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
    e880:	d8800217 	ldw	r2,8(sp)
    e884:	1005003a 	cmpeq	r2,r2,zero
    e888:	00ffe044 	movi	r3,-127
    e88c:	188fc83a 	sub	r7,r3,r2
    e890:	d8800317 	ldw	r2,12(sp)
    e894:	1004c03a 	cmpne	r2,r2,zero
    e898:	108d883a 	add	r6,r2,r2
    e89c:	d8800417 	ldw	r2,16(sp)
    e8a0:	1004c03a 	cmpne	r2,r2,zero
    e8a4:	100a90ba 	slli	r5,r2,2
    e8a8:	40803fcc 	andi	r2,r8,255
    e8ac:	1000021e 	bne	r2,zero,e8b8 <alt_avalon_sgdma_construct_descriptor_burst+0x100>
    e8b0:	0007883a 	mov	r3,zero
    e8b4:	00000206 	br	e8c0 <alt_avalon_sgdma_construct_descriptor_burst+0x108>
    e8b8:	408003cc 	andi	r2,r8,15
    e8bc:	100690fa 	slli	r3,r2,3
    e8c0:	3144b03a 	or	r2,r6,r5
    e8c4:	38c6b03a 	or	r3,r7,r3
    e8c8:	10c4b03a 	or	r2,r2,r3
    e8cc:	208007c5 	stb	r2,31(r4)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to
   */
  alt_remap_uncached(desc, sizeof(alt_sgdma_descriptor));
    e8d0:	01400804 	movi	r5,32
    e8d4:	000fb380 	call	fb38 <alt_remap_uncached>
}
    e8d8:	dfc00017 	ldw	ra,0(sp)
    e8dc:	dec00104 	addi	sp,sp,4
    e8e0:	f800283a 	ret

0000e8e4 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
    e8e4:	defff804 	addi	sp,sp,-32
    e8e8:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
    e8ec:	d880080b 	ldhu	r2,32(sp)
    e8f0:	d8800015 	stw	r2,0(sp)
    e8f4:	d8800917 	ldw	r2,36(sp)
    e8f8:	d8800115 	stw	r2,4(sp)
    e8fc:	d8800a17 	ldw	r2,40(sp)
    e900:	d8800215 	stw	r2,8(sp)
    e904:	d8800b17 	ldw	r2,44(sp)
    e908:	d8800315 	stw	r2,12(sp)
    e90c:	d8000415 	stw	zero,16(sp)
    e910:	d8000515 	stw	zero,20(sp)
    e914:	d8800c03 	ldbu	r2,48(sp)
    e918:	d8800615 	stw	r2,24(sp)
    e91c:	000e7b80 	call	e7b8 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
    e920:	dfc00717 	ldw	ra,28(sp)
    e924:	dec00804 	addi	sp,sp,32
    e928:	f800283a 	ret

0000e92c <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
    e92c:	defff804 	addi	sp,sp,-32
    e930:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
    e934:	39ffffcc 	andi	r7,r7,65535
    e938:	d9c00015 	stw	r7,0(sp)
    e93c:	d8800a17 	ldw	r2,40(sp)
    e940:	d8800115 	stw	r2,4(sp)
    e944:	d8800817 	ldw	r2,32(sp)
    e948:	d8800215 	stw	r2,8(sp)
    e94c:	d8800917 	ldw	r2,36(sp)
    e950:	d8800315 	stw	r2,12(sp)
    e954:	d8800b17 	ldw	r2,44(sp)
    e958:	d8800415 	stw	r2,16(sp)
    e95c:	d8000515 	stw	zero,20(sp)
    e960:	d8800c03 	ldbu	r2,48(sp)
    e964:	d8800615 	stw	r2,24(sp)
    e968:	000f883a 	mov	r7,zero
    e96c:	000e7b80 	call	e7b8 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
    e970:	dfc00717 	ldw	ra,28(sp)
    e974:	dec00804 	addi	sp,sp,32
    e978:	f800283a 	ret

0000e97c <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
    e97c:	defffa04 	addi	sp,sp,-24
    e980:	dfc00515 	stw	ra,20(sp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
    e984:	d8800617 	ldw	r2,24(sp)
    e988:	d8800015 	stw	r2,0(sp)
    e98c:	d8800717 	ldw	r2,28(sp)
    e990:	d8800115 	stw	r2,4(sp)
    e994:	d8800817 	ldw	r2,32(sp)
    e998:	d8800215 	stw	r2,8(sp)
    e99c:	d8000315 	stw	zero,12(sp)
    e9a0:	d8800903 	ldbu	r2,36(sp)
    e9a4:	d8800415 	stw	r2,16(sp)
    e9a8:	39ffffcc 	andi	r7,r7,65535
    e9ac:	000e92c0 	call	e92c <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
    e9b0:	dfc00517 	ldw	ra,20(sp)
    e9b4:	dec00604 	addi	sp,sp,24
    e9b8:	f800283a 	ret

0000e9bc <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
    e9bc:	defff804 	addi	sp,sp,-32
    e9c0:	dfc00715 	stw	ra,28(sp)
    e9c4:	3007883a 	mov	r3,r6
  alt_avalon_sgdma_construct_descriptor_burst(
    e9c8:	39ffffcc 	andi	r7,r7,65535
    e9cc:	d9c00015 	stw	r7,0(sp)
    e9d0:	d8000115 	stw	zero,4(sp)
    e9d4:	d8000215 	stw	zero,8(sp)
    e9d8:	d8800817 	ldw	r2,32(sp)
    e9dc:	d8800315 	stw	r2,12(sp)
    e9e0:	d8000415 	stw	zero,16(sp)
    e9e4:	d8800917 	ldw	r2,36(sp)
    e9e8:	d8800515 	stw	r2,20(sp)
    e9ec:	d8000615 	stw	zero,24(sp)
    e9f0:	000d883a 	mov	r6,zero
    e9f4:	180f883a 	mov	r7,r3
    e9f8:	000e7b80 	call	e7b8 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
    e9fc:	dfc00717 	ldw	ra,28(sp)
    ea00:	dec00804 	addi	sp,sp,32
    ea04:	f800283a 	ret

0000ea08 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
    ea08:	defffd04 	addi	sp,sp,-12
    ea0c:	dfc00215 	stw	ra,8(sp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
    ea10:	d8800317 	ldw	r2,12(sp)
    ea14:	d8800015 	stw	r2,0(sp)
    ea18:	d8000115 	stw	zero,4(sp)
    ea1c:	39ffffcc 	andi	r7,r7,65535
    ea20:	000e9bc0 	call	e9bc <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
    ea24:	dfc00217 	ldw	ra,8(sp)
    ea28:	dec00304 	addi	sp,sp,12
    ea2c:	f800283a 	ret

0000ea30 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
    ea30:	defff804 	addi	sp,sp,-32
    ea34:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
    ea38:	d880080b 	ldhu	r2,32(sp)
    ea3c:	d8800015 	stw	r2,0(sp)
    ea40:	d8000115 	stw	zero,4(sp)
    ea44:	d8800917 	ldw	r2,36(sp)
    ea48:	d8800215 	stw	r2,8(sp)
    ea4c:	d8800a17 	ldw	r2,40(sp)
    ea50:	d8800315 	stw	r2,12(sp)
    ea54:	d8800b17 	ldw	r2,44(sp)
    ea58:	d8800415 	stw	r2,16(sp)
    ea5c:	d8800c17 	ldw	r2,48(sp)
    ea60:	d8800515 	stw	r2,20(sp)
    ea64:	d8000615 	stw	zero,24(sp)
    ea68:	000e7b80 	call	e7b8 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
    ea6c:	dfc00717 	ldw	ra,28(sp)
    ea70:	dec00804 	addi	sp,sp,32
    ea74:	f800283a 	ret

0000ea78 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
    ea78:	defffa04 	addi	sp,sp,-24
    ea7c:	dfc00515 	stw	ra,20(sp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
    ea80:	d880060b 	ldhu	r2,24(sp)
    ea84:	d8800015 	stw	r2,0(sp)
    ea88:	d8800717 	ldw	r2,28(sp)
    ea8c:	d8800115 	stw	r2,4(sp)
    ea90:	d8800817 	ldw	r2,32(sp)
    ea94:	d8800215 	stw	r2,8(sp)
    ea98:	d8000315 	stw	zero,12(sp)
    ea9c:	d8000415 	stw	zero,16(sp)
    eaa0:	000ea300 	call	ea30 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
    eaa4:	dfc00517 	ldw	ra,20(sp)
    eaa8:	dec00604 	addi	sp,sp,24
    eaac:	f800283a 	ret

0000eab0 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
    eab0:	defffe04 	addi	sp,sp,-8
    eab4:	dfc00115 	stw	ra,4(sp)
    eab8:	dc000015 	stw	r16,0(sp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
    eabc:	d1602204 	addi	r5,gp,-32632
    eac0:	000f8840 	call	f884 <alt_find_dev>
    eac4:	1021883a 	mov	r16,r2

  if (NULL == dev) {
    eac8:	10000b1e 	bne	r2,zero,eaf8 <alt_avalon_sgdma_open+0x48>
    eacc:	00800074 	movhi	r2,1
    ead0:	10891304 	addi	r2,r2,9292
    ead4:	10800017 	ldw	r2,0(r2)
    ead8:	1000031e 	bne	r2,zero,eae8 <alt_avalon_sgdma_open+0x38>
    eadc:	00c00074 	movhi	r3,1
    eae0:	18d0e504 	addi	r3,r3,17300
    eae4:	00000206 	br	eaf0 <alt_avalon_sgdma_open+0x40>
    eae8:	103ee83a 	callr	r2
    eaec:	1007883a 	mov	r3,r2
    ALT_ERRNO = ENODEV;
    eaf0:	008004c4 	movi	r2,19
    eaf4:	18800015 	stw	r2,0(r3)
  }

  return dev;
}
    eaf8:	8005883a 	mov	r2,r16
    eafc:	dfc00117 	ldw	ra,4(sp)
    eb00:	dc000017 	ldw	r16,0(sp)
    eb04:	dec00204 	addi	sp,sp,8
    eb08:	f800283a 	ret

0000eb0c <alt_avalon_sgdma_check_descriptor_status>:
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
    eb0c:	208007a3 	ldbuio	r2,30(r4)
    eb10:	10801fcc 	andi	r2,r2,127
    eb14:	10000226 	beq	r2,zero,eb20 <alt_avalon_sgdma_check_descriptor_status+0x14>
    eb18:	00bffec4 	movi	r2,-5
    eb1c:	f800283a 	ret
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
  }

  if( IORD_8DIRECT(&desc->control, 0) &
    eb20:	208007e3 	ldbuio	r2,31(r4)
    eb24:	1080200c 	andi	r2,r2,128
    eb28:	10000226 	beq	r2,zero,eb34 <alt_avalon_sgdma_check_descriptor_status+0x28>
    eb2c:	00bfe244 	movi	r2,-119
    eb30:	f800283a 	ret
    eb34:	0005883a 	mov	r2,zero
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
  }

    return 0;
}
    eb38:	f800283a 	ret

0000eb3c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    eb3c:	deffff04 	addi	sp,sp,-4
    eb40:	dfc00015 	stw	ra,0(sp)
    eb44:	200b883a 	mov	r5,r4
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    eb48:	00c00074 	movhi	r3,1
    eb4c:	18d0f404 	addi	r3,r3,17360
    eb50:	18800017 	ldw	r2,0(r3)
    eb54:	1000011e 	bne	r2,zero,eb5c <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    eb58:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    eb5c:	008001c4 	movi	r2,7
    eb60:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    eb64:	3009883a 	mov	r4,r6
    eb68:	01800074 	movhi	r6,1
    eb6c:	31bae004 	addi	r6,r6,-5248
    eb70:	000d4440 	call	d444 <alt_irq_register>
#endif  
}
    eb74:	dfc00017 	ldw	ra,0(sp)
    eb78:	dec00104 	addi	sp,sp,4
    eb7c:	f800283a 	ret

0000eb80 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    eb80:	defffe04 	addi	sp,sp,-8
    eb84:	dfc00115 	stw	ra,4(sp)
    eb88:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    eb8c:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    eb90:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eb94:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eb98:	00bfff84 	movi	r2,-2
    eb9c:	8084703a 	and	r2,r16,r2
    eba0:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    eba4:	000da540 	call	da54 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eba8:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    ebac:	dfc00117 	ldw	ra,4(sp)
    ebb0:	dc000017 	ldw	r16,0(sp)
    ebb4:	dec00204 	addi	sp,sp,8
    ebb8:	f800283a 	ret

0000ebbc <get_DDRAM_addr>:
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
    ebbc:	2800021e 	bne	r5,zero,ebc8 <get_DDRAM_addr+0xc>
	{
		addr |= x_pos;
    ebc0:	2005883a 	mov	r2,r4
    ebc4:	00000106 	br	ebcc <get_DDRAM_addr+0x10>
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
    ebc8:	20801014 	ori	r2,r4,64
    ebcc:	10803fcc 	andi	r2,r2,255
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
}
    ebd0:	10802014 	ori	r2,r2,128
    ebd4:	f800283a 	ret

0000ebd8 <alt_up_character_lcd_string>:
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    ebd8:	28c00003 	ldbu	r3,0(r5)
    ebdc:	18803fcc 	andi	r2,r3,255
    ebe0:	1080201c 	xori	r2,r2,128
    ebe4:	10bfe004 	addi	r2,r2,-128
    ebe8:	10000d26 	beq	r2,zero,ec20 <alt_up_character_lcd_string+0x48>
    ebec:	01800044 	movi	r6,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    ebf0:	20800a17 	ldw	r2,40(r4)
    ebf4:	1185883a 	add	r2,r2,r6
    ebf8:	18c03fcc 	andi	r3,r3,255
    ebfc:	18c0201c 	xori	r3,r3,128
    ec00:	18ffe004 	addi	r3,r3,-128
    ec04:	10c00025 	stbio	r3,0(r2)
		++ptr;
    ec08:	298b883a 	add	r5,r5,r6
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    ec0c:	28c00003 	ldbu	r3,0(r5)
    ec10:	18803fcc 	andi	r2,r3,255
    ec14:	1080201c 	xori	r2,r2,128
    ec18:	10bfe004 	addi	r2,r2,-128
    ec1c:	103ff41e 	bne	r2,zero,ebf0 <alt_up_character_lcd_string+0x18>
    ec20:	f800283a 	ret

0000ec24 <alt_up_character_lcd_write>:
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    ec24:	30000926 	beq	r6,zero,ec4c <alt_up_character_lcd_write+0x28>
    ec28:	000f883a 	mov	r7,zero
    ec2c:	02000044 	movi	r8,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    ec30:	20800a17 	ldw	r2,40(r4)
    ec34:	1205883a 	add	r2,r2,r8
    ec38:	3947883a 	add	r3,r7,r5
    ec3c:	18c00007 	ldb	r3,0(r3)
    ec40:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    ec44:	3a0f883a 	add	r7,r7,r8
    ec48:	31fff91e 	bne	r6,r7,ec30 <alt_up_character_lcd_write+0xc>
    ec4c:	f800283a 	ret

0000ec50 <alt_up_character_lcd_write_fd>:
	}
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    ec50:	deffff04 	addi	sp,sp,-4
    ec54:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    ec58:	21000017 	ldw	r4,0(r4)
    ec5c:	000ec240 	call	ec24 <alt_up_character_lcd_write>
	return 0;
}
    ec60:	0005883a 	mov	r2,zero
    ec64:	dfc00017 	ldw	ra,0(sp)
    ec68:	dec00104 	addi	sp,sp,4
    ec6c:	f800283a 	ret

0000ec70 <alt_up_character_lcd_init>:
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    ec70:	20c00a17 	ldw	r3,40(r4)
    ec74:	00800044 	movi	r2,1
    ec78:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    ec7c:	f800283a 	ret

0000ec80 <alt_up_character_lcd_send_cmd>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    ec80:	20800a17 	ldw	r2,40(r4)
    ec84:	29403fcc 	andi	r5,r5,255
    ec88:	11400025 	stbio	r5,0(r2)
}
    ec8c:	f800283a 	ret

0000ec90 <alt_up_character_lcd_cursor_blink_on>:
{
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
}

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    ec90:	deffff04 	addi	sp,sp,-4
    ec94:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    ec98:	014003c4 	movi	r5,15
    ec9c:	000ec800 	call	ec80 <alt_up_character_lcd_send_cmd>
}
    eca0:	dfc00017 	ldw	ra,0(sp)
    eca4:	dec00104 	addi	sp,sp,4
    eca8:	f800283a 	ret

0000ecac <alt_up_character_lcd_cursor_off>:
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	return 0;
}

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    ecac:	deffff04 	addi	sp,sp,-4
    ecb0:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    ecb4:	01400304 	movi	r5,12
    ecb8:	000ec800 	call	ec80 <alt_up_character_lcd_send_cmd>
}
    ecbc:	dfc00017 	ldw	ra,0(sp)
    ecc0:	dec00104 	addi	sp,sp,4
    ecc4:	f800283a 	ret

0000ecc8 <alt_up_character_lcd_erase_pos>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    ecc8:	defffd04 	addi	sp,sp,-12
    eccc:	dfc00215 	stw	ra,8(sp)
    ecd0:	dc400115 	stw	r17,4(sp)
    ecd4:	dc000015 	stw	r16,0(sp)
    ecd8:	2021883a 	mov	r16,r4
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    ecdc:	008009c4 	movi	r2,39
    ece0:	11400e36 	bltu	r2,r5,ed1c <alt_up_character_lcd_erase_pos+0x54>
    ece4:	04400044 	movi	r17,1
    ece8:	89800c36 	bltu	r17,r6,ed1c <alt_up_character_lcd_erase_pos+0x54>
		return -1;

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    ecec:	2809883a 	mov	r4,r5
    ecf0:	300b883a 	mov	r5,r6
    ecf4:	000ebbc0 	call	ebbc <get_DDRAM_addr>
    ecf8:	8009883a 	mov	r4,r16
    ecfc:	11403fcc 	andi	r5,r2,255
    ed00:	000ec800 	call	ec80 <alt_up_character_lcd_send_cmd>
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    ed04:	80800a17 	ldw	r2,40(r16)
    ed08:	1445883a 	add	r2,r2,r17
    ed0c:	00c00084 	movi	r3,2
    ed10:	10c00025 	stbio	r3,0(r2)
    ed14:	0005883a 	mov	r2,zero
    ed18:	00000106 	br	ed20 <alt_up_character_lcd_erase_pos+0x58>
	return 0;
    ed1c:	00bfffc4 	movi	r2,-1
}
    ed20:	dfc00217 	ldw	ra,8(sp)
    ed24:	dc400117 	ldw	r17,4(sp)
    ed28:	dc000017 	ldw	r16,0(sp)
    ed2c:	dec00304 	addi	sp,sp,12
    ed30:	f800283a 	ret

0000ed34 <alt_up_character_lcd_shift_display>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    ed34:	defffa04 	addi	sp,sp,-24
    ed38:	dfc00515 	stw	ra,20(sp)
    ed3c:	dd000415 	stw	r20,16(sp)
    ed40:	dcc00315 	stw	r19,12(sp)
    ed44:	dc800215 	stw	r18,8(sp)
    ed48:	dc400115 	stw	r17,4(sp)
    ed4c:	dc000015 	stw	r16,0(sp)
    ed50:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
    ed54:	28001326 	beq	r5,zero,eda4 <alt_up_character_lcd_shift_display+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    ed58:	0140020e 	bge	zero,r5,ed64 <alt_up_character_lcd_shift_display+0x30>
    ed5c:	05000704 	movi	r20,28
    ed60:	00000106 	br	ed68 <alt_up_character_lcd_shift_display+0x34>
    ed64:	05000604 	movi	r20,24
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    ed68:	2800010e 	bge	r5,zero,ed70 <alt_up_character_lcd_shift_display+0x3c>
    ed6c:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
    ed70:	00bfffc4 	movi	r2,-1
    ed74:	28a1883a 	add	r16,r5,r2
    ed78:	80c03fcc 	andi	r3,r16,255
    ed7c:	10803fcc 	andi	r2,r2,255
    ed80:	18800826 	beq	r3,r2,eda4 <alt_up_character_lcd_shift_display+0x70>
    ed84:	04bfffc4 	movi	r18,-1
    ed88:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    ed8c:	9809883a 	mov	r4,r19
    ed90:	a1403fcc 	andi	r5,r20,255
    ed94:	000ec800 	call	ec80 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    ed98:	84a1883a 	add	r16,r16,r18
    ed9c:	80803fcc 	andi	r2,r16,255
    eda0:	147ffa1e 	bne	r2,r17,ed8c <alt_up_character_lcd_shift_display+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    eda4:	dfc00517 	ldw	ra,20(sp)
    eda8:	dd000417 	ldw	r20,16(sp)
    edac:	dcc00317 	ldw	r19,12(sp)
    edb0:	dc800217 	ldw	r18,8(sp)
    edb4:	dc400117 	ldw	r17,4(sp)
    edb8:	dc000017 	ldw	r16,0(sp)
    edbc:	dec00604 	addi	sp,sp,24
    edc0:	f800283a 	ret

0000edc4 <alt_up_character_lcd_shift_cursor>:
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
}

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    edc4:	defffa04 	addi	sp,sp,-24
    edc8:	dfc00515 	stw	ra,20(sp)
    edcc:	dd000415 	stw	r20,16(sp)
    edd0:	dcc00315 	stw	r19,12(sp)
    edd4:	dc800215 	stw	r18,8(sp)
    edd8:	dc400115 	stw	r17,4(sp)
    eddc:	dc000015 	stw	r16,0(sp)
    ede0:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
    ede4:	28001326 	beq	r5,zero,ee34 <alt_up_character_lcd_shift_cursor+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    ede8:	0140020e 	bge	zero,r5,edf4 <alt_up_character_lcd_shift_cursor+0x30>
    edec:	05000504 	movi	r20,20
    edf0:	00000106 	br	edf8 <alt_up_character_lcd_shift_cursor+0x34>
    edf4:	05000404 	movi	r20,16
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    edf8:	2800010e 	bge	r5,zero,ee00 <alt_up_character_lcd_shift_cursor+0x3c>
    edfc:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
    ee00:	00bfffc4 	movi	r2,-1
    ee04:	28a1883a 	add	r16,r5,r2
    ee08:	80c03fcc 	andi	r3,r16,255
    ee0c:	10803fcc 	andi	r2,r2,255
    ee10:	18800826 	beq	r3,r2,ee34 <alt_up_character_lcd_shift_cursor+0x70>
    ee14:	04bfffc4 	movi	r18,-1
    ee18:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    ee1c:	9809883a 	mov	r4,r19
    ee20:	a1403fcc 	andi	r5,r20,255
    ee24:	000ec800 	call	ec80 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    ee28:	84a1883a 	add	r16,r16,r18
    ee2c:	80803fcc 	andi	r2,r16,255
    ee30:	147ffa1e 	bne	r2,r17,ee1c <alt_up_character_lcd_shift_cursor+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    ee34:	dfc00517 	ldw	ra,20(sp)
    ee38:	dd000417 	ldw	r20,16(sp)
    ee3c:	dcc00317 	ldw	r19,12(sp)
    ee40:	dc800217 	ldw	r18,8(sp)
    ee44:	dc400117 	ldw	r17,4(sp)
    ee48:	dc000017 	ldw	r16,0(sp)
    ee4c:	dec00604 	addi	sp,sp,24
    ee50:	f800283a 	ret

0000ee54 <alt_up_character_lcd_set_cursor_pos>:
	return 0;
}

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    ee54:	defffe04 	addi	sp,sp,-8
    ee58:	dfc00115 	stw	ra,4(sp)
    ee5c:	dc000015 	stw	r16,0(sp)
    ee60:	2021883a 	mov	r16,r4
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    ee64:	008009c4 	movi	r2,39
    ee68:	11400a36 	bltu	r2,r5,ee94 <alt_up_character_lcd_set_cursor_pos+0x40>
    ee6c:	00800044 	movi	r2,1
    ee70:	11800836 	bltu	r2,r6,ee94 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    ee74:	2809883a 	mov	r4,r5
    ee78:	300b883a 	mov	r5,r6
    ee7c:	000ebbc0 	call	ebbc <get_DDRAM_addr>
    ee80:	8009883a 	mov	r4,r16
    ee84:	11403fcc 	andi	r5,r2,255
    ee88:	000ec800 	call	ec80 <alt_up_character_lcd_send_cmd>
    ee8c:	0005883a 	mov	r2,zero
    ee90:	00000106 	br	ee98 <alt_up_character_lcd_set_cursor_pos+0x44>
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
    ee94:	00bfffc4 	movi	r2,-1
}
    ee98:	dfc00117 	ldw	ra,4(sp)
    ee9c:	dc000017 	ldw	r16,0(sp)
    eea0:	dec00204 	addi	sp,sp,8
    eea4:	f800283a 	ret

0000eea8 <alt_up_character_lcd_open_dev>:
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    eea8:	deffff04 	addi	sp,sp,-4
    eeac:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    eeb0:	01400074 	movhi	r5,1
    eeb4:	29491004 	addi	r5,r5,9280
    eeb8:	000f8840 	call	f884 <alt_find_dev>

  return dev;
}
    eebc:	dfc00017 	ldw	ra,0(sp)
    eec0:	dec00104 	addi	sp,sp,4
    eec4:	f800283a 	ret

0000eec8 <alt_up_irda_check_parity>:
}

int alt_up_irda_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
    eec8:	200495ba 	slli	r2,r4,22
}
    eecc:	1005d7fa 	srai	r2,r2,31
    eed0:	f800283a 	ret

0000eed4 <alt_up_irda_open_dev>:
	}
	return count;
}

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    eed4:	deffff04 	addi	sp,sp,-4
    eed8:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    eedc:	01400074 	movhi	r5,1
    eee0:	29491004 	addi	r5,r5,9280
    eee4:	000f8840 	call	f884 <alt_find_dev>

  return dev;
}
    eee8:	dfc00017 	ldw	ra,0(sp)
    eeec:	dec00104 	addi	sp,sp,4
    eef0:	f800283a 	ret

0000eef4 <alt_up_irda_read_data>:
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
	return 0;
}

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    eef4:	defffd04 	addi	sp,sp,-12
    eef8:	dfc00215 	stw	ra,8(sp)
    eefc:	dc400115 	stw	r17,4(sp)
    ef00:	dc000015 	stw	r16,0(sp)
    ef04:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    ef08:	20800a17 	ldw	r2,40(r4)
    ef0c:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    ef10:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_irda_check_parity(data_reg);
    ef14:	8009883a 	mov	r4,r16
    ef18:	000eec80 	call	eec8 <alt_up_irda_check_parity>
    ef1c:	88800005 	stb	r2,0(r17)
    ef20:	8420000c 	andi	r16,r16,32768
    ef24:	8020d3fa 	srli	r16,r16,15
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
}
    ef28:	80bfffc4 	addi	r2,r16,-1
    ef2c:	dfc00217 	ldw	ra,8(sp)
    ef30:	dc400117 	ldw	r17,4(sp)
    ef34:	dc000017 	ldw	r16,0(sp)
    ef38:	dec00304 	addi	sp,sp,12
    ef3c:	f800283a 	ret

0000ef40 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    ef40:	defff904 	addi	sp,sp,-28
    ef44:	dfc00615 	stw	ra,24(sp)
    ef48:	dd000515 	stw	r20,20(sp)
    ef4c:	dcc00415 	stw	r19,16(sp)
    ef50:	dc800315 	stw	r18,12(sp)
    ef54:	dc400215 	stw	r17,8(sp)
    ef58:	dc000115 	stw	r16,4(sp)
    ef5c:	2821883a 	mov	r16,r5
    ef60:	3029883a 	mov	r20,r6
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    ef64:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    ef68:	3000021e 	bne	r6,zero,ef74 <alt_up_irda_read_fd+0x34>
    ef6c:	0025883a 	mov	r18,zero
    ef70:	00000a06 	br	ef9c <alt_up_irda_read_fd+0x5c>
    ef74:	0025883a 	mov	r18,zero
    ef78:	04400044 	movi	r17,1
    ef7c:	800b883a 	mov	r5,r16
	{
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
    ef80:	8461883a 	add	r16,r16,r17
    ef84:	9809883a 	mov	r4,r19
    ef88:	d80d883a 	mov	r6,sp
    ef8c:	000eef40 	call	eef4 <alt_up_irda_read_data>
    ef90:	1000021e 	bne	r2,zero,ef9c <alt_up_irda_read_fd+0x5c>
			count++;
    ef94:	9465883a 	add	r18,r18,r17
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    ef98:	a4bff81e 	bne	r20,r18,ef7c <alt_up_irda_read_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
    ef9c:	9005883a 	mov	r2,r18
    efa0:	dfc00617 	ldw	ra,24(sp)
    efa4:	dd000517 	ldw	r20,20(sp)
    efa8:	dcc00417 	ldw	r19,16(sp)
    efac:	dc800317 	ldw	r18,12(sp)
    efb0:	dc400217 	ldw	r17,8(sp)
    efb4:	dc000117 	ldw	r16,4(sp)
    efb8:	dec00704 	addi	sp,sp,28
    efbc:	f800283a 	ret

0000efc0 <alt_up_irda_get_available_space_in_write_FIFO>:
}

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    efc0:	20800a17 	ldw	r2,40(r4)
    efc4:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
}
    efc8:	1004d43a 	srli	r2,r2,16
    efcc:	f800283a 	ret

0000efd0 <alt_up_irda_write_data>:
}

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    efd0:	20800a17 	ldw	r2,40(r4)
    efd4:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    efd8:	29403fcc 	andi	r5,r5,255
    efdc:	11400035 	stwio	r5,0(r2)
	return 0;
}
    efe0:	0005883a 	mov	r2,zero
    efe4:	f800283a 	ret

0000efe8 <alt_up_irda_write_fd>:
	}
	return count;
}

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    efe8:	defffa04 	addi	sp,sp,-24
    efec:	dfc00515 	stw	ra,20(sp)
    eff0:	dd000415 	stw	r20,16(sp)
    eff4:	dcc00315 	stw	r19,12(sp)
    eff8:	dc800215 	stw	r18,8(sp)
    effc:	dc400115 	stw	r17,4(sp)
    f000:	dc000015 	stw	r16,0(sp)
    f004:	3029883a 	mov	r20,r6
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    f008:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	while(len--)
    f00c:	3000021e 	bne	r6,zero,f018 <alt_up_irda_write_fd+0x30>
    f010:	0025883a 	mov	r18,zero
    f014:	00000a06 	br	f040 <alt_up_irda_write_fd+0x58>
    f018:	2821883a 	mov	r16,r5
    f01c:	0025883a 	mov	r18,zero
    f020:	04400044 	movi	r17,1
	{
		if (alt_up_irda_write_data(irda, ptr++)==0)
    f024:	9809883a 	mov	r4,r19
    f028:	81403fcc 	andi	r5,r16,255
    f02c:	000efd00 	call	efd0 <alt_up_irda_write_data>
    f030:	1000031e 	bne	r2,zero,f040 <alt_up_irda_write_fd+0x58>
			count++;
    f034:	9465883a 	add	r18,r18,r17
    f038:	8c21883a 	add	r16,r17,r16

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    f03c:	a4bff91e 	bne	r20,r18,f024 <alt_up_irda_write_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
    f040:	9005883a 	mov	r2,r18
    f044:	dfc00517 	ldw	ra,20(sp)
    f048:	dd000417 	ldw	r20,16(sp)
    f04c:	dcc00317 	ldw	r19,12(sp)
    f050:	dc800217 	ldw	r18,8(sp)
    f054:	dc400117 	ldw	r17,4(sp)
    f058:	dc000017 	ldw	r16,0(sp)
    f05c:	dec00604 	addi	sp,sp,24
    f060:	f800283a 	ret

0000f064 <alt_up_irda_disable_read_interrupt>:
}

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    f064:	20800a17 	ldw	r2,40(r4)
    f068:	10800104 	addi	r2,r2,4
    f06c:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    f070:	013fff84 	movi	r4,-2
    f074:	1906703a 	and	r3,r3,r4
    f078:	10c00035 	stwio	r3,0(r2)
}
    f07c:	f800283a 	ret

0000f080 <alt_up_irda_enable_read_interrupt>:


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    f080:	20c00a17 	ldw	r3,40(r4)
    f084:	18c00104 	addi	r3,r3,4
    f088:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    f08c:	10800054 	ori	r2,r2,1
    f090:	18800035 	stwio	r2,0(r3)
}
    f094:	f800283a 	ret

0000f098 <alt_up_irda_get_used_space_in_read_FIFO>:
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    f098:	20800a17 	ldw	r2,40(r4)
    f09c:	108000ab 	ldhuio	r2,2(r2)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
}
    f0a0:	10bfffcc 	andi	r2,r2,65535
    f0a4:	f800283a 	ret

0000f0a8 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    f0a8:	2080400c 	andi	r2,r4,256
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
	return ri;
}
    f0ac:	1004c03a 	cmpne	r2,r2,zero
    f0b0:	f800283a 	ret

0000f0b4 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
	return re;
}
    f0b4:	2080004c 	andi	r2,r4,1
    f0b8:	f800283a 	ret

0000f0bc <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    f0bc:	2081000c 	andi	r2,r4,1024
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
	return re;
}
    f0c0:	1004c03a 	cmpne	r2,r2,zero
    f0c4:	f800283a 	ret

0000f0c8 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
	return ravail;
}
    f0c8:	2004d43a 	srli	r2,r4,16
    f0cc:	f800283a 	ret

0000f0d0 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    f0d0:	20a0000c 	andi	r2,r4,32768
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
	return rvalid;
}
    f0d4:	1004c03a 	cmpne	r2,r2,zero
    f0d8:	f800283a 	ret

0000f0dc <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
	return data;
}
    f0dc:	20803fcc 	andi	r2,r4,255
    f0e0:	f800283a 	ret

0000f0e4 <alt_up_ps2_open_dev>:
	}
	return count;
}

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    f0e4:	deffff04 	addi	sp,sp,-4
    f0e8:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    f0ec:	01400074 	movhi	r5,1
    f0f0:	29491004 	addi	r5,r5,9280
    f0f4:	000f8840 	call	f884 <alt_find_dev>

  return dev;
}
    f0f8:	dfc00017 	ldw	ra,0(sp)
    f0fc:	dec00104 	addi	sp,sp,4
    f100:	f800283a 	ret

0000f104 <alt_up_ps2_clear_fifo>:
	}
	return -1;
}

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    f104:	defffe04 	addi	sp,sp,-8
    f108:	dfc00115 	stw	ra,4(sp)
    f10c:	dc000015 	stw	r16,0(sp)
    f110:	24000a17 	ldw	r16,40(r4)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    f114:	81000037 	ldwio	r4,0(r16)
    f118:	000f0c80 	call	f0c8 <read_num_bytes_available>
    f11c:	10bfffcc 	andi	r2,r2,65535
    f120:	103ffc1e 	bne	r2,zero,f114 <alt_up_ps2_clear_fifo+0x10>
	} while (num > 0);
}
    f124:	dfc00117 	ldw	ra,4(sp)
    f128:	dc000017 	ldw	r16,0(sp)
    f12c:	dec00204 	addi	sp,sp,8
    f130:	f800283a 	ret

0000f134 <alt_up_ps2_read_data_byte>:
		}
	} while (1);
}

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    f134:	defffd04 	addi	sp,sp,-12
    f138:	dfc00215 	stw	ra,8(sp)
    f13c:	dc400115 	stw	r17,4(sp)
    f140:	dc000015 	stw	r16,0(sp)
    f144:	2823883a 	mov	r17,r5
	unsigned int data_reg = 0; 
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    f148:	20800a17 	ldw	r2,40(r4)
    f14c:	14000037 	ldwio	r16,0(r2)
	if (read_data_valid(data_reg))
    f150:	8009883a 	mov	r4,r16
    f154:	000f0d00 	call	f0d0 <read_data_valid>
    f158:	10803fcc 	andi	r2,r2,255
    f15c:	1000021e 	bne	r2,zero,f168 <alt_up_ps2_read_data_byte+0x34>
    f160:	00bfffc4 	movi	r2,-1
    f164:	00000406 	br	f178 <alt_up_ps2_read_data_byte+0x44>
	{
		*byte = read_data_byte(data_reg);
    f168:	8009883a 	mov	r4,r16
    f16c:	000f0dc0 	call	f0dc <read_data_byte>
    f170:	88800005 	stb	r2,0(r17)
    f174:	0005883a 	mov	r2,zero
		return 0;
	}
	return -1;
}
    f178:	dfc00217 	ldw	ra,8(sp)
    f17c:	dc400117 	ldw	r17,4(sp)
    f180:	dc000017 	ldw	r16,0(sp)
    f184:	dec00304 	addi	sp,sp,12
    f188:	f800283a 	ret

0000f18c <alt_up_ps2_read_data_byte_timeout>:
	int ack_status = alt_up_ps2_wait_for_ack(ps2);
	return ack_status;
}

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    f18c:	defffb04 	addi	sp,sp,-20
    f190:	dfc00415 	stw	ra,16(sp)
    f194:	dcc00315 	stw	r19,12(sp)
    f198:	dc800215 	stw	r18,8(sp)
    f19c:	dc400115 	stw	r17,4(sp)
    f1a0:	dc000015 	stw	r16,0(sp)
    f1a4:	2025883a 	mov	r18,r4
    f1a8:	2827883a 	mov	r19,r5
    f1ac:	0023883a 	mov	r17,zero
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    f1b0:	90800a17 	ldw	r2,40(r18)
    f1b4:	14000037 	ldwio	r16,0(r2)
		if (read_data_valid(data_reg))
    f1b8:	8009883a 	mov	r4,r16
    f1bc:	000f0d00 	call	f0d0 <read_data_valid>
    f1c0:	10803fcc 	andi	r2,r2,255
    f1c4:	10000526 	beq	r2,zero,f1dc <alt_up_ps2_read_data_byte_timeout+0x50>
		{
			*byte = read_data_byte(data_reg);
    f1c8:	8009883a 	mov	r4,r16
    f1cc:	000f0dc0 	call	f0dc <read_data_byte>
    f1d0:	98800005 	stb	r2,0(r19)
    f1d4:	0005883a 	mov	r2,zero
    f1d8:	00000506 	br	f1f0 <alt_up_ps2_read_data_byte_timeout+0x64>
int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
    f1dc:	8c400044 	addi	r17,r17,1
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    f1e0:	90800c17 	ldw	r2,48(r18)
    f1e4:	103ff226 	beq	r2,zero,f1b0 <alt_up_ps2_read_data_byte_timeout+0x24>
    f1e8:	147ff12e 	bgeu	r2,r17,f1b0 <alt_up_ps2_read_data_byte_timeout+0x24>
    f1ec:	00bfe304 	movi	r2,-116
		{
			return -ETIMEDOUT;
		}
	} while (1);
}
    f1f0:	dfc00417 	ldw	ra,16(sp)
    f1f4:	dcc00317 	ldw	r19,12(sp)
    f1f8:	dc800217 	ldw	r18,8(sp)
    f1fc:	dc400117 	ldw	r17,4(sp)
    f200:	dc000017 	ldw	r16,0(sp)
    f204:	dec00504 	addi	sp,sp,20
    f208:	f800283a 	ret

0000f20c <alt_up_ps2_read_fd>:
}

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    f20c:	deffff04 	addi	sp,sp,-4
    f210:	dfc00015 	stw	ra,0(sp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    f214:	21000017 	ldw	r4,0(r4)
	int status = 0;
	int count = 0;
	while (count < len);
    f218:	0180010e 	bge	zero,r6,f220 <alt_up_ps2_read_fd+0x14>
    f21c:	003fff06 	br	f21c <alt_up_ps2_read_fd+0x10>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    f220:	000f18c0 	call	f18c <alt_up_ps2_read_data_byte_timeout>
		if (status!=0)
			return count;
		count++;
	} 
	return count;
}
    f224:	1005003a 	cmpeq	r2,r2,zero
    f228:	dfc00017 	ldw	ra,0(sp)
    f22c:	dec00104 	addi	sp,sp,4
    f230:	f800283a 	ret

0000f234 <alt_up_ps2_wait_for_ack>:
	}
	return 0;
}

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    f234:	defffc04 	addi	sp,sp,-16
    f238:	dfc00315 	stw	ra,12(sp)
    f23c:	dc400215 	stw	r17,8(sp)
    f240:	dc000115 	stw	r16,4(sp)
    f244:	2021883a 	mov	r16,r4
	unsigned char data = 0;
    f248:	d8000005 	stb	zero,0(sp)
    f24c:	04403e84 	movi	r17,250
	unsigned char status = 0;
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    f250:	8009883a 	mov	r4,r16
    f254:	d80b883a 	mov	r5,sp
    f258:	000f18c0 	call	f18c <alt_up_ps2_read_data_byte_timeout>
    f25c:	1007883a 	mov	r3,r2
		if ( status == 0)
    f260:	10803fcc 	andi	r2,r2,255
    f264:	1000041e 	bne	r2,zero,f278 <alt_up_ps2_wait_for_ack+0x44>
		{
			if (data == PS2_ACK)
    f268:	d8800003 	ldbu	r2,0(sp)
    f26c:	147ff81e 	bne	r2,r17,f250 <alt_up_ps2_wait_for_ack+0x1c>
    f270:	0005883a 	mov	r2,zero
    f274:	00000106 	br	f27c <alt_up_ps2_wait_for_ack+0x48>
				return 0;
		}
		else 
		{
			return status;
    f278:	18803fcc 	andi	r2,r3,255
		}
	} while(1);
	return -ETIMEDOUT;
}
    f27c:	dfc00317 	ldw	ra,12(sp)
    f280:	dc400217 	ldw	r17,8(sp)
    f284:	dc000117 	ldw	r16,4(sp)
    f288:	dec00404 	addi	sp,sp,16
    f28c:	f800283a 	ret

0000f290 <alt_up_ps2_write_data_byte>:
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
}

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    f290:	deffff04 	addi	sp,sp,-4
    f294:	dfc00015 	stw	ra,0(sp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    f298:	20800a17 	ldw	r2,40(r4)
    f29c:	29403fcc 	andi	r5,r5,255
    f2a0:	11400025 	stbio	r5,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    f2a4:	20800a17 	ldw	r2,40(r4)
	if (read_CE_bit(ctrl_reg))
    f2a8:	11000137 	ldwio	r4,4(r2)
    f2ac:	000f0bc0 	call	f0bc <read_CE_bit>
    f2b0:	10803fcc 	andi	r2,r2,255
    f2b4:	10000226 	beq	r2,zero,f2c0 <alt_up_ps2_write_data_byte+0x30>
    f2b8:	00bffec4 	movi	r2,-5
    f2bc:	00000106 	br	f2c4 <alt_up_ps2_write_data_byte+0x34>
    f2c0:	0005883a 	mov	r2,zero
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
	}
	return 0;
}
    f2c4:	dfc00017 	ldw	ra,0(sp)
    f2c8:	dec00104 	addi	sp,sp,4
    f2cc:	f800283a 	ret

0000f2d0 <alt_up_ps2_write_fd>:
	} 
	return count;
}

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    f2d0:	defffb04 	addi	sp,sp,-20
    f2d4:	dfc00415 	stw	ra,16(sp)
    f2d8:	dcc00315 	stw	r19,12(sp)
    f2dc:	dc800215 	stw	r18,8(sp)
    f2e0:	dc400115 	stw	r17,4(sp)
    f2e4:	dc000015 	stw	r16,0(sp)
    f2e8:	2827883a 	mov	r19,r5
    f2ec:	3025883a 	mov	r18,r6
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    f2f0:	24400017 	ldw	r17,0(r4)
	int status = 0;
	int count = 0;
	while (count < len)
    f2f4:	01800216 	blt	zero,r6,f300 <alt_up_ps2_write_fd+0x30>
    f2f8:	0021883a 	mov	r16,zero
    f2fc:	00000806 	br	f320 <alt_up_ps2_write_fd+0x50>
    f300:	0021883a 	mov	r16,zero
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    f304:	9c05883a 	add	r2,r19,r16
    f308:	8809883a 	mov	r4,r17
    f30c:	11400003 	ldbu	r5,0(r2)
    f310:	000f2900 	call	f290 <alt_up_ps2_write_data_byte>
		if (status!=0)
    f314:	1000021e 	bne	r2,zero,f320 <alt_up_ps2_write_fd+0x50>
			return count;
		count++;
    f318:	84000044 	addi	r16,r16,1
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    f31c:	943ff91e 	bne	r18,r16,f304 <alt_up_ps2_write_fd+0x34>
		if (status!=0)
			return count;
		count++;
	}
	return count;
}
    f320:	8005883a 	mov	r2,r16
    f324:	dfc00417 	ldw	ra,16(sp)
    f328:	dcc00317 	ldw	r19,12(sp)
    f32c:	dc800217 	ldw	r18,8(sp)
    f330:	dc400117 	ldw	r17,4(sp)
    f334:	dc000017 	ldw	r16,0(sp)
    f338:	dec00504 	addi	sp,sp,20
    f33c:	f800283a 	ret

0000f340 <alt_up_ps2_write_data_byte_with_ack>:
	} while(1);
	return -ETIMEDOUT;
}

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    f340:	defffe04 	addi	sp,sp,-8
    f344:	dfc00115 	stw	ra,4(sp)
    f348:	dc000015 	stw	r16,0(sp)
    f34c:	2021883a 	mov	r16,r4
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    f350:	29403fcc 	andi	r5,r5,255
    f354:	000f2900 	call	f290 <alt_up_ps2_write_data_byte>
	if ( send_status != 0)
    f358:	1000021e 	bne	r2,zero,f364 <alt_up_ps2_write_data_byte_with_ack+0x24>
		// return on sending error
		return send_status;

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    f35c:	8009883a 	mov	r4,r16
    f360:	000f2340 	call	f234 <alt_up_ps2_wait_for_ack>
	return ack_status;
}
    f364:	dfc00117 	ldw	ra,4(sp)
    f368:	dc000017 	ldw	r16,0(sp)
    f36c:	dec00204 	addi	sp,sp,8
    f370:	f800283a 	ret

0000f374 <alt_up_ps2_init>:
}

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    f374:	defffd04 	addi	sp,sp,-12
    f378:	dfc00215 	stw	ra,8(sp)
    f37c:	dc000115 	stw	r16,4(sp)
    f380:	2021883a 	mov	r16,r4
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    f384:	01403fc4 	movi	r5,255
    f388:	000f3400 	call	f340 <alt_up_ps2_write_data_byte_with_ack>
	if (status == 0)
    f38c:	1000171e 	bne	r2,zero,f3ec <alt_up_ps2_init+0x78>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    f390:	8009883a 	mov	r4,r16
    f394:	d80b883a 	mov	r5,sp
    f398:	000f18c0 	call	f18c <alt_up_ps2_read_data_byte_timeout>
		if (status == 0 && byte == 0xAA)
    f39c:	1000131e 	bne	r2,zero,f3ec <alt_up_ps2_init+0x78>
    f3a0:	d8c00003 	ldbu	r3,0(sp)
    f3a4:	00802a84 	movi	r2,170
    f3a8:	1880101e 	bne	r3,r2,f3ec <alt_up_ps2_init+0x78>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    f3ac:	8009883a 	mov	r4,r16
    f3b0:	d80b883a 	mov	r5,sp
    f3b4:	000f18c0 	call	f18c <alt_up_ps2_read_data_byte_timeout>
    f3b8:	1007883a 	mov	r3,r2
			if (status == -ETIMEDOUT)
    f3bc:	00bfe304 	movi	r2,-116
    f3c0:	1880031e 	bne	r3,r2,f3d0 <alt_up_ps2_init+0x5c>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    f3c4:	00800044 	movi	r2,1
    f3c8:	80800d15 	stw	r2,52(r16)
    f3cc:	00000706 	br	f3ec <alt_up_ps2_init+0x78>
			}
			else if (status == 0 && byte == 0x00)
    f3d0:	1800061e 	bne	r3,zero,f3ec <alt_up_ps2_init+0x78>
    f3d4:	d8800003 	ldbu	r2,0(sp)
    f3d8:	1000041e 	bne	r2,zero,f3ec <alt_up_ps2_init+0x78>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    f3dc:	80000d15 	stw	zero,52(r16)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    f3e0:	8009883a 	mov	r4,r16
    f3e4:	01403d04 	movi	r5,244
    f3e8:	000f2900 	call	f290 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    f3ec:	dfc00217 	ldw	ra,8(sp)
    f3f0:	dc000117 	ldw	r16,4(sp)
    f3f4:	dec00304 	addi	sp,sp,12
    f3f8:	f800283a 	ret

0000f3fc <alt_up_ps2_disable_read_interrupt>:
}

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    f3fc:	20800a17 	ldw	r2,40(r4)
    f400:	10800104 	addi	r2,r2,4
    f404:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    f408:	013fff84 	movi	r4,-2
    f40c:	1906703a 	and	r3,r3,r4
    f410:	10c00035 	stwio	r3,0(r2)
}
    f414:	f800283a 	ret

0000f418 <alt_up_ps2_enable_read_interrupt>:
}

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    f418:	20c00a17 	ldw	r3,40(r4)
    f41c:	18c00104 	addi	r3,r3,4
    f420:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    f424:	10800054 	ori	r2,r2,1
    f428:	18800035 	stwio	r2,0(r3)
}
    f42c:	f800283a 	ret

0000f430 <alt_up_rs232_check_parity>:
}

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
    f430:	200495ba 	slli	r2,r4,22
}
    f434:	1005d7fa 	srai	r2,r2,31
    f438:	f800283a 	ret

0000f43c <alt_up_rs232_open_dev>:
	}
	return count;
}

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    f43c:	deffff04 	addi	sp,sp,-4
    f440:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    f444:	01400074 	movhi	r5,1
    f448:	29491004 	addi	r5,r5,9280
    f44c:	000f8840 	call	f884 <alt_find_dev>

  return dev;
}
    f450:	dfc00017 	ldw	ra,0(sp)
    f454:	dec00104 	addi	sp,sp,4
    f458:	f800283a 	ret

0000f45c <alt_up_rs232_read_data>:
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
	return 0;
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    f45c:	defffd04 	addi	sp,sp,-12
    f460:	dfc00215 	stw	ra,8(sp)
    f464:	dc400115 	stw	r17,4(sp)
    f468:	dc000015 	stw	r16,0(sp)
    f46c:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    f470:	20800a17 	ldw	r2,40(r4)
    f474:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    f478:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    f47c:	8009883a 	mov	r4,r16
    f480:	000f4300 	call	f430 <alt_up_rs232_check_parity>
    f484:	88800005 	stb	r2,0(r17)
    f488:	8420000c 	andi	r16,r16,32768
    f48c:	8020d3fa 	srli	r16,r16,15
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}
    f490:	80bfffc4 	addi	r2,r16,-1
    f494:	dfc00217 	ldw	ra,8(sp)
    f498:	dc400117 	ldw	r17,4(sp)
    f49c:	dc000017 	ldw	r16,0(sp)
    f4a0:	dec00304 	addi	sp,sp,12
    f4a4:	f800283a 	ret

0000f4a8 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    f4a8:	defff904 	addi	sp,sp,-28
    f4ac:	dfc00615 	stw	ra,24(sp)
    f4b0:	dd000515 	stw	r20,20(sp)
    f4b4:	dcc00415 	stw	r19,16(sp)
    f4b8:	dc800315 	stw	r18,12(sp)
    f4bc:	dc400215 	stw	r17,8(sp)
    f4c0:	dc000115 	stw	r16,4(sp)
    f4c4:	2821883a 	mov	r16,r5
    f4c8:	3029883a 	mov	r20,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    f4cc:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    f4d0:	3000021e 	bne	r6,zero,f4dc <alt_up_rs232_read_fd+0x34>
    f4d4:	0025883a 	mov	r18,zero
    f4d8:	00000a06 	br	f504 <alt_up_rs232_read_fd+0x5c>
    f4dc:	0025883a 	mov	r18,zero
    f4e0:	04400044 	movi	r17,1
    f4e4:	800b883a 	mov	r5,r16
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    f4e8:	8461883a 	add	r16,r16,r17
    f4ec:	9809883a 	mov	r4,r19
    f4f0:	d80d883a 	mov	r6,sp
    f4f4:	000f45c0 	call	f45c <alt_up_rs232_read_data>
    f4f8:	1000021e 	bne	r2,zero,f504 <alt_up_rs232_read_fd+0x5c>
			count++;
    f4fc:	9465883a 	add	r18,r18,r17
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    f500:	a4bff81e 	bne	r20,r18,f4e4 <alt_up_rs232_read_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
    f504:	9005883a 	mov	r2,r18
    f508:	dfc00617 	ldw	ra,24(sp)
    f50c:	dd000517 	ldw	r20,20(sp)
    f510:	dcc00417 	ldw	r19,16(sp)
    f514:	dc800317 	ldw	r18,12(sp)
    f518:	dc400217 	ldw	r17,8(sp)
    f51c:	dc000117 	ldw	r16,4(sp)
    f520:	dec00704 	addi	sp,sp,28
    f524:	f800283a 	ret

0000f528 <alt_up_rs232_get_available_space_in_write_FIFO>:
}

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    f528:	20800a17 	ldw	r2,40(r4)
    f52c:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
    f530:	1004d43a 	srli	r2,r2,16
    f534:	f800283a 	ret

0000f538 <alt_up_rs232_write_data>:
}

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    f538:	20800a17 	ldw	r2,40(r4)
    f53c:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    f540:	29403fcc 	andi	r5,r5,255
    f544:	11400035 	stwio	r5,0(r2)
	return 0;
}
    f548:	0005883a 	mov	r2,zero
    f54c:	f800283a 	ret

0000f550 <alt_up_rs232_write_fd>:
	}
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    f550:	defffb04 	addi	sp,sp,-20
    f554:	dfc00415 	stw	ra,16(sp)
    f558:	dcc00315 	stw	r19,12(sp)
    f55c:	dc800215 	stw	r18,8(sp)
    f560:	dc400115 	stw	r17,4(sp)
    f564:	dc000015 	stw	r16,0(sp)
    f568:	2827883a 	mov	r19,r5
    f56c:	3025883a 	mov	r18,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    f570:	24400017 	ldw	r17,0(r4)
	int count = 0;
	while(len--)
    f574:	3000021e 	bne	r6,zero,f580 <alt_up_rs232_write_fd+0x30>
    f578:	0021883a 	mov	r16,zero
    f57c:	00000806 	br	f5a0 <alt_up_rs232_write_fd+0x50>
    f580:	0021883a 	mov	r16,zero
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    f584:	84c5883a 	add	r2,r16,r19
    f588:	8809883a 	mov	r4,r17
    f58c:	11400003 	ldbu	r5,0(r2)
    f590:	000f5380 	call	f538 <alt_up_rs232_write_data>
    f594:	1000021e 	bne	r2,zero,f5a0 <alt_up_rs232_write_fd+0x50>
		{
			count++;
    f598:	84000044 	addi	r16,r16,1

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    f59c:	943ff91e 	bne	r18,r16,f584 <alt_up_rs232_write_fd+0x34>
		}
		else
			break;
	}
	return count;
}
    f5a0:	8005883a 	mov	r2,r16
    f5a4:	dfc00417 	ldw	ra,16(sp)
    f5a8:	dcc00317 	ldw	r19,12(sp)
    f5ac:	dc800217 	ldw	r18,8(sp)
    f5b0:	dc400117 	ldw	r17,4(sp)
    f5b4:	dc000017 	ldw	r16,0(sp)
    f5b8:	dec00504 	addi	sp,sp,20
    f5bc:	f800283a 	ret

0000f5c0 <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    f5c0:	20800a17 	ldw	r2,40(r4)
    f5c4:	10800104 	addi	r2,r2,4
    f5c8:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    f5cc:	013fff84 	movi	r4,-2
    f5d0:	1906703a 	and	r3,r3,r4
    f5d4:	10c00035 	stwio	r3,0(r2)
}
    f5d8:	f800283a 	ret

0000f5dc <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    f5dc:	20c00a17 	ldw	r3,40(r4)
    f5e0:	18c00104 	addi	r3,r3,4
    f5e4:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    f5e8:	10800054 	ori	r2,r2,1
    f5ec:	18800035 	stwio	r2,0(r3)
}
    f5f0:	f800283a 	ret

0000f5f4 <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    f5f4:	20800a17 	ldw	r2,40(r4)
    f5f8:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
    f5fc:	10bfffcc 	andi	r2,r2,65535
    f600:	f800283a 	ret

0000f604 <alt_up_char_buffer_string>:
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    f604:	20800c17 	ldw	r2,48(r4)
    f608:	30801c2e 	bgeu	r6,r2,f67c <alt_up_char_buffer_string+0x78>
    f60c:	20800d17 	ldw	r2,52(r4)
    f610:	38801a2e 	bgeu	r7,r2,f67c <alt_up_char_buffer_string+0x78>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    f614:	22001017 	ldw	r8,64(r4)

	while ( *ptr )
    f618:	28c00003 	ldbu	r3,0(r5)
    f61c:	18803fcc 	andi	r2,r3,255
    f620:	1080201c 	xori	r2,r2,128
    f624:	10bfe004 	addi	r2,r2,-128
    f628:	10001626 	beq	r2,zero,f684 <alt_up_char_buffer_string+0x80>
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    f62c:	3a04983a 	sll	r2,r7,r8
    f630:	308f883a 	add	r7,r6,r2
    f634:	02000044 	movi	r8,1

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    f638:	20800b17 	ldw	r2,44(r4)
    f63c:	3885883a 	add	r2,r7,r2
    f640:	18c03fcc 	andi	r3,r3,255
    f644:	18c0201c 	xori	r3,r3,128
    f648:	18ffe004 	addi	r3,r3,-128
    f64c:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
    f650:	320d883a 	add	r6,r6,r8
    f654:	20800c17 	ldw	r2,48(r4)
    f658:	3080082e 	bgeu	r6,r2,f67c <alt_up_char_buffer_string+0x78>
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
    f65c:	2a0b883a 	add	r5,r5,r8
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    f660:	28c00003 	ldbu	r3,0(r5)
    f664:	18803fcc 	andi	r2,r3,255
    f668:	1080201c 	xori	r2,r2,128
    f66c:	10bfe004 	addi	r2,r2,-128
    f670:	10000426 	beq	r2,zero,f684 <alt_up_char_buffer_string+0x80>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
    f674:	3a0f883a 	add	r7,r7,r8
    f678:	003fef06 	br	f638 <alt_up_char_buffer_string+0x34>
    f67c:	00bfffc4 	movi	r2,-1
    f680:	f800283a 	ret
    f684:	0005883a 	mov	r2,zero
	}
	return 0;
}
    f688:	f800283a 	ret

0000f68c <alt_up_char_buffer_draw>:

  return dev;
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    f68c:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    f690:	20800c17 	ldw	r2,48(r4)
    f694:	3080112e 	bgeu	r6,r2,f6dc <alt_up_char_buffer_draw+0x50>
    f698:	20800d17 	ldw	r2,52(r4)
    f69c:	38800f2e 	bgeu	r7,r2,f6dc <alt_up_char_buffer_draw+0x50>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    f6a0:	20c00f17 	ldw	r3,60(r4)
    f6a4:	30c6703a 	and	r3,r6,r3
    f6a8:	20800e17 	ldw	r2,56(r4)
    f6ac:	1886983a 	sll	r3,r3,r2
    f6b0:	20801117 	ldw	r2,68(r4)
    f6b4:	3884703a 	and	r2,r7,r2
    f6b8:	21001017 	ldw	r4,64(r4)
    f6bc:	1104983a 	sll	r2,r2,r4
    f6c0:	1886b03a 	or	r3,r3,r2
    f6c4:	40800b17 	ldw	r2,44(r8)
    f6c8:	1887883a 	add	r3,r3,r2
    f6cc:	28803fcc 	andi	r2,r5,255
    f6d0:	18800025 	stbio	r2,0(r3)
    f6d4:	0005883a 	mov	r2,zero
    f6d8:	f800283a 	ret

	return 0;
    f6dc:	00bfffc4 	movi	r2,-1
}
    f6e0:	f800283a 	ret

0000f6e4 <alt_up_char_buffer_clear>:
	}
	return 0;
}

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    f6e4:	20c00a17 	ldw	r3,40(r4)
    f6e8:	00800044 	movi	r2,1
    f6ec:	188000a5 	stbio	r2,2(r3)
    f6f0:	20800a17 	ldw	r2,40(r4)
    f6f4:	10c00084 	addi	r3,r2,2
    f6f8:	01000044 	movi	r4,1
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    f6fc:	18800023 	ldbuio	r2,0(r3)
    f700:	1104703a 	and	r2,r2,r4
    f704:	103ffd1e 	bne	r2,zero,f6fc <alt_up_char_buffer_clear+0x18>
	return 0;
}
    f708:	f800283a 	ret

0000f70c <alt_up_char_buffer_open_dev>:
	}
	
	return;
}

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    f70c:	deffff04 	addi	sp,sp,-4
    f710:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    f714:	01400074 	movhi	r5,1
    f718:	29491004 	addi	r5,r5,9280
    f71c:	000f8840 	call	f884 <alt_find_dev>

  return dev;
}
    f720:	dfc00017 	ldw	ra,0(sp)
    f724:	dec00104 	addi	sp,sp,4
    f728:	f800283a 	ret

0000f72c <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    f72c:	defffe04 	addi	sp,sp,-8
    f730:	dfc00115 	stw	ra,4(sp)
    f734:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
    f738:	24000217 	ldw	r16,8(r4)

	for ( ; (*name) != '\0'; name++) {
    f73c:	80800007 	ldb	r2,0(r16)
    f740:	10000a26 	beq	r2,zero,f76c <alt_up_char_buffer_init+0x40>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    f744:	8009883a 	mov	r4,r16
    f748:	01400074 	movhi	r5,1
    f74c:	29414504 	addi	r5,r5,1300
    f750:	000c00c0 	call	c00c <strcmp>
    f754:	1000021e 	bne	r2,zero,f760 <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
    f758:	80000005 	stb	zero,0(r16)
    f75c:	00000306 	br	f76c <alt_up_char_buffer_init+0x40>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    f760:	84000044 	addi	r16,r16,1
    f764:	80800007 	ldb	r2,0(r16)
    f768:	103ff61e 	bne	r2,zero,f744 <alt_up_char_buffer_init+0x18>
			break;
		}
	}
	
	return;
}
    f76c:	dfc00117 	ldw	ra,4(sp)
    f770:	dc000017 	ldw	r16,0(sp)
    f774:	dec00204 	addi	sp,sp,8
    f778:	f800283a 	ret

0000f77c <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    f77c:	00800074 	movhi	r2,1
    f780:	1090f404 	addi	r2,r2,17360
    f784:	10800017 	ldw	r2,0(r2)
    f788:	1000021e 	bne	r2,zero,f794 <alt_alarm_start+0x18>
    f78c:	00bfde84 	movi	r2,-134
    f790:	f800283a 	ret
  {
    if (alarm)
    f794:	2000021e 	bne	r4,zero,f7a0 <alt_alarm_start+0x24>
    f798:	00bffa84 	movi	r2,-22
    f79c:	f800283a 	ret
    {
      alarm->callback = callback;
    f7a0:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    f7a4:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f7a8:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f7ac:	00bfff84 	movi	r2,-2
    f7b0:	3884703a 	and	r2,r7,r2
    f7b4:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    f7b8:	00800074 	movhi	r2,1
    f7bc:	1090f504 	addi	r2,r2,17364
    f7c0:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    f7c4:	01800044 	movi	r6,1
    f7c8:	1985883a 	add	r2,r3,r6
    f7cc:	2885883a 	add	r2,r5,r2
    f7d0:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    f7d4:	10c0022e 	bgeu	r2,r3,f7e0 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
    f7d8:	21800405 	stb	r6,16(r4)
    f7dc:	00000106 	br	f7e4 <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
    f7e0:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f7e4:	00800074 	movhi	r2,1
    f7e8:	10891604 	addi	r2,r2,9304
    f7ec:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    f7f0:	10c00017 	ldw	r3,0(r2)
    f7f4:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    f7f8:	10c00017 	ldw	r3,0(r2)
    f7fc:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    f800:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f804:	3801703a 	wrctl	status,r7
    f808:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
    f80c:	f800283a 	ret

0000f810 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    f810:	f800283a 	ret

0000f814 <alt_dev_llist_insert>:
    f814:	deffff04 	addi	sp,sp,-4
    f818:	dfc00015 	stw	ra,0(sp)
    f81c:	20000226 	beq	r4,zero,f828 <alt_dev_llist_insert+0x14>
    f820:	20800217 	ldw	r2,8(r4)
    f824:	10000d1e 	bne	r2,zero,f85c <alt_dev_llist_insert+0x48>
    f828:	00800074 	movhi	r2,1
    f82c:	10891304 	addi	r2,r2,9292
    f830:	10800017 	ldw	r2,0(r2)
    f834:	1000031e 	bne	r2,zero,f844 <alt_dev_llist_insert+0x30>
    f838:	00c00074 	movhi	r3,1
    f83c:	18d0e504 	addi	r3,r3,17300
    f840:	00000206 	br	f84c <alt_dev_llist_insert+0x38>
    f844:	103ee83a 	callr	r2
    f848:	1007883a 	mov	r3,r2
    f84c:	00800584 	movi	r2,22
    f850:	18800015 	stw	r2,0(r3)
    f854:	00bffa84 	movi	r2,-22
    f858:	00000706 	br	f878 <alt_dev_llist_insert+0x64>
    f85c:	21400115 	stw	r5,4(r4)
    f860:	28800017 	ldw	r2,0(r5)
    f864:	20800015 	stw	r2,0(r4)
    f868:	28800017 	ldw	r2,0(r5)
    f86c:	11000115 	stw	r4,4(r2)
    f870:	29000015 	stw	r4,0(r5)
    f874:	0005883a 	mov	r2,zero
    f878:	dfc00017 	ldw	ra,0(sp)
    f87c:	dec00104 	addi	sp,sp,4
    f880:	f800283a 	ret

0000f884 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    f884:	defffb04 	addi	sp,sp,-20
    f888:	dfc00415 	stw	ra,16(sp)
    f88c:	dcc00315 	stw	r19,12(sp)
    f890:	dc800215 	stw	r18,8(sp)
    f894:	dc400115 	stw	r17,4(sp)
    f898:	dc000015 	stw	r16,0(sp)
    f89c:	2027883a 	mov	r19,r4
    f8a0:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
    f8a4:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    f8a8:	00065180 	call	6518 <strlen>
    f8ac:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f8b0:	8c000726 	beq	r17,r16,f8d0 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    f8b4:	89000217 	ldw	r4,8(r17)
    f8b8:	980b883a 	mov	r5,r19
    f8bc:	900d883a 	mov	r6,r18
    f8c0:	000fbe00 	call	fbe0 <memcmp>
    f8c4:	10000326 	beq	r2,zero,f8d4 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    f8c8:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f8cc:	847ff91e 	bne	r16,r17,f8b4 <alt_find_dev+0x30>
    f8d0:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
    f8d4:	8805883a 	mov	r2,r17
    f8d8:	dfc00417 	ldw	ra,16(sp)
    f8dc:	dcc00317 	ldw	r19,12(sp)
    f8e0:	dc800217 	ldw	r18,8(sp)
    f8e4:	dc400117 	ldw	r17,4(sp)
    f8e8:	dc000017 	ldw	r16,0(sp)
    f8ec:	dec00504 	addi	sp,sp,20
    f8f0:	f800283a 	ret

0000f8f4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    f8f4:	defff904 	addi	sp,sp,-28
    f8f8:	dfc00615 	stw	ra,24(sp)
    f8fc:	dd400515 	stw	r21,20(sp)
    f900:	dd000415 	stw	r20,16(sp)
    f904:	dcc00315 	stw	r19,12(sp)
    f908:	dc800215 	stw	r18,8(sp)
    f90c:	dc400115 	stw	r17,4(sp)
    f910:	dc000015 	stw	r16,0(sp)
    f914:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    f918:	00800074 	movhi	r2,1
    f91c:	10890e04 	addi	r2,r2,9272
    f920:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f924:	102b883a 	mov	r21,r2
    f928:	88801626 	beq	r17,r2,f984 <alt_find_file+0x90>
    f92c:	053fffc4 	movi	r20,-1
    f930:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
    f934:	8c000217 	ldw	r16,8(r17)
    f938:	8009883a 	mov	r4,r16
    f93c:	00065180 	call	6518 <strlen>
    f940:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
    f944:	8085883a 	add	r2,r16,r2
    f948:	1505883a 	add	r2,r2,r20
    f94c:	10800007 	ldb	r2,0(r2)
    f950:	14c0011e 	bne	r2,r19,f958 <alt_find_file+0x64>
    {
      len -= 1;
    f954:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f958:	1c85883a 	add	r2,r3,r18
    f95c:	10800007 	ldb	r2,0(r2)
    f960:	14c00126 	beq	r2,r19,f968 <alt_find_file+0x74>
    f964:	1000051e 	bne	r2,zero,f97c <alt_find_file+0x88>
    f968:	8009883a 	mov	r4,r16
    f96c:	900b883a 	mov	r5,r18
    f970:	180d883a 	mov	r6,r3
    f974:	000fbe00 	call	fbe0 <memcmp>
    f978:	10000326 	beq	r2,zero,f988 <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    f97c:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f980:	8d7fec1e 	bne	r17,r21,f934 <alt_find_file+0x40>
    f984:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
    f988:	8805883a 	mov	r2,r17
    f98c:	dfc00617 	ldw	ra,24(sp)
    f990:	dd400517 	ldw	r21,20(sp)
    f994:	dd000417 	ldw	r20,16(sp)
    f998:	dcc00317 	ldw	r19,12(sp)
    f99c:	dc800217 	ldw	r18,8(sp)
    f9a0:	dc400117 	ldw	r17,4(sp)
    f9a4:	dc000017 	ldw	r16,0(sp)
    f9a8:	dec00704 	addi	sp,sp,28
    f9ac:	f800283a 	ret

0000f9b0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    f9b0:	000b883a 	mov	r5,zero
    f9b4:	00c00074 	movhi	r3,1
    f9b8:	18c37104 	addi	r3,r3,3524
    f9bc:	02000304 	movi	r8,12
    f9c0:	02400074 	movhi	r9,1
    f9c4:	4a491204 	addi	r9,r9,9288
    f9c8:	01c00044 	movi	r7,1
    f9cc:	01800804 	movi	r6,32
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    f9d0:	18800017 	ldw	r2,0(r3)
    f9d4:	10000c1e 	bne	r2,zero,fa08 <alt_get_fd+0x58>
    {
      alt_fd_list[i].dev = dev;
    f9d8:	2a05383a 	mul	r2,r5,r8
    f9dc:	00c00074 	movhi	r3,1
    f9e0:	18c37104 	addi	r3,r3,3524
    f9e4:	10c5883a 	add	r2,r2,r3
    f9e8:	11000015 	stw	r4,0(r2)
      if (i > alt_max_fd)
    f9ec:	48800017 	ldw	r2,0(r9)
    f9f0:	11400216 	blt	r2,r5,f9fc <alt_get_fd+0x4c>
    f9f4:	2805883a 	mov	r2,r5
    f9f8:	f800283a 	ret
      {
        alt_max_fd = i;
    f9fc:	49400015 	stw	r5,0(r9)
    fa00:	2805883a 	mov	r2,r5
    fa04:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    fa08:	29cb883a 	add	r5,r5,r7
    fa0c:	1a07883a 	add	r3,r3,r8
    fa10:	29bfef1e 	bne	r5,r6,f9d0 <alt_get_fd+0x20>
    fa14:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    fa18:	f800283a 	ret

0000fa1c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    fa1c:	deffff04 	addi	sp,sp,-4
    fa20:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    fa24:	0009883a 	mov	r4,zero
    fa28:	01440004 	movi	r5,4096
    fa2c:	000fb6c0 	call	fb6c <alt_icache_flush>
#endif
}
    fa30:	dfc00017 	ldw	ra,0(sp)
    fa34:	dec00104 	addi	sp,sp,4
    fa38:	f800283a 	ret

0000fa3c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    fa3c:	defffe04 	addi	sp,sp,-8
    fa40:	dfc00115 	stw	ra,4(sp)
    fa44:	dc000015 	stw	r16,0(sp)
    fa48:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
    fa4c:	2809883a 	mov	r4,r5
    fa50:	300b883a 	mov	r5,r6
    fa54:	380d883a 	mov	r6,r7
    fa58:	000d7380 	call	d738 <open>
    fa5c:	1009883a 	mov	r4,r2

  if (old >= 0)
    fa60:	10000b16 	blt	r2,zero,fa90 <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
    fa64:	10c00324 	muli	r3,r2,12
    fa68:	00800074 	movhi	r2,1
    fa6c:	10837104 	addi	r2,r2,3524
    fa70:	1887883a 	add	r3,r3,r2
    fa74:	18800017 	ldw	r2,0(r3)
    fa78:	80800015 	stw	r2,0(r16)
    fd->priv     = alt_fd_list[old].priv;
    fa7c:	18800117 	ldw	r2,4(r3)
    fa80:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    fa84:	18800217 	ldw	r2,8(r3)
    fa88:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
    fa8c:	000d9ac0 	call	d9ac <alt_release_fd>
  }
} 
    fa90:	dfc00117 	ldw	ra,4(sp)
    fa94:	dc000017 	ldw	r16,0(sp)
    fa98:	dec00204 	addi	sp,sp,8
    fa9c:	f800283a 	ret

0000faa0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    faa0:	defffa04 	addi	sp,sp,-24
    faa4:	dfc00515 	stw	ra,20(sp)
    faa8:	dd000415 	stw	r20,16(sp)
    faac:	dcc00315 	stw	r19,12(sp)
    fab0:	dc800215 	stw	r18,8(sp)
    fab4:	dc400115 	stw	r17,4(sp)
    fab8:	dc000015 	stw	r16,0(sp)
    fabc:	2005883a 	mov	r2,r4
    fac0:	2827883a 	mov	r19,r5
    fac4:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    fac8:	04000074 	movhi	r16,1
    facc:	84037404 	addi	r16,r16,3536
    fad0:	04800044 	movi	r18,1
    fad4:	04407fc4 	movi	r17,511
    fad8:	8009883a 	mov	r4,r16
    fadc:	100b883a 	mov	r5,r2
    fae0:	900d883a 	mov	r6,r18
    fae4:	880f883a 	mov	r7,r17
    fae8:	000fa3c0 	call	fa3c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    faec:	843ffd04 	addi	r16,r16,-12
    faf0:	8009883a 	mov	r4,r16
    faf4:	980b883a 	mov	r5,r19
    faf8:	000d883a 	mov	r6,zero
    fafc:	880f883a 	mov	r7,r17
    fb00:	000fa3c0 	call	fa3c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    fb04:	81000604 	addi	r4,r16,24
    fb08:	a00b883a 	mov	r5,r20
    fb0c:	900d883a 	mov	r6,r18
    fb10:	880f883a 	mov	r7,r17
    fb14:	000fa3c0 	call	fa3c <alt_open_fd>
}  
    fb18:	dfc00517 	ldw	ra,20(sp)
    fb1c:	dd000417 	ldw	r20,16(sp)
    fb20:	dcc00317 	ldw	r19,12(sp)
    fb24:	dc800217 	ldw	r18,8(sp)
    fb28:	dc400117 	ldw	r17,4(sp)
    fb2c:	dc000017 	ldw	r16,0(sp)
    fb30:	dec00604 	addi	sp,sp,24
    fb34:	f800283a 	ret

0000fb38 <alt_remap_uncached>:
 * Convert a pointer to a block of cached memory, into a block of
 * uncached memory.
 */

volatile void* alt_remap_uncached (void* ptr, alt_u32 len)
{
    fb38:	defffe04 	addi	sp,sp,-8
    fb3c:	dfc00115 	stw	ra,4(sp)
    fb40:	dc000015 	stw	r16,0(sp)
    fb44:	2021883a 	mov	r16,r4
  alt_dcache_flush (ptr, len);
    fb48:	000fb680 	call	fb68 <alt_dcache_flush>
  return (volatile void*) (((alt_u32) ptr) | BYPASS_DCACHE_MASK);
}
    fb4c:	80a00034 	orhi	r2,r16,32768
    fb50:	dfc00117 	ldw	ra,4(sp)
    fb54:	dc000017 	ldw	r16,0(sp)
    fb58:	dec00204 	addi	sp,sp,8
    fb5c:	f800283a 	ret

0000fb60 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    fb60:	000170fa 	wrctl	ienable,zero
}
    fb64:	f800283a 	ret

0000fb68 <alt_dcache_flush>:
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    fb68:	f800283a 	ret

0000fb6c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    fb6c:	2007883a 	mov	r3,r4
    fb70:	00840004 	movi	r2,4096
    fb74:	1140012e 	bgeu	r2,r5,fb7c <alt_icache_flush+0x10>
    fb78:	100b883a 	mov	r5,r2
    fb7c:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    fb80:	1940042e 	bgeu	r3,r5,fb94 <alt_icache_flush+0x28>
    fb84:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    fb88:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    fb8c:	1887883a 	add	r3,r3,r2
    fb90:	197ffd36 	bltu	r3,r5,fb88 <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    fb94:	208007cc 	andi	r2,r4,31
    fb98:	10000126 	beq	r2,zero,fba0 <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    fb9c:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    fba0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    fba4:	f800283a 	ret

0000fba8 <exit>:
    fba8:	defffe04 	addi	sp,sp,-8
    fbac:	000b883a 	mov	r5,zero
    fbb0:	dc000015 	stw	r16,0(sp)
    fbb4:	dfc00115 	stw	ra,4(sp)
    fbb8:	2021883a 	mov	r16,r4
    fbbc:	000fc580 	call	fc58 <__call_exitprocs>
    fbc0:	00800074 	movhi	r2,1
    fbc4:	10890904 	addi	r2,r2,9252
    fbc8:	11000017 	ldw	r4,0(r2)
    fbcc:	20800f17 	ldw	r2,60(r4)
    fbd0:	10000126 	beq	r2,zero,fbd8 <exit+0x30>
    fbd4:	103ee83a 	callr	r2
    fbd8:	8009883a 	mov	r4,r16
    fbdc:	000fe080 	call	fe08 <_exit>

0000fbe0 <memcmp>:
    fbe0:	00c000c4 	movi	r3,3
    fbe4:	1980032e 	bgeu	r3,r6,fbf4 <memcmp+0x14>
    fbe8:	2144b03a 	or	r2,r4,r5
    fbec:	10c4703a 	and	r2,r2,r3
    fbf0:	10000f26 	beq	r2,zero,fc30 <memcmp+0x50>
    fbf4:	31ffffc4 	addi	r7,r6,-1
    fbf8:	3000061e 	bne	r6,zero,fc14 <memcmp+0x34>
    fbfc:	00000a06 	br	fc28 <memcmp+0x48>
    fc00:	39ffffc4 	addi	r7,r7,-1
    fc04:	00bfffc4 	movi	r2,-1
    fc08:	21000044 	addi	r4,r4,1
    fc0c:	29400044 	addi	r5,r5,1
    fc10:	38800526 	beq	r7,r2,fc28 <memcmp+0x48>
    fc14:	20c00003 	ldbu	r3,0(r4)
    fc18:	28800003 	ldbu	r2,0(r5)
    fc1c:	18bff826 	beq	r3,r2,fc00 <memcmp+0x20>
    fc20:	1885c83a 	sub	r2,r3,r2
    fc24:	f800283a 	ret
    fc28:	0005883a 	mov	r2,zero
    fc2c:	f800283a 	ret
    fc30:	180f883a 	mov	r7,r3
    fc34:	20c00017 	ldw	r3,0(r4)
    fc38:	28800017 	ldw	r2,0(r5)
    fc3c:	18bfed1e 	bne	r3,r2,fbf4 <memcmp+0x14>
    fc40:	31bfff04 	addi	r6,r6,-4
    fc44:	21000104 	addi	r4,r4,4
    fc48:	29400104 	addi	r5,r5,4
    fc4c:	39bff936 	bltu	r7,r6,fc34 <memcmp+0x54>
    fc50:	003fe806 	br	fbf4 <memcmp+0x14>

0000fc54 <register_fini>:
    fc54:	f800283a 	ret

0000fc58 <__call_exitprocs>:
    fc58:	00800074 	movhi	r2,1
    fc5c:	10890904 	addi	r2,r2,9252
    fc60:	10800017 	ldw	r2,0(r2)
    fc64:	defff304 	addi	sp,sp,-52
    fc68:	df000b15 	stw	fp,44(sp)
    fc6c:	d8800115 	stw	r2,4(sp)
    fc70:	00800034 	movhi	r2,0
    fc74:	10800004 	addi	r2,r2,0
    fc78:	1005003a 	cmpeq	r2,r2,zero
    fc7c:	d8800215 	stw	r2,8(sp)
    fc80:	d8800117 	ldw	r2,4(sp)
    fc84:	dd400815 	stw	r21,32(sp)
    fc88:	dd000715 	stw	r20,28(sp)
    fc8c:	10805204 	addi	r2,r2,328
    fc90:	dfc00c15 	stw	ra,48(sp)
    fc94:	ddc00a15 	stw	r23,40(sp)
    fc98:	dd800915 	stw	r22,36(sp)
    fc9c:	dcc00615 	stw	r19,24(sp)
    fca0:	dc800515 	stw	r18,20(sp)
    fca4:	dc400415 	stw	r17,16(sp)
    fca8:	dc000315 	stw	r16,12(sp)
    fcac:	282b883a 	mov	r21,r5
    fcb0:	2039883a 	mov	fp,r4
    fcb4:	d8800015 	stw	r2,0(sp)
    fcb8:	2829003a 	cmpeq	r20,r5,zero
    fcbc:	d8800117 	ldw	r2,4(sp)
    fcc0:	14405217 	ldw	r17,328(r2)
    fcc4:	88001026 	beq	r17,zero,fd08 <__call_exitprocs+0xb0>
    fcc8:	ddc00017 	ldw	r23,0(sp)
    fccc:	88800117 	ldw	r2,4(r17)
    fcd0:	8c802204 	addi	r18,r17,136
    fcd4:	143fffc4 	addi	r16,r2,-1
    fcd8:	80000916 	blt	r16,zero,fd00 <__call_exitprocs+0xa8>
    fcdc:	05bfffc4 	movi	r22,-1
    fce0:	a000151e 	bne	r20,zero,fd38 <__call_exitprocs+0xe0>
    fce4:	8409883a 	add	r4,r16,r16
    fce8:	2105883a 	add	r2,r4,r4
    fcec:	1485883a 	add	r2,r2,r18
    fcf0:	10c02017 	ldw	r3,128(r2)
    fcf4:	a8c01126 	beq	r21,r3,fd3c <__call_exitprocs+0xe4>
    fcf8:	843fffc4 	addi	r16,r16,-1
    fcfc:	85bff81e 	bne	r16,r22,fce0 <__call_exitprocs+0x88>
    fd00:	d8800217 	ldw	r2,8(sp)
    fd04:	10003126 	beq	r2,zero,fdcc <__call_exitprocs+0x174>
    fd08:	dfc00c17 	ldw	ra,48(sp)
    fd0c:	df000b17 	ldw	fp,44(sp)
    fd10:	ddc00a17 	ldw	r23,40(sp)
    fd14:	dd800917 	ldw	r22,36(sp)
    fd18:	dd400817 	ldw	r21,32(sp)
    fd1c:	dd000717 	ldw	r20,28(sp)
    fd20:	dcc00617 	ldw	r19,24(sp)
    fd24:	dc800517 	ldw	r18,20(sp)
    fd28:	dc400417 	ldw	r17,16(sp)
    fd2c:	dc000317 	ldw	r16,12(sp)
    fd30:	dec00d04 	addi	sp,sp,52
    fd34:	f800283a 	ret
    fd38:	8409883a 	add	r4,r16,r16
    fd3c:	88c00117 	ldw	r3,4(r17)
    fd40:	2105883a 	add	r2,r4,r4
    fd44:	1445883a 	add	r2,r2,r17
    fd48:	18ffffc4 	addi	r3,r3,-1
    fd4c:	11800217 	ldw	r6,8(r2)
    fd50:	1c001526 	beq	r3,r16,fda8 <__call_exitprocs+0x150>
    fd54:	10000215 	stw	zero,8(r2)
    fd58:	303fe726 	beq	r6,zero,fcf8 <__call_exitprocs+0xa0>
    fd5c:	00c00044 	movi	r3,1
    fd60:	1c06983a 	sll	r3,r3,r16
    fd64:	90804017 	ldw	r2,256(r18)
    fd68:	8cc00117 	ldw	r19,4(r17)
    fd6c:	1884703a 	and	r2,r3,r2
    fd70:	10001426 	beq	r2,zero,fdc4 <__call_exitprocs+0x16c>
    fd74:	90804117 	ldw	r2,260(r18)
    fd78:	1884703a 	and	r2,r3,r2
    fd7c:	10000c1e 	bne	r2,zero,fdb0 <__call_exitprocs+0x158>
    fd80:	2105883a 	add	r2,r4,r4
    fd84:	1485883a 	add	r2,r2,r18
    fd88:	11400017 	ldw	r5,0(r2)
    fd8c:	e009883a 	mov	r4,fp
    fd90:	303ee83a 	callr	r6
    fd94:	88800117 	ldw	r2,4(r17)
    fd98:	98bfc81e 	bne	r19,r2,fcbc <__call_exitprocs+0x64>
    fd9c:	b8800017 	ldw	r2,0(r23)
    fda0:	147fd526 	beq	r2,r17,fcf8 <__call_exitprocs+0xa0>
    fda4:	003fc506 	br	fcbc <__call_exitprocs+0x64>
    fda8:	8c000115 	stw	r16,4(r17)
    fdac:	003fea06 	br	fd58 <__call_exitprocs+0x100>
    fdb0:	2105883a 	add	r2,r4,r4
    fdb4:	1485883a 	add	r2,r2,r18
    fdb8:	11000017 	ldw	r4,0(r2)
    fdbc:	303ee83a 	callr	r6
    fdc0:	003ff406 	br	fd94 <__call_exitprocs+0x13c>
    fdc4:	303ee83a 	callr	r6
    fdc8:	003ff206 	br	fd94 <__call_exitprocs+0x13c>
    fdcc:	88800117 	ldw	r2,4(r17)
    fdd0:	1000081e 	bne	r2,zero,fdf4 <__call_exitprocs+0x19c>
    fdd4:	89000017 	ldw	r4,0(r17)
    fdd8:	20000726 	beq	r4,zero,fdf8 <__call_exitprocs+0x1a0>
    fddc:	b9000015 	stw	r4,0(r23)
    fde0:	8809883a 	mov	r4,r17
    fde4:	00000000 	call	0 <__reset>
    fde8:	bc400017 	ldw	r17,0(r23)
    fdec:	883fb71e 	bne	r17,zero,fccc <__call_exitprocs+0x74>
    fdf0:	003fc506 	br	fd08 <__call_exitprocs+0xb0>
    fdf4:	89000017 	ldw	r4,0(r17)
    fdf8:	882f883a 	mov	r23,r17
    fdfc:	2023883a 	mov	r17,r4
    fe00:	883fb21e 	bne	r17,zero,fccc <__call_exitprocs+0x74>
    fe04:	003fc006 	br	fd08 <__call_exitprocs+0xb0>

0000fe08 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    fe08:	20000226 	beq	r4,zero,fe14 <_exit+0xc>
    ALT_SIM_FAIL();
    fe0c:	002af070 	cmpltui	zero,zero,43969
    fe10:	00000106 	br	fe18 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    fe14:	002af0b0 	cmpltui	zero,zero,43970
    fe18:	003fff06 	br	fe18 <_exit+0x10>
    fe1c:	0000fc54 	movui	zero,1009
